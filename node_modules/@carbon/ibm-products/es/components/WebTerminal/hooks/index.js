import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
//
// Copyright IBM Corp. 2022, 2022
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

import React, { useState, useCallback, createContext } from 'react';
import { useContext } from 'react';
import PropTypes from 'prop-types';
import { pkg } from '../../../settings';
export var WebTerminalContext = /*#__PURE__*/createContext();
var componentName = 'WebTerminalProvider';
export var WebTerminalProvider = function WebTerminalProvider(_ref) {
  var children = _ref.children;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var openWebTerminal = useCallback(function () {
    return setOpen(true);
  }, []);
  var closeWebTerminal = useCallback(function () {
    return setOpen(false);
  }, []);
  var toggleWebTerminal = useCallback(function () {
    return setOpen(!open);
  }, [open]);
  return /*#__PURE__*/React.createElement(WebTerminalContext.Provider, {
    value: {
      open: open,
      openWebTerminal: openWebTerminal,
      closeWebTerminal: closeWebTerminal,
      toggleWebTerminal: toggleWebTerminal
    }
  }, children);
};

// Return a placeholder if not released and not enabled by feature flag
WebTerminalProvider = pkg.checkComponentEnabled(WebTerminalProvider, componentName);
WebTerminalProvider.propTypes = {
  /**
   * Provide your own terminal component as children to show up in the web terminal
   */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired
};

// Custom hook that exposes the provided value from context
export var useWebTerminal = function useWebTerminal() {
  return useContext(WebTerminalContext);
};