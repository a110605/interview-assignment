import _objectDestructuringEmpty from "@babel/runtime/helpers/objectDestructuringEmpty";
import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["actions", "children", "className", "closeIconDescription", "documentationLinks", "documentationLinksIconDescription", "isInitiallyOpen"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Copyright IBM Corp. 2020, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Import portions of React that are needed.
import React, { useMemo, useState, useEffect } from 'react';

// Other standard imports.
import PropTypes from 'prop-types';
import cx from 'classnames';
import { pkg } from '../../settings';

// Carbon and package components we use.
import { Close, Help } from '@carbon/react/icons';
import { Button, OverflowMenu, OverflowMenuItem } from '@carbon/react';
import { moderate02 } from '@carbon/motion';
import { useWebTerminal } from './hooks';
import { getDevtoolsProps } from '../../global/js/utils/devtools';

// The block part of our conventional BEM class names (blockClass__E--M).
var componentName = 'WebTerminal';
var blockClass = "".concat(pkg.prefix, "--web-terminal");

// Default values for props
var defaults = {
  actions: Object.freeze([]),
  documentationLinks: Object.freeze([]),
  documentationLinksIconDescription: 'Show documentation links',
  isInitiallyOpen: false
};

/**
 * The `WebTerminal` is prompted by the user and is persistent until dismissed. The purpose of a web terminal is to provide users with the ability to type commands manually instead of using the GUI.
 */
export var WebTerminal = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var _ref3;
  var _ref$actions = _ref.actions,
    actions = _ref$actions === void 0 ? defaults.actions : _ref$actions,
    children = _ref.children,
    className = _ref.className,
    closeIconDescription = _ref.closeIconDescription,
    _ref$documentationLin = _ref.documentationLinks,
    documentationLinks = _ref$documentationLin === void 0 ? defaults.documentationLinks : _ref$documentationLin,
    _ref$documentationLin2 = _ref.documentationLinksIconDescription,
    documentationLinksIconDescription = _ref$documentationLin2 === void 0 ? defaults.documentationLinksIconDescription : _ref$documentationLin2,
    _ref$isInitiallyOpen = _ref.isInitiallyOpen,
    isInitiallyOpen = _ref$isInitiallyOpen === void 0 ? defaults.isInitiallyOpen : _ref$isInitiallyOpen,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useWebTerminal = useWebTerminal(),
    open = _useWebTerminal.open,
    closeWebTerminal = _useWebTerminal.closeWebTerminal,
    openWebTerminal = _useWebTerminal.openWebTerminal;
  var _useState = useState(open),
    _useState2 = _slicedToArray(_useState, 2),
    shouldRender = _useState2[0],
    setRender = _useState2[1];
  var _ref2 = window && window.matchMedia ? window.matchMedia('(prefers-reduced-motion: reduce)') : {
      matches: true
    },
    prefersReducedMotion = _ref2.matches;
  var webTerminalAnimationName = "".concat(open ? 'web-terminal-entrance' : 'web-terminal-exit', " ").concat(moderate02);
  var showDocumentationLinks = useMemo(function () {
    return documentationLinks.length > 0;
  }, [documentationLinks]);
  useEffect(function () {
    if (open) {
      setRender(true);
    }
  }, [open]);

  /**
    On render, check if user want's the web terminal to be open by default
  */
  useEffect(function () {
    if (isInitiallyOpen) {
      openWebTerminal();
    }
  }, []); // eslint-disable-line

  /**
    When the web terminal slide in animation is complete, sets render to false.
  */
  var onAnimationEnd = function onAnimationEnd() {
    if (!open) {
      setRender(false);
    }
  };
  var handleCloseTerminal = function handleCloseTerminal() {
    /**
      If the user prefers reduced motion, we have to manually set render to false
      because onAnimationEnd will never be called.
    */
    if (prefersReducedMotion) {
      setRender(false);
    }
    closeWebTerminal();
  };
  return shouldRender ? /*#__PURE__*/React.createElement("div", _extends({}, _objectSpread(_objectSpread({}, rest), getDevtoolsProps(componentName)), {
    ref: ref,
    className: cx([blockClass, className, (_ref3 = {}, _defineProperty(_ref3, "".concat(blockClass, "--open"), open), _defineProperty(_ref3, "".concat(blockClass, "--closed"), !open), _ref3)]),
    style: {
      animation: !prefersReducedMotion && webTerminalAnimationName
    },
    onAnimationEnd: onAnimationEnd
  }), /*#__PURE__*/React.createElement("header", {
    className: "".concat(blockClass, "__bar")
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__actions")
  }, showDocumentationLinks && /*#__PURE__*/React.createElement(OverflowMenu, {
    renderIcon: function renderIcon(props) {
      return /*#__PURE__*/React.createElement(Help, _extends({
        size: 16
      }, props));
    },
    iconDescription: documentationLinksIconDescription,
    "aria-label": documentationLinksIconDescription,
    menuOptionsClass: "".concat(blockClass, "__documentation-overflow"),
    size: "lg"
  }, documentationLinks.map(function (_ref4, i) {
    var rest = _extends({}, (_objectDestructuringEmpty(_ref4), _ref4));
    return /*#__PURE__*/React.createElement(OverflowMenuItem, _extends({
      key: i
    }, rest));
  })), actions.map(function (_ref5) {
    var renderIcon = _ref5.renderIcon,
      onClick = _ref5.onClick,
      iconDescription = _ref5.iconDescription;
    return /*#__PURE__*/React.createElement(Button, {
      key: iconDescription,
      hasIconOnly: true,
      renderIcon: renderIcon,
      onClick: onClick,
      iconDescription: iconDescription,
      kind: "ghost",
      "aria-label": iconDescription
    });
  })), /*#__PURE__*/React.createElement(Button, {
    hasIconOnly: true,
    renderIcon: function renderIcon(props) {
      return /*#__PURE__*/React.createElement(Close, _extends({
        size: 16
      }, props));
    },
    kind: "ghost",
    iconDescription: closeIconDescription,
    onClick: handleCloseTerminal,
    onAnimationEnd: function onAnimationEnd(event) {
      return event.stopPropagation();
    }
  })), /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__body")
  }, children)) : null;
});

// Return a placeholder if not released and not enabled by feature flag
WebTerminal = pkg.checkComponentEnabled(WebTerminal, componentName);

// The display name of the component, used by React. Note that displayName
// is used in preference to relying on function.name.
WebTerminal.displayName = componentName;

// The types and DocGen commentary for the component props,
// in alphabetical order (for consistency).
// See https://www.npmjs.com/package/prop-types#usage.
WebTerminal.propTypes = {
  /**
   * An array of actions to be displayed in the web terminal header bar
   */
  actions: PropTypes.arrayOf(PropTypes.shape({
    renderIcon: PropTypes.func.isRequired,
    onClick: PropTypes.func.isRequired,
    iconDescription: PropTypes.string.isRequired
  })),
  /**
   * Provide your own terminal component as children to show up in the web terminal
   */
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,
  /**
   * Custom classname for additional styling of the web terminal
   */
  className: PropTypes.string,
  /**
   * Icon description for the close button
   */
  closeIconDescription: PropTypes.string.isRequired,
  /**
   * Array of objects for each documentation link. Each documentation link uses the prop types of OverflowMenuItems. See more: https://react.carbondesignsystem.com/?path=/docs/components-overflowmenu--default
   */
  documentationLinks: PropTypes.arrayOf(PropTypes.shape(_objectSpread({}, OverflowMenuItem.propTypes))),
  /**
   * Description for the documentation link overflow menu tooltip
   */
  documentationLinksIconDescription: PropTypes.string,
  /**
   * Optionally pass if the web terminal should be open by default
   */
  isInitiallyOpen: PropTypes.bool
};