import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { removeCellSelections } from './removeCellSelections';
import uuidv4 from '../../../global/js/utils/uuidv4';
export var selectAllCells = function selectAllCells(_ref) {
  var activeCellCoordinates = _ref.activeCellCoordinates,
    columns = _ref.columns,
    setCurrentMatcher = _ref.setCurrentMatcher,
    setSelectionAreas = _ref.setSelectionAreas,
    ref = _ref.ref,
    rows = _ref.rows,
    updateActiveCellCoordinates = _ref.updateActiveCellCoordinates;
  removeCellSelections({
    spreadsheetRef: ref
  });
  var selectionPoint1 = {
    row: 0,
    column: 0
  };
  var selectionPoint2 = {
    row: rows.length - 1,
    column: columns.length - 1
  };
  var tempMatcher = uuidv4();
  var newSelectionArea = {
    point1: selectionPoint1,
    point2: selectionPoint2,
    areaCreated: false,
    matcher: tempMatcher
  };
  var coordinatesClone = _objectSpread({}, activeCellCoordinates);
  updateActiveCellCoordinates({
    coords: coordinatesClone,
    updatedValue: {
      column: 0,
      row: 0
    }
  });
  setCurrentMatcher(tempMatcher);
  return setSelectionAreas([newSelectionArea]);
};