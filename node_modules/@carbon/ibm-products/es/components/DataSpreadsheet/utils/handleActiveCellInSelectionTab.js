/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { getSelectionAreaPoints } from './getSelectionAreaPoints';
export var handleActiveCellInSelectionTab = function handleActiveCellInSelectionTab(_ref) {
  var activeCellInsideSelectionArea = _ref.activeCellInsideSelectionArea,
    activeCellCoordinates = _ref.activeCellCoordinates,
    activeCellRef = _ref.activeCellRef,
    selectionAreas = _ref.selectionAreas,
    updateActiveCellCoordinates = _ref.updateActiveCellCoordinates;
  if (!activeCellInsideSelectionArea) {
    return;
  }
  var activeCellSelectionId = activeCellRef.current.getAttribute('data-selection-id');
  var activeCellIndexInSelectionAreas = selectionAreas.findIndex(function (item) {
    return item.matcher === activeCellSelectionId;
  });
  var selectionAreaToNavigate = selectionAreas[activeCellIndexInSelectionAreas];
  var _getSelectionAreaPoin = getSelectionAreaPoints(selectionAreaToNavigate),
    lowestColumnIndex = _getSelectionAreaPoin.lowestColumnIndex,
    lowestRowIndex = _getSelectionAreaPoin.lowestRowIndex,
    greatestColumnIndex = _getSelectionAreaPoin.greatestColumnIndex,
    greatestRowIndex = _getSelectionAreaPoin.greatestRowIndex;
  // Move active cell to next column in selection area
  if ((activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column) < greatestColumnIndex) {
    updateActiveCellCoordinates({
      updatedValue: {
        column: (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column) + 1
      },
      optOutOfSelectionAreaUpdate: true
    });
  }
  // Move active cell to next row of selection area if it exists
  // If not, find the next selection area and update active cell to
  // be the first cell in that selection
  if ((activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column) === greatestColumnIndex) {
    if ((activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row) < greatestRowIndex) {
      updateActiveCellCoordinates({
        updatedValue: {
          column: lowestColumnIndex,
          row: (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row) + 1
        },
        optOutOfSelectionAreaUpdate: true
      });
    }
    // Move to next selection area if there is on, or back to
    // the beginning of the current selection
    if ((activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row) === greatestRowIndex) {
      if (selectionAreas.length > 1) {
        if (selectionAreas[activeCellIndexInSelectionAreas + 1]) {
          // Update activeCellRef data-selection-id attribute to the matcher of the next selection area
          activeCellRef.current.setAttribute('data-selection-id', selectionAreas[activeCellIndexInSelectionAreas + 1].matcher);
          var nextSelectionArea = selectionAreas[activeCellIndexInSelectionAreas + 1];
          var _getSelectionAreaPoin2 = getSelectionAreaPoints(nextSelectionArea),
            _lowestColumnIndex = _getSelectionAreaPoin2.lowestColumnIndex,
            _lowestRowIndex = _getSelectionAreaPoin2.lowestRowIndex;
          updateActiveCellCoordinates({
            updatedValue: {
              column: _lowestColumnIndex,
              row: _lowestRowIndex
            },
            optOutOfSelectionAreaUpdate: true
          });
          return;
        } else {
          // There are multiple selection areas and the active cell is in the last one
          // So we need to move the active cell to the first cell in the first selection area
          activeCellRef.current.setAttribute('data-selection-id', selectionAreas[0].matcher);
          var firstSelectionArea = selectionAreas[0];
          var _getSelectionAreaPoin3 = getSelectionAreaPoints(firstSelectionArea),
            _lowestColumnIndex2 = _getSelectionAreaPoin3.lowestColumnIndex,
            _lowestRowIndex2 = _getSelectionAreaPoin3.lowestRowIndex;
          updateActiveCellCoordinates({
            updatedValue: {
              column: _lowestColumnIndex2,
              row: _lowestRowIndex2
            },
            optOutOfSelectionAreaUpdate: true
          });
        }
      }
      // Only one selection area, go back to first cell in the selection
      if (selectionAreas.length === 1) {
        return updateActiveCellCoordinates({
          updatedValue: {
            column: lowestColumnIndex,
            row: lowestRowIndex
          },
          optOutOfSelectionAreaUpdate: true
        });
      }
    }
  }
};