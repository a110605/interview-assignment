import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

// cspell:disable
var pets = ['dog', 'cat', 'bird', 'lizard', 'frog', 'hamster', 'fish', 'rabbit', 'snake'];
var petNames = ['Bruno', 'Willow', 'Kona', 'Heidi', 'Rusty', 'Bonnie', 'Cash', 'Gucci', 'Brody', 'Emma', 'Loki', 'Angel', 'Astro', 'Sherman', 'Layla', 'Peanut', 'Grace', 'Mickey', 'Sasha', 'Finn', 'Tucker', 'Bear', 'Mocha', 'Roscoe'];
// cspell:enable

var range = function range(len) {
  var arr = [];
  for (var i = 0; i < len; i++) {
    arr.push(i);
  }
  return arr;
};
var newPet = function newPet(extraColumns) {
  var extraDataProps = extraColumns && {
    ownerName: petNames[Math.floor(Math.random() * petNames.length)],
    weight: Math.floor(Math.random() * 40)
  };
  var defaultPet = {
    petType: pets[Math.floor(Math.random() * pets.length)],
    firstName: petNames[Math.floor(Math.random() * petNames.length)],
    age: Math.floor(Math.random() * 30),
    visits: Math.floor(Math.random() * 40),
    health: Math.floor(Math.random() * 100)
  };
  if (extraColumns) {
    return _objectSpread(_objectSpread({}, defaultPet), extraDataProps);
  }
  return defaultPet;
};
export var generateData = function generateData(_ref) {
  var rows = _ref.rows,
    extraColumns = _ref.extraColumns;
  var makeDataLevel = function makeDataLevel() {
    var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var lens = [rows];
    var len = lens[depth];
    return range(len).map(function () {
      return _objectSpread({}, newPet(extraColumns));
    });
  };
  return makeDataLevel();
};