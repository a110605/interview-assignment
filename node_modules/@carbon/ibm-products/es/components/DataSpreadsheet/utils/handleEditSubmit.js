import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { removeCellSelections } from './removeCellSelections';
import uuidv4 from '../../../global/js/utils/uuidv4';

// Update the data
export var handleEditSubmit = function handleEditSubmit(_ref) {
  var activeCellCoordinates = _ref.activeCellCoordinates,
    cellEditorRulerRef = _ref.cellEditorRulerRef,
    columns = _ref.columns,
    previousState = _ref.previousState,
    removeCellEditor = _ref.removeCellEditor,
    rows = _ref.rows,
    setActiveCellCoordinates = _ref.setActiveCellCoordinates,
    setCurrentMatcher = _ref.setCurrentMatcher,
    setSelectionAreas = _ref.setSelectionAreas,
    spreadsheetRef = _ref.spreadsheetRef,
    updateData = _ref.updateData;
  return function (event) {
    var key = event.key;
    var updateSelectionAreaOnCellEditSubmit = function updateSelectionAreaOnCellEditSubmit(_ref2) {
      var type = _ref2.type;
      var submitEditChanges = function submitEditChanges() {
        var prevCoords = previousState === null || previousState === void 0 ? void 0 : previousState.activeCellCoordinates;
        var cellProps = rows[prevCoords === null || prevCoords === void 0 ? void 0 : prevCoords.row].cells[prevCoords === null || prevCoords === void 0 ? void 0 : prevCoords.column];
        removeCellEditor();
        updateData(prevCoords === null || prevCoords === void 0 ? void 0 : prevCoords.row, cellProps.column.id);
      };
      removeCellSelections({
        spreadsheetRef: spreadsheetRef
      });
      submitEditChanges();
      var tempMatcher = uuidv4();
      var newSelectionArea = {
        row: type === 'Enter' ? activeCellCoordinates.row === rows.length - 1 ? activeCellCoordinates.row : activeCellCoordinates.row + 1 : activeCellCoordinates.row,
        column: type === 'Tab' ? activeCellCoordinates.column === columns.length - 1 ? activeCellCoordinates.column : activeCellCoordinates.column + 1 : activeCellCoordinates.column
      };
      setSelectionAreas([{
        point1: newSelectionArea,
        point2: newSelectionArea,
        matcher: tempMatcher,
        areaCreated: false
      }]);
      setCurrentMatcher(tempMatcher);
      cellEditorRulerRef.current.textContent = '';
    };
    if (key === 'Enter') {
      updateSelectionAreaOnCellEditSubmit({
        type: 'Enter'
      });
      setActiveCellCoordinates(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          row: prev.row === rows.length - 1 ? prev.row : prev.row + 1 // do not move to next cell below if we're already in the last row
        });
      });
    }

    if (key === 'Tab') {
      event.preventDefault();
      updateSelectionAreaOnCellEditSubmit({
        type: 'Tab'
      });
      setActiveCellCoordinates(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, {
          column: prev.column === columns.length - 1 ? prev.column : prev.column + 1 // do not move to next cell below if we're already in the last column
        });
      });
    }

    return;
  };
};