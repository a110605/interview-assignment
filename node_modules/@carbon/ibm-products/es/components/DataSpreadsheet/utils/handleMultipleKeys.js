import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { deepCloneObject } from '../../../global/js/utils/deepCloneObject';
import uuidv4 from '../../../global/js/utils/uuidv4';
import { selectAllCells } from './selectAllCells';
export var includesResourceKey = function includesResourceKey(arr, usingMac) {
  if (usingMac) {
    return includesMeta(arr);
  }
  if (!usingMac) {
    return includesControl(arr);
  }
};
export var includesShift = function includesShift(arr) {
  if (arr.includes('ShiftLeft') || arr.includes('ShiftRight')) {
    return true;
  }
  return false;
};
var includesMeta = function includesMeta(arr) {
  if (arr.includes('MetaLeft') || arr.includes('MetaRight')) {
    return true;
  }
  return false;
};
var includesControl = function includesControl(arr) {
  if (arr.includes('ControlLeft') || arr.includes('ControlRight')) {
    return true;
  }
  return false;
};
export var handleMultipleKeys = function handleMultipleKeys(_ref) {
  var _selectionAreasClone$, _selectionAreasClone$2, _selectionAreasClone$3;
  var activeCellCoordinates = _ref.activeCellCoordinates,
    event = _ref.event,
    keysPressedList = _ref.keysPressedList,
    selectionAreas = _ref.selectionAreas,
    currentMatcher = _ref.currentMatcher,
    rows = _ref.rows,
    setSelectionAreas = _ref.setSelectionAreas,
    columns = _ref.columns,
    updateActiveCellCoordinates = _ref.updateActiveCellCoordinates,
    spreadsheetRef = _ref.spreadsheetRef,
    removeCellSelections = _ref.removeCellSelections,
    blockClass = _ref.blockClass,
    setCurrentMatcher = _ref.setCurrentMatcher,
    usingMac = _ref.usingMac;
  var selectionAreasClone = deepCloneObject(selectionAreas);
  var indexOfCurrentArea = selectionAreasClone.findIndex(function (item) {
    return item.matcher === currentMatcher;
  });
  var pointToUpdate = (_selectionAreasClone$ = selectionAreasClone[indexOfCurrentArea]) !== null && _selectionAreasClone$ !== void 0 && _selectionAreasClone$.point2 ? (_selectionAreasClone$2 = selectionAreasClone[indexOfCurrentArea]) === null || _selectionAreasClone$2 === void 0 ? void 0 : _selectionAreasClone$2.point2 : (_selectionAreasClone$3 = selectionAreasClone[indexOfCurrentArea]) === null || _selectionAreasClone$3 === void 0 ? void 0 : _selectionAreasClone$3.point1;
  // Down + Shift
  if (includesShift(keysPressedList) && keysPressedList.includes('ArrowDown') && keysPressedList.length === 2) {
    if (rows.length - 1 === (pointToUpdate === null || pointToUpdate === void 0 ? void 0 : pointToUpdate.row) || (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row) === 'header' || (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column) === 'header') {
      return;
    }
    var newPoint = {
      row: pointToUpdate.row + 1,
      column: pointToUpdate.column
    };
    selectionAreasClone[indexOfCurrentArea].point2 = newPoint;
    selectionAreasClone[indexOfCurrentArea].areaCreated = false;
    setSelectionAreas(selectionAreasClone);
  }
  // Right + Shift
  if (includesShift(keysPressedList) && keysPressedList.includes('ArrowRight') && keysPressedList.length === 2) {
    if (columns.length - 1 === (pointToUpdate === null || pointToUpdate === void 0 ? void 0 : pointToUpdate.column) || (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row) === 'header' || (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column) === 'header') {
      return;
    }
    var _newPoint = {
      row: pointToUpdate.row,
      column: pointToUpdate.column + 1
    };
    selectionAreasClone[indexOfCurrentArea].point2 = _newPoint;
    selectionAreasClone[indexOfCurrentArea].areaCreated = false;
    setSelectionAreas(selectionAreasClone);
  }
  // Up + Shift
  if (includesShift(keysPressedList) && keysPressedList.includes('ArrowUp') && keysPressedList.length === 2) {
    if ((pointToUpdate === null || pointToUpdate === void 0 ? void 0 : pointToUpdate.row) === 0 || (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row) === 'header' || (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column) === 'header') {
      return;
    }
    var _newPoint2 = {
      row: pointToUpdate.row - 1,
      column: pointToUpdate.column
    };
    selectionAreasClone[indexOfCurrentArea].point2 = _newPoint2;
    selectionAreasClone[indexOfCurrentArea].areaCreated = false;
    setSelectionAreas(selectionAreasClone);
  }
  // Left + Shift
  if (includesShift(keysPressedList) && keysPressedList.includes('ArrowLeft') && keysPressedList.length === 2) {
    if ((pointToUpdate === null || pointToUpdate === void 0 ? void 0 : pointToUpdate.column) === 0 || (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row) === 'header' || (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column) === 'header') {
      return;
    }
    var _newPoint3 = {
      row: pointToUpdate.row,
      column: pointToUpdate.column - 1
    };
    selectionAreasClone[indexOfCurrentArea].point2 = _newPoint3;
    selectionAreasClone[indexOfCurrentArea].areaCreated = false;
    setSelectionAreas(selectionAreasClone);
  }
  // CMD + a (select all)
  if (includesResourceKey(keysPressedList, usingMac) && keysPressedList.includes('KeyA')) {
    event.preventDefault();
    var selectionPoint1 = {
      row: 0,
      column: 0
    };
    var selectionPoint2 = {
      row: rows.length - 1,
      column: columns.length - 1
    };
    // If indexOfCurrentArea is -1, it means the active cell is in a cell header position
    if (indexOfCurrentArea === -1) {
      selectAllCells({
        ref: spreadsheetRef,
        setCurrentMatcher: setCurrentMatcher,
        setSelectionAreas: setSelectionAreas,
        rows: rows,
        columns: columns,
        activeCellCoordinates: activeCellCoordinates,
        updateActiveCellCoordinates: updateActiveCellCoordinates
      });
    }
    selectionAreasClone[indexOfCurrentArea].point1 = selectionPoint1;
    selectionAreasClone[indexOfCurrentArea].point2 = selectionPoint2;
    selectionAreasClone[indexOfCurrentArea].areaCreated = false;
    setSelectionAreas(selectionAreasClone);
  }
  // CONTROL + SPACE (Select current column)
  if (includesControl(keysPressedList) && keysPressedList.includes('Space')) {
    var _selectionPoint = {
      row: 0,
      column: (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column) === 'header' ? 0 : activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column
    };
    var _selectionPoint2 = {
      row: rows.length - 1,
      column: (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column) === 'header' ? 0 : activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column
    };
    // If indexOfCurrentArea is -1, it means the active cell is in a cell header position
    if (indexOfCurrentArea === -1) {
      var tempMatcher = uuidv4();
      var newSelectionArea = {
        point1: _selectionPoint,
        point2: _selectionPoint2,
        areaCreated: false,
        matcher: tempMatcher
      };
      var coordinatesClone = _objectSpread({}, activeCellCoordinates);
      updateActiveCellCoordinates({
        coords: coordinatesClone,
        updatedValue: {
          column: (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column) === 'header' ? 0 : activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column,
          row: (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row) === 'header' ? 0 : activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row
        }
      });
      setCurrentMatcher(tempMatcher);
      return setSelectionAreas([newSelectionArea]);
    }
    selectionAreasClone[indexOfCurrentArea].point1 = _selectionPoint;
    selectionAreasClone[indexOfCurrentArea].point2 = _selectionPoint2;
    selectionAreasClone[indexOfCurrentArea].areaCreated = false;
    setSelectionAreas(selectionAreasClone);
  }
  // Shift + SPACE (Select current row)
  if (includesShift(keysPressedList) && keysPressedList.includes('Space')) {
    var _selectionPoint3 = {
      row: (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row) === 'header' ? 0 : activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row,
      column: 0
    };
    var _selectionPoint4 = {
      row: (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row) === 'header' ? 0 : activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row,
      column: columns.length - 1
    };
    // If indexOfCurrentArea is -1, it means the active cell is in a cell header position
    if (indexOfCurrentArea === -1) {
      var _tempMatcher = uuidv4();
      var _newSelectionArea = {
        point1: _selectionPoint3,
        point2: _selectionPoint4,
        areaCreated: false,
        matcher: _tempMatcher
      };
      var _coordinatesClone = _objectSpread({}, activeCellCoordinates);
      updateActiveCellCoordinates({
        coords: _coordinatesClone,
        updatedValue: {
          column: (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column) === 'header' ? 0 : activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column,
          row: (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row) === 'header' ? 0 : activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row
        }
      });
      setCurrentMatcher(_tempMatcher);
      return setSelectionAreas([_newSelectionArea]);
    }
    selectionAreasClone[indexOfCurrentArea].point1 = _selectionPoint3;
    selectionAreasClone[indexOfCurrentArea].point2 = _selectionPoint4;
    selectionAreasClone[indexOfCurrentArea].areaCreated = false;
    setSelectionAreas(selectionAreasClone);
  }

  // CMD + HOME (Selects first cell in first row)
  if (includesResourceKey(keysPressedList, usingMac) && keysPressedList.includes('Home')) {
    var scrollElement = spreadsheetRef.current.querySelector(".".concat(blockClass, "__list--container"));
    scrollElement.scrollTop = 0;
    var _coordinatesClone2 = _objectSpread({}, activeCellCoordinates);
    removeCellSelections({
      spreadsheetRef: spreadsheetRef
    });
    updateActiveCellCoordinates({
      coords: _coordinatesClone2,
      updatedValue: {
        column: 0,
        row: 0
      }
    });
  }

  // CMD + END (Selects last cell in last row)
  if (includesResourceKey(keysPressedList, usingMac) && keysPressedList.includes('End')) {
    var _scrollElement = spreadsheetRef.current.querySelector(".".concat(blockClass, "__list--container"));
    _scrollElement.scrollTop = _scrollElement.scrollHeight;
    var _coordinatesClone3 = _objectSpread({}, activeCellCoordinates);
    removeCellSelections({
      spreadsheetRef: spreadsheetRef
    });
    var lastCellExists = !!rows[(rows === null || rows === void 0 ? void 0 : rows.length) - 1].cells[(columns === null || columns === void 0 ? void 0 : columns.length) - 1];
    var updateToLastCell = function updateToLastCell() {
      updateActiveCellCoordinates({
        coords: _coordinatesClone3,
        updatedValue: {
          column: columns.length - 1,
          row: rows.length - 1
        }
      });
    };
    // With the spreadsheet supporting virtualized data, it's possible that the last cell
    // has never been rendered yet, if that's the case we scroll to the bottom of the spreadsheet
    // and add a timeout to wait for the last row to render to the DOM before updating the active cell coordinates.
    // If we're able to verify that the last row has been rendered, no timeout is used.
    if (lastCellExists) {
      updateToLastCell();
    } else {
      setTimeout(function () {
        updateToLastCell();
      }, 1000);
    }
  }
};