import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "className", "description", "fieldsetLegendText", "hasFieldset", "subtitle", "title"];
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React, { forwardRef, useContext } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { Column, FormGroup, Grid } from '@carbon/react';
import { FormContext, FormNumberContext } from './EditTearsheet';
import { pkg } from '../../settings';
import pconsole from '../../global/js/utils/pconsole';
var componentName = 'EditTearsheetForm';
var blockClass = "".concat(pkg.prefix, "--tearsheet-edit__form");

// Default values for props
var defaults = {
  hasFieldset: true
};
export var EditTearsheetForm = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _cx;
  var children = _ref.children,
    className = _ref.className,
    description = _ref.description,
    fieldsetLegendText = _ref.fieldsetLegendText,
    _ref$hasFieldset = _ref.hasFieldset,
    hasFieldset = _ref$hasFieldset === void 0 ? defaults.hasFieldset : _ref$hasFieldset,
    subtitle = _ref.subtitle,
    title = _ref.title,
    rest = _objectWithoutProperties(_ref, _excluded);
  var formContext = useContext(FormContext);
  var formNumber = useContext(FormNumberContext);
  return formContext ? /*#__PURE__*/React.createElement("div", _extends({}, rest, {
    className: cx(blockClass, className, (_cx = {}, _defineProperty(_cx, "".concat(blockClass, "__form--hidden-form"), formNumber !== (formContext === null || formContext === void 0 ? void 0 : formContext.currentForm)), _defineProperty(_cx, "".concat(blockClass, "__form--visible-form"), formNumber === (formContext === null || formContext === void 0 ? void 0 : formContext.currentForm)), _cx)),
    ref: ref
  }), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Column, {
    xlg: 12,
    lg: 12,
    md: 8,
    sm: 4
  }, /*#__PURE__*/React.createElement("h4", {
    className: "".concat(blockClass, "--title")
  }, title), subtitle && /*#__PURE__*/React.createElement("h6", {
    className: "".concat(blockClass, "--subtitle")
  }, subtitle), description && /*#__PURE__*/React.createElement("p", {
    className: "".concat(blockClass, "--description")
  }, description)), /*#__PURE__*/React.createElement(Column, {
    span: 100
  }, hasFieldset ? /*#__PURE__*/React.createElement(FormGroup, {
    legendText: fieldsetLegendText,
    className: "".concat(blockClass, "--fieldset")
  }, /*#__PURE__*/React.createElement(Grid, null, children)) : children))) : pconsole.warn("You have tried using a ".concat(componentName, " component outside of a EditTearsheet. This is not allowed. ").concat(componentName, "s should always be children of the EditTearsheet"));
});

// Return a placeholder if not released and not enabled by feature flag
EditTearsheetForm = pkg.checkComponentEnabled(EditTearsheetForm, componentName);
EditTearsheetForm.propTypes = {
  /**
   * Content that shows in the tearsheet form
   */
  children: PropTypes.node,
  /**
   * Sets an optional className to be added to the tearsheet form
   */
  className: PropTypes.string,
  /**
   * Sets an optional description on the form component
   */
  description: PropTypes.string,
  /**
   * This is the required legend text that appears above a fieldset html element for accessibility purposes.
   * You can set the `hasFieldset` prop to false if you have multiple fieldset elements or want to control the children of your Full Page's form content.
   * Otherwise, use CSS to hide/remove this label text.
   */
  fieldsetLegendText: PropTypes.string.isRequired.if(function (_ref2) {
    var hasFieldset = _ref2.hasFieldset;
    return !!hasFieldset;
  }),
  /**
   * This optional prop will render your form content inside of a fieldset html element
   * and is defaulted to true.
   * You can set this prop to `false` if you have multiple fieldset elements or want to control the children of your Full Page's form content.
   */
  hasFieldset: PropTypes.bool,
  /**
   * Sets an optional subtitle on the form component
   */
  subtitle: PropTypes.string,
  /**
   * Sets the title text for a tearsheet form
   */
  title: PropTypes.node.isRequired
};