import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["cancelButtonText", "children", "className", "description", "influencerWidth", "label", "onClose", "open", "submitButtonText", "title", "verticalPosition", "onHandleModalClick"];
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React, { forwardRef, useState, useRef, createContext } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { Form, SideNav, SideNavItems, SideNavMenuItem } from '@carbon/react';
import { pkg } from '../../settings';
import { getDevtoolsProps } from '../../global/js/utils/devtools';
import { TearsheetShell } from '../Tearsheet/TearsheetShell';
var componentName = 'EditTearsheet';
var blockClass = "".concat(pkg.prefix, "--tearsheet-edit");

// This is a general context for the forms container
// containing information about the state of the container
// and providing some callback methods for forms to use
export var FormContext = /*#__PURE__*/createContext(null);

// This is a context supplied separately to each form in the container
// to let it know what number it is in the sequence of forms
export var FormNumberContext = /*#__PURE__*/createContext(0);

// Default values for props
var defaults = {
  verticalPosition: 'normal',
  influencerWidth: 'narrow'
};

/**
 * Use Tearsheet with medium to complex edits. See usage guidance for further information.
 */
export var EditTearsheet = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var cancelButtonText = _ref.cancelButtonText,
    children = _ref.children,
    className = _ref.className,
    description = _ref.description,
    _ref$influencerWidth = _ref.influencerWidth,
    influencerWidth = _ref$influencerWidth === void 0 ? defaults.influencerWidth : _ref$influencerWidth,
    label = _ref.label,
    onClose = _ref.onClose,
    open = _ref.open,
    submitButtonText = _ref.submitButtonText,
    title = _ref.title,
    _ref$verticalPosition = _ref.verticalPosition,
    verticalPosition = _ref$verticalPosition === void 0 ? defaults.verticalPosition : _ref$verticalPosition,
    onHandleModalClick = _ref.onHandleModalClick,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(0),
    _useState2 = _slicedToArray(_useState, 2),
    currentForm = _useState2[0],
    setCurrentForm = _useState2[1];
  var contentRef = useRef();
  var handleCurrentForm = function handleCurrentForm(form) {
    setCurrentForm(form);
  };
  var sideNavItems = [{
    label: 'Topic Name'
  }, {
    label: 'Location'
  }, {
    label: 'Partitions'
  }, {
    label: 'Message retention'
  }];
  var influencer = /*#__PURE__*/React.createElement("div", {
    className: "tearsheet-stories__dummy-influencer-block"
  }, /*#__PURE__*/React.createElement(SideNav, {
    "aria-label": "Side navigation",
    className: "".concat(blockClass, "__side-nav"),
    expanded: true,
    isFixedNav: false
  }, /*#__PURE__*/React.createElement(SideNavItems, null, sideNavItems.map(function (item, index) {
    return /*#__PURE__*/React.createElement(SideNavMenuItem, {
      key: index,
      onClick: function onClick() {
        return handleCurrentForm(index);
      },
      isActive: currentForm === index
    }, item.label);
  }))));
  return /*#__PURE__*/React.createElement(TearsheetShell, _extends({}, rest, getDevtoolsProps(componentName), {
    actions: [{
      label: submitButtonText,
      onClick: onHandleModalClick,
      kind: 'primary'
    }, {
      label: cancelButtonText,
      onClick: onHandleModalClick,
      kind: 'secondary'
    }],
    className: cx(blockClass, className),
    description: description,
    hasCloseIcon: false,
    influencer: influencer,
    influencerPosition: "left",
    influencerWidth: influencerWidth,
    label: label,
    onClose: onClose,
    open: open,
    size: "wide",
    title: title,
    verticalPosition: verticalPosition,
    ref: ref
  }), /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__content"),
    ref: contentRef,
    role: "main"
  }, /*#__PURE__*/React.createElement(Form, null, /*#__PURE__*/React.createElement(FormContext.Provider, {
    value: {
      currentForm: currentForm
    }
  }, React.Children.map(children, function (child, index) {
    return /*#__PURE__*/React.createElement(FormNumberContext.Provider, {
      value: index
    }, child);
  })))));
});

// Return a placeholder if not released and not enabled by feature flag
EditTearsheet = pkg.checkComponentEnabled(EditTearsheet, componentName);

// The display name of the component, used by React. Note that displayName
// is used in preference to relying on function.name.
EditTearsheet.displayName = componentName;

// Note that the descriptions here should be kept in sync with those for the
// corresponding props for TearsheetNarrow and TearsheetShell components.
EditTearsheet.propTypes = {
  /**
   * The cancel button text
   */
  cancelButtonText: PropTypes.string,
  /**
   * The main content of the tearsheet
   */
  children: PropTypes.node,
  /**
   * An optional class or classes to be added to the outermost element.
   */
  className: PropTypes.string,
  /**
   * A description of the flow, displayed in the header area of the tearsheet.
   */
  description: PropTypes.node,
  /**
   * The content for the influencer section of the tearsheet, displayed
   * alongside the main content. This is typically a menu, or filter, or
   * progress indicator, or similar.
   */
  influencer: PropTypes.element,
  /**
   * Used to set the size of the influencer
   */
  influencerWidth: PropTypes.oneOf(['narrow', 'wide']),
  /**
   * A label for the tearsheet, displayed in the header area of the tearsheet
   * to maintain context for the tearsheet (e.g. as the title changes from page
   * to page of a multi-page task).
   */
  label: PropTypes.node,
  /**
   * An optional handler that is called when the user closes the tearsheet (by
   * clicking the close button, if enabled, or clicking outside, if enabled).
   * Returning `false` here prevents the modal from closing.
   */
  onClose: PropTypes.func,
  /**
   * Specifies whether the tearsheet is currently open.
   */
  onHandleModalClick: PropTypes.func,
  /**
   * Specifies whether the tearsheet is currently open.
   */
  open: PropTypes.bool,
  /**
   * The submit button text
   */
  submitButtonText: PropTypes.string,
  /**
   * The main title of the tearsheet, displayed in the header area.
   */
  title: PropTypes.node,
  /**
   * The position of the top of tearsheet in the viewport. The 'normal'
   * position (the default) is a short distance down from the top of the
   * viewport, leaving room at the top for a global header bar to show through
   * from below. The 'lower' position provides a little extra room at the top
   * to allow an action bar navigation or breadcrumbs to also show through.
   */
  verticalPosition: PropTypes.oneOf(['normal', 'lower'])
};