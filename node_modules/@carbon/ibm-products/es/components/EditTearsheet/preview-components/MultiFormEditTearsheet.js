import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/* eslint-disable react/prop-types */
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React, { useState } from 'react';
import { Button, Column, InlineNotification, RadioButtonGroup, RadioButton, TextInput, Toggle, NumberInput } from '@carbon/react';
import cx from 'classnames';
import { pkg } from '../../../settings';
import { EditTearsheet } from '../EditTearsheet';
import { EditTearsheetForm } from '../EditTearsheetForm';
var blockClass = "".concat(pkg.prefix, "--tearsheet-edit-multi-form");
export var MultiFormEditTearsheet = function MultiFormEditTearsheet(_ref) {
  var cancelButtonText = _ref.cancelButtonText,
    className = _ref.className,
    description = _ref.description,
    influencerWidth = _ref.influencerWidth,
    label = _ref.label,
    submitButtonText = _ref.submitButtonText,
    title = _ref.title;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    hasSubmitError = _useState4[0],
    setHasSubmitError = _useState4[1];
  var _useState5 = useState('Topic name here'),
    _useState6 = _slicedToArray(_useState5, 2),
    formOneTextInputValue = _useState6[0],
    setFormOneTextInputValue = _useState6[1];
  var _useState7 = useState('Topic description here'),
    _useState8 = _slicedToArray(_useState7, 2),
    topicDescriptionValue = _useState8[0],
    setTopicDescriptionValue = _useState8[1];
  var _useState9 = useState('Topic value here'),
    _useState10 = _slicedToArray(_useState9, 2),
    topicVersionValue = _useState10[0],
    setTopicVersionValue = _useState10[1];
  var _useState11 = useState('Location here'),
    _useState12 = _slicedToArray(_useState11, 2),
    topicLocationValue = _useState12[0],
    setTopicLocationValue = _useState12[1];
  var _useState13 = useState(1),
    _useState14 = _slicedToArray(_useState13, 2),
    formTwoTextInputValue = _useState14[0],
    setFormTwoTextInputValue = _useState14[1];
  var _useState15 = useState('one-day'),
    _useState16 = _slicedToArray(_useState15, 2),
    formThreeTextInputValue = _useState16[0],
    setFormThreeTextInputValue = _useState16[1];
  var _useState17 = useState(false),
    _useState18 = _slicedToArray(_useState17, 2),
    isInvalid = _useState18[0],
    setIsInvalid = _useState18[1];
  var clearCreateData = function clearCreateData() {
    setFormOneTextInputValue(formOneTextInputValue);
    setTopicDescriptionValue(topicDescriptionValue);
    setTopicVersionValue(topicVersionValue);
    setTopicLocationValue(topicLocationValue);
    setFormTwoTextInputValue(1);
    setFormThreeTextInputValue('one-day');
    setHasSubmitError(false);
    setIsInvalid(false);
    setOpen(false);
  };
  var handleModalClick = function handleModalClick() {
    setOpen(!open);
  };
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("style", null, ".".concat(blockClass, " { opacity: 0 }"), ";"), /*#__PURE__*/React.createElement(Button, {
    onClick: handleModalClick
  }, open ? 'Close EditTearsheet' : 'Open EditTearsheet'), /*#__PURE__*/React.createElement(EditTearsheet, {
    influencerWidth: influencerWidth,
    label: label,
    className: cx(blockClass, className),
    submitButtonText: submitButtonText,
    cancelButtonText: cancelButtonText,
    description: description,
    title: title,
    open: open,
    onHandleModalClick: handleModalClick,
    onClose: clearCreateData
  }, /*#__PURE__*/React.createElement(EditTearsheetForm, {
    title: "Topic name",
    fieldsetLegendText: "Topic information",
    subtitle: "This is the unique name used to recognize your topic",
    description: "It will also be used by your producers and consumers as part of the connection information, so make it something easy to recognize."
  }, /*#__PURE__*/React.createElement(Column, {
    xlg: 8,
    lg: 8,
    md: 8,
    sm: 8
  }, /*#__PURE__*/React.createElement(TextInput, {
    labelText: "Topic name",
    placeholder: "Enter topic name",
    id: "tearsheet-multi-form-story-text-input-multi-form-1",
    value: formOneTextInputValue,
    onChange: function onChange(event) {
      if (event.target.value.length) {
        setIsInvalid(false);
      }
      setFormOneTextInputValue(event.target.value);
    },
    invalid: isInvalid,
    invalidText: "This is a required field",
    onBlur: function onBlur() {
      if (!formOneTextInputValue.length) {
        setIsInvalid(true);
      }
    }
  }), /*#__PURE__*/React.createElement(TextInput, {
    labelText: "Topic description (optional)",
    id: "tearsheet-multi-form-story-text-input-multi-form-1-input-2",
    value: topicDescriptionValue,
    placeholder: "Enter topic description",
    onChange: function onChange(event) {
      return setTopicDescriptionValue(event.target.value);
    }
  }), /*#__PURE__*/React.createElement(TextInput, {
    labelText: "Topic version (optional)",
    id: "tearsheet-multi-form-story-text-input-multi-form-1-input-3",
    value: topicVersionValue,
    placeholder: "Enter topic version",
    onChange: function onChange(event) {
      return setTopicVersionValue(event.target.value);
    }
  }), hasSubmitError && /*#__PURE__*/React.createElement(InlineNotification, {
    kind: "error",
    title: "Error",
    subtitle: "Resolve errors to continue",
    onClose: function onClose() {
      return setHasSubmitError(!hasSubmitError);
    }
  }), /*#__PURE__*/React.createElement(Toggle, {
    className: "".concat(blockClass, "__error--toggle"),
    id: "simulated-error-toggle",
    size: "sm",
    labelText: "Simulate error",
    onToggle: function onToggle() {
      return setHasSubmitError(!hasSubmitError);
    },
    toggled: hasSubmitError
  }))), /*#__PURE__*/React.createElement(EditTearsheetForm, {
    title: "Location",
    subtitle: "Custom form subtitle",
    fieldsetLegendText: "",
    description: "Custom form description (see storybook implementation for new custom form capability)"
  }, /*#__PURE__*/React.createElement(Column, {
    xlg: 8,
    lg: 8,
    md: 8,
    sm: 8
  }, /*#__PURE__*/React.createElement(TextInput, {
    value: topicLocationValue,
    onChange: function onChange(event) {
      return setTopicLocationValue(event.target.value);
    },
    id: "custom-form-input",
    labelText: "Location",
    placeholder: "Enter location"
  }))), /*#__PURE__*/React.createElement(EditTearsheetForm, {
    title: "Partitions",
    subtitle: "One or more partitions make up a topic. A partition is an ordered list of messages.",
    description: "Partitions are distributed across the brokers in order to increase the scalability of your topic. You can also use them to distribute messages across the members of a consumer group.",
    fieldsetLegendText: "Partition information"
  }, /*#__PURE__*/React.createElement(Column, {
    xlg: 3,
    lg: 3,
    md: 8,
    sm: 4
  }, /*#__PURE__*/React.createElement(NumberInput, {
    id: "carbon-number",
    min: 1,
    max: 100,
    value: formTwoTextInputValue,
    label: "Partitions",
    helperText: "1 partition is sufficient for getting started but, production systems often have more.",
    invalidText: "Max partitions is 100, min is 1",
    onChange: function onChange(event) {
      return setFormTwoTextInputValue(event.imaginaryTarget.value);
    }
  }))), /*#__PURE__*/React.createElement(EditTearsheetForm, {
    title: "Message retention",
    subtitle: "This is how long messages are retained before they are deleted.",
    description: "If your messages are not read by a consumer within this time, they will be missed.",
    fieldsetLegendText: "Message retention scheduling"
  }, /*#__PURE__*/React.createElement(Column, {
    xlg: 8,
    lg: 8,
    md: 8,
    sm: 8
  }, /*#__PURE__*/React.createElement(RadioButtonGroup, {
    legendText: "Message retention",
    name: "radio-button-group",
    defaultSelected: formThreeTextInputValue,
    onChange: function onChange(value) {
      return setFormThreeTextInputValue(value);
    },
    orientation: "vertical"
  }, /*#__PURE__*/React.createElement(RadioButton, {
    labelText: "A day",
    value: "one-day",
    id: "one-day"
  }), /*#__PURE__*/React.createElement(RadioButton, {
    labelText: "A week",
    value: "one-week",
    id: "one-week"
  }), /*#__PURE__*/React.createElement(RadioButton, {
    labelText: "A month",
    value: "one-month",
    id: "one-month"
  }))))));
};