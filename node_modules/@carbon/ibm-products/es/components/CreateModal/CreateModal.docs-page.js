import React from 'react';
import { StoryDocsPage } from '../../global/js/utils/StoryDocsPage';
import * as stories from './CreateModal.stories';
var DocsPage = function DocsPage() {
  return /*#__PURE__*/React.createElement(StoryDocsPage, {
    altGuidelinesHref: "https://pages.github.ibm.com/cdai-design/pal/patterns/creation-flows/usage#modal",
    blocks: [{
      story: stories.Default
    }, {
      title: 'Form validation',
      description: "All forms, including that within the `CreateModal` should follow C&CS guidelines\nfor form validation.\n\nThis includes the following:\n\n- The `Submit` button in the modal should be disabled, until all required inputs\n  are filled in and valid\n- All required inputs should _only_ throw an invalid error _after_ the element\n  loses focus\n- All optional form fields should have an `(optional)` text at the end of the\n  input `labelText`. Optional should always be in parentheses\n\nYou can find more information on how to validate your form fields in\n[Carbon's Form usage page](https://www.carbondesignsystem.com/components/form/usage)."
    }, {
      title: 'Overriding Carbon theme',
      description: "The design recommendation is to use a dark theme for the CreateModal if the\napplication is currently using a light theme, and vice versa. The theme applied\nto the CreateModal can easily be customized as follows:\n\nIn SCSS:",
      source: {
        language: 'css',
        code: "  .#{$pkg-prefix}--create-modal {\n    @include carbon--theme(\n      $theme: $carbon--theme--g90\n    );\n  }"
      }
    }, {
      description: "Alternatively, the required Carbon theme can be set as above in a custom CSS\nclass which is then applied to the CreateModal using the `className` prop."
    }]
  });
};
export default DocsPage;