import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "className", "vertical"];
/**
 * Copyright IBM Corp. 2021, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import cx from 'classnames';
import { bool, node, string } from 'prop-types';
import React, { createContext, forwardRef, useCallback, useEffect, useRef, useState } from 'react';
import { getDevtoolsProps } from '../../global/js/utils/devtools';
import { getFocusableElements as _getFocusableElements } from '../../global/js/utils/getFocusableElements';
import { pkg } from '../../settings';
var checkComponentEnabled = pkg.checkComponentEnabled,
  prefix = pkg.prefix;
var blockClass = "".concat(prefix, "--toolbar");
var ToolbarContext = /*#__PURE__*/createContext();

/** Toolbars are a collection of action items that organize a programâ€™s interaction patterns into a series of closely related commands. */
var Toolbar = /*#__PURE__*/forwardRef(function (_ref2, r) {
  var children = _ref2.children,
    className = _ref2.className,
    vertical = _ref2.vertical,
    rest = _objectWithoutProperties(_ref2, _excluded);
  var focusableElements = useRef();
  var getFocusableElements = useCallback(function () {
    return focusableElements.current;
  }, [focusableElements]);
  var _ref = useRef();
  var ref = r || _ref;
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    focus = _useState2[0],
    setFocus = _useState2[1];
  useEffect(function () {
    focusableElements.current = _getFocusableElements(ref.current);
    typeof focus !== 'undefined' && getFocusableElements().forEach(function (element, index) {
      element[index !== focus ? 'setAttribute' : 'removeAttribute']('tabindex', -1);
    });
  });
  useEffect(function () {
    typeof focus !== 'undefined' && getFocusableElements()[focus].focus();
  }, [focus, getFocusableElements]);
  var _ref3 = !vertical ? ['ArrowRight', 'ArrowLeft'] : ['ArrowDown', 'ArrowUp'],
    _ref4 = _slicedToArray(_ref3, 2),
    arrowNext = _ref4[0],
    arrowPrevious = _ref4[1];
  function onArrowDown(increment) {
    var nextFocus = focus + increment;
    getFocusableElements()[nextFocus] && setFocus(nextFocus);
  }
  function onFocus(_ref5) {
    var target = _ref5.target;
    var elements = getFocusableElements();
    elements.includes(target) && setFocus(elements.indexOf(target));
  }
  function onKeyDown(_ref6) {
    var key = _ref6.key,
      target = _ref6.target;
    if (getFocusableElements().includes(target)) {
      switch (key) {
        case arrowNext:
          onArrowDown(1);
          break;
        case arrowPrevious:
          onArrowDown(-1);
          break;
      }
    }
  }
  return /*#__PURE__*/React.createElement("div", _extends({}, rest, {
    ref: ref,
    className: cx(blockClass, className, _defineProperty({}, "".concat(blockClass, "--vertical"), vertical)),
    onFocus: onFocus,
    onKeyDown: onKeyDown
  }, vertical && {
    'aria-orientation': 'vertical'
  }, getDevtoolsProps(componentName), {
    role: "toolbar"
  }), /*#__PURE__*/React.createElement(ToolbarContext.Provider, {
    value: {
      vertical: vertical
    }
  }, children));
});
var componentName = 'Toolbar';
Toolbar.displayName = componentName;
Toolbar.propTypes = {
  /** Provide the content of the `Toolbar` */
  children: node.isRequired,
  /** Provide an optional class to be applied to the containing node */
  className: string,
  /** Determines whether the `Toolbar` is rendered vertically */
  vertical: bool
};
Toolbar = checkComponentEnabled(Toolbar, componentName);
export { blockClass, componentName, Toolbar, ToolbarContext };