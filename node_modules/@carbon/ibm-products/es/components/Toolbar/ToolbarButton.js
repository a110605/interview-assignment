import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["caret", "children", "className", "renderIcon", "iconDescription"];
/**
 * Copyright IBM Corp. 2021, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { IconButton } from '@carbon/react';
import cx from 'classnames';
import { bool, func, node, string } from 'prop-types';
import React, { forwardRef, useContext } from 'react';
import { pkg } from '../../settings';
import { blockClass as toolbarClass, ToolbarContext } from './Toolbar';
export var blockClass = "".concat(toolbarClass, "__button");

/** Toolbar buttons are common functions performed as part of a products interface or an open window.  */
export var ToolbarButton = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _useContext;
  var caret = _ref.caret,
    children = _ref.children,
    className = _ref.className,
    renderIcon = _ref.renderIcon,
    _ref$iconDescription = _ref.iconDescription,
    iconDescription = _ref$iconDescription === void 0 ? '' : _ref$iconDescription,
    rest = _objectWithoutProperties(_ref, _excluded);
  var Icon = renderIcon;
  return /*#__PURE__*/React.createElement(IconButton, _extends({
    align: ((_useContext = useContext(ToolbarContext)) === null || _useContext === void 0 ? void 0 : _useContext.vertical) && 'right'
  }, rest, {
    label: iconDescription,
    ref: ref,
    className: cx(className, _defineProperty({}, "".concat(blockClass, "--caret"), caret)),
    kind: "ghost",
    size: "md"
  }), /*#__PURE__*/React.createElement(React.Fragment, null, Icon ? /*#__PURE__*/React.createElement(Icon, null) : null, children, caret && /*#__PURE__*/React.createElement("span", {
    className: "".concat(blockClass, "__caret")
  })));
});
var componentName = 'ToolbarButton';
ToolbarButton.displayName = componentName;
ToolbarButton.propTypes = {
  /** Determines whether the caret is rendered */
  caret: bool,
  /** Provide the content of the `ToolbarButton` */
  children: node,
  /** Provide an optional class to be applied to the containing node */
  className: string,
  /** Specifies the label for the icon button */
  iconDescription: string.isRequired,
  /** Specifies the icon to be used by the ToolbarButton component */
  renderIcon: func.isRequired
};
ToolbarButton = pkg.checkComponentEnabled(ToolbarButton, componentName);