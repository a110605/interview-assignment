import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["borderColor", "boxedBorder", "className", "disabled", "usesExampleHook", "onPrimaryClick", "onSecondaryClick", "primaryButtonLabel", "primaryKind", "secondaryButtonLabel", "secondaryKind", "secondaryIcon", "size", "style"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Copyright IBM Corp. 2020, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Import portions of React that are needed.
import React, { useRef, useEffect, useState } from 'react';

// Other standard imports.
import PropTypes from 'prop-types';
import cx from 'classnames';
import { pkg } from '../../settings';

// Carbon and package components we use.
import { Button, ButtonSet } from '@carbon/react';
import useExample from './useExample';
// The block part of our conventional BEM class names (blockClass__E--M).
var blockClass = "".concat(pkg.prefix, "--example-component");
var componentName = 'ExampleComponent';

// NOTE: the component SCSS is not imported here: it is rolled up separately.

// Default values for props
var defaults = {
  primaryKind: 'primary',
  secondaryKind: 'secondary',
  secondaryIcon: null,
  size: 'lg'
};

/**
 * This is an example component to show relevant conventions and usage.
 */
export var ExampleComponent = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var borderColor = _ref.borderColor,
    boxedBorder = _ref.boxedBorder,
    className = _ref.className,
    disabled = _ref.disabled,
    usesExampleHook = _ref.usesExampleHook,
    onPrimaryClick = _ref.onPrimaryClick,
    onSecondaryClick = _ref.onSecondaryClick,
    primaryButtonLabel = _ref.primaryButtonLabel,
    _ref$primaryKind = _ref.primaryKind,
    primaryKind = _ref$primaryKind === void 0 ? defaults.primaryKind : _ref$primaryKind,
    secondaryButtonLabel = _ref.secondaryButtonLabel,
    _ref$secondaryKind = _ref.secondaryKind,
    secondaryKind = _ref$secondaryKind === void 0 ? defaults.secondaryKind : _ref$secondaryKind,
    _ref$secondaryIcon = _ref.secondaryIcon,
    secondaryIcon = _ref$secondaryIcon === void 0 ? defaults.secondaryIcon : _ref$secondaryIcon,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? defaults.size : _ref$size,
    style = _ref.style,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(primaryButtonLabel),
    _useState2 = _slicedToArray(_useState, 2),
    thePrimaryButtonLabel = _useState2[0],
    setThePrimaryButtonLabel = _useState2[1];
  var _useExample = useExample(usesExampleHook),
    _useExample2 = _slicedToArray(_useExample, 1),
    exampleUse = _useExample2[0];
  var modeClass = boxedBorder ? "".concat(blockClass, "--boxed-set") : "".concat(blockClass, "--shadow-set");
  var handlePrimaryClick = function handlePrimaryClick(e) {
    if (onPrimaryClick) {
      onPrimaryClick(e);
    }
  };
  var handleSecondaryClick = function handleSecondaryClick(e) {
    if (onSecondaryClick) {
      onSecondaryClick(e);
    }
  };
  var theSecondaryIcon = useRef(secondaryIcon && pkg.checkReportFeatureEnabled('ExampleComponent.secondaryIcon') ? secondaryIcon : null);
  useEffect(function () {
    if (usesExampleHook !== undefined && pkg.checkReportFeatureEnabled('ExampleComponent.useExample')) {
      setThePrimaryButtonLabel("".concat(primaryButtonLabel, " ").concat(exampleUse.toFixed(1), "s"));
    } else {
      setThePrimaryButtonLabel(primaryButtonLabel);
    }
  }, [primaryButtonLabel, usesExampleHook, exampleUse]);
  return /*#__PURE__*/React.createElement(ButtonSet, _extends({}, rest, {
    className: cx(blockClass,
    // Apply the block class to the main HTML element
    className, // Apply any supplied class names to the main HTML element.
    "".concat(blockClass, "--").concat(size), modeClass),
    ref: ref,
    role: "main",
    style: _objectSpread(_objectSpread({}, style), {}, _defineProperty({}, "--".concat(blockClass, "--border-color"), borderColor))
  }), /*#__PURE__*/React.createElement(Button, {
    className: "".concat(blockClass, "__secondary-button"),
    kind: secondaryKind,
    onClick: handleSecondaryClick,
    renderIcon: theSecondaryIcon.current,
    disabled: disabled,
    size: size
  }, secondaryButtonLabel), /*#__PURE__*/React.createElement(Button, {
    className: "".concat(blockClass, "__primary-button"),
    kind: primaryKind,
    onClick: handlePrimaryClick,
    disabled: disabled,
    size: size
  }, thePrimaryButtonLabel));
});

// Return a placeholder if not released and not enabled by feature flag.
ExampleComponent = pkg.checkComponentEnabled(ExampleComponent, componentName);

// The display name of the component, used by React. Note that displayName
// is used in preference to relying on function.name.
ExampleComponent.displayName = componentName;

// The types and DocGen commentary for the component props,
// in alphabetical order (for consistency).
// See https://www.npmjs.com/package/prop-types#usage.
ExampleComponent.propTypes = {
  /**
   * What border color (HTML color value) to use.
   */
  borderColor: PropTypes.string,
  /**
   * If true, the border is a box, otherwise it is a shadow.
   */
  boxedBorder: PropTypes.bool,
  /**
   * Provide an optional class to be applied to the containing node.
   */
  className: PropTypes.string,
  /**
   * If true, the buttons are disabled, otherwise they can be used.
   */
  disabled: PropTypes.bool,
  /**
   * An optional primary button click handler.
   */
  onPrimaryClick: PropTypes.func,
  /**
   * An optional secondary button click handler.
   */
  onSecondaryClick: PropTypes.func,
  /**
   * The primary button label.
   */
  primaryButtonLabel: PropTypes.string.isRequired,
  /**
   * The kind of button for the primary button ('primary' or 'danger').
   */
  primaryKind: PropTypes.oneOf(['primary', 'danger']),
  /**
   * The secondary button label.
   */
  secondaryButtonLabel: PropTypes.string.isRequired,
  /**
   * The icon to use for the secondary button.
   */
  secondaryIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
  /**
   * The kind of button for the secondary button ('secondary' or 'tertiary').
   */
  secondaryKind: PropTypes.oneOf(['secondary', 'tertiary']),
  /**
   * The size for the buttons
   */
  size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl', '2xl']),
  /**
   * Optional style settings for the containing node.
   */
  style: PropTypes.object,
  /**
   * Hook example timeout (in seconds) or undefined
   */
  usesExampleHook: PropTypes.number
};