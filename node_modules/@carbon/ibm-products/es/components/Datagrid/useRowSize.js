import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/*
 * Licensed Materials - Property of IBM
 * 5724-Q36
 * (c) Copyright IBM Corp. 2020, 2021
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

import { useState } from 'react';
import { RowSizeDropdown } from './Datagrid/addons/RowSize';
var useRowSize = function useRowSize(hooks) {
  var _useState = useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    internalRowSize = _useState2[0],
    setRowSize = _useState2[1];
  hooks.useInstance.push(function (instance) {
    var rowSizeProps = instance.rowSizeProps,
      rowSizes = instance.rowSizes,
      rowSize = instance.rowSize,
      onRowSizeChange = instance.onRowSizeChange;
    var _ref = rowSizeProps || {},
      labels = _ref.labels;
    Object.assign(instance, {
      rowSize: internalRowSize || rowSize,
      rowSizeDropdownProps: _objectSpread(_objectSpread({
        rowSizes: rowSizes
      }, labels), {}, {
        selectedOption: internalRowSize || rowSize,
        onChange: function onChange(value) {
          setRowSize(value);
          if (typeof onRowSizeChange === 'function') {
            onRowSizeChange(value);
          }
        }
      }),
      RowSizeDropdown: RowSizeDropdown
    });
  });
  var getTableProps = function getTableProps(props, _ref2) {
    var instance = _ref2.instance;
    var rowSize = instance.rowSize;
    if (!rowSize) {
      return props;
    }
    return [props, {
      size: rowSize
    }];
  };
  hooks.getTableProps.push(getTableProps);
};
export default useRowSize;