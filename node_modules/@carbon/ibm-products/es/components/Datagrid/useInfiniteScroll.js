/*
 * Licensed Materials - Property of IBM
 * 5724-Q36
 * (c) Copyright IBM Corp. 2020
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */
import { useCallback, useEffect } from 'react';
import debounce from 'lodash/debounce';
import useParentDimensions from './useParentDimensions';
import useResizeTable from './useResizeTable';
import { pkg } from '../../settings';
var useInfiniteScroll = function useInfiniteScroll(hooks) {
  useParentDimensions(hooks);
  useResizeTable(hooks);
  useEffect(function () {
    pkg.checkReportFeatureEnabled('Datagrid.useInfiniteScroll');
  }, []);
  var useInstance = function useInstance(instance) {
    var isFetching = instance.isFetching,
      tableHeight = instance.tableHeight,
      innerListRef = instance.innerListRef,
      fetchMoreData = instance.fetchMoreData,
      tableId = instance.tableId;
    var tableElement = document.querySelector("#".concat(tableId));
    var totalTableHeight = tableHeight || (tableElement === null || tableElement === void 0 ? void 0 : tableElement.clientHeight);
    var loadMoreThreshold = 200;
    var emptyFetchData = function emptyFetchData() {};
    // eslint-disable-next-line react-hooks/exhaustive-deps
    var fetchMore = useCallback(debounce(fetchMoreData || emptyFetchData, 3000, {
      leading: true,
      trailing: false
    }), [fetchMoreData]);
    var onScroll = function onScroll(_ref) {
      var scrollDirection = _ref.scrollDirection,
        scrollOffset = _ref.scrollOffset;
      if (innerListRef && innerListRef.current) {
        if (!isFetching && scrollDirection === 'forward' && scrollOffset + totalTableHeight >= innerListRef.current.clientHeight - loadMoreThreshold) {
          if (fetchMoreData) {
            fetchMore();
          }
        }
      }
    };
    Object.assign(instance, {
      onScroll: onScroll,
      withVirtualScroll: true
    });
  };
  hooks.useInstance.push(useInstance);
};
export default useInfiniteScroll;