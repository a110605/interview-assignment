import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/*
 * Licensed Materials - Property of IBM
 * 5724-Q36
 * (c) Copyright IBM Corp. 2020
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

import { useState, useCallback } from 'react';
import debounce from 'lodash/debounce';
var useRowIsMouseOver = function useRowIsMouseOver(hooks) {
  var useInstance = function useInstance(instance) {
    var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      mouseOverRowIndex = _useState2[0],
      setMouseOverRowIndex = _useState2[1];
    var onMouseChange = useDebounce(function (datagridState) {
      var row = datagridState.row;
      setMouseOverRowIndex(row.index);
    }, 100);
    var getRowProps = function getRowProps(props, datagridState) {
      var onMouseOver = function onMouseOver() {
        return onMouseChange(datagridState);
      };
      return [props, {
        onMouseOver: onMouseOver
      }];
    };
    var rows = instance.rows;
    var rowsWithMouseOver = rows.map(function (row) {
      return _objectSpread(_objectSpread({}, row), {}, {
        isMouseOver: row.index === mouseOverRowIndex
      });
    });
    Object.assign(instance, {
      rows: rowsWithMouseOver
    });
    hooks.getRowProps.push(getRowProps);
  };
  hooks.useInstance.push(useInstance);
};
var useDebounce = function useDebounce(fn, wait) {
  return (
    // eslint-disable-next-line react-hooks/exhaustive-deps
    useCallback(debounce(fn, wait), [])
  );
};
export default useRowIsMouseOver;