import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * Copyright IBM Corp. 2020, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { Add, ChevronDown, Download, Filter, Restart } from '@carbon/react/icons';
import { Button, ComposedModal, Dropdown, IconButton, ModalBody, ModalFooter, ModalHeader, OverflowMenu, OverflowMenuItem, TableToolbarContent, TableToolbarSearch } from '@carbon/react';
import { ButtonMenu, ButtonMenuItem } from '../../ButtonMenu';
import React, { useLayoutEffect, useState } from 'react';
import { action } from '@storybook/addon-actions';
import { pkg } from '../../../settings';
import { useFilterContext } from '../Datagrid/addons/Filtering/hooks';
var blockClass = "".concat(pkg.prefix, "--datagrid");
export var DatagridActions = function DatagridActions(datagridState) {
  var _useFilterContext = useFilterContext(),
    setPanelOpen = _useFilterContext.setPanelOpen;
  var selectedFlatRows = datagridState.selectedFlatRows,
    setGlobalFilter = datagridState.setGlobalFilter,
    CustomizeColumnsButton = datagridState.CustomizeColumnsButton,
    RowSizeDropdown = datagridState.RowSizeDropdown,
    rowSizeDropdownProps = datagridState.rowSizeDropdownProps,
    useDenseHeader = datagridState.useDenseHeader,
    filterProps = datagridState.filterProps,
    getFilterFlyoutProps = datagridState.getFilterFlyoutProps,
    FilterFlyout = datagridState.FilterFlyout,
    data = datagridState.data;
  var downloadCsv = function downloadCsv() {
    alert('Downloading...');
  };
  var refreshColumns = function refreshColumns() {
    alert('refreshing...');
  };
  var searchForAColumn = 'Search';
  var isNothingSelected = selectedFlatRows.length === 0;
  var style = {
    'button:nthChild(1) > span:nthChild(1)': {
      bottom: '-37px'
    }
  };
  var renderFilterFlyout = function renderFilterFlyout() {
    return (filterProps === null || filterProps === void 0 ? void 0 : filterProps.variation) === 'flyout' && /*#__PURE__*/React.createElement(FilterFlyout, getFilterFlyoutProps());
  };
  var renderFilterPanelButton = function renderFilterPanelButton() {
    return (filterProps === null || filterProps === void 0 ? void 0 : filterProps.variation) === 'panel' && /*#__PURE__*/React.createElement(IconButton, {
      kind: "ghost",
      align: "bottom",
      label: filterProps.panelIconDescription,
      className: "".concat(blockClass, "-filter-panel-open-button"),
      onClick: function onClick() {
        return setPanelOpen(function (open) {
          return !open;
        });
      },
      disabled: data.length === 0
    }, /*#__PURE__*/React.createElement(Filter, null));
  };
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    modalOpen = _useState2[0],
    setModalOpen = _useState2[1];
  var _useState3 = useState(window.innerWidth),
    _useState4 = _slicedToArray(_useState3, 2),
    size = _useState4[0],
    setSize = _useState4[1];
  useLayoutEffect(function () {
    function updateSize() {
      setSize(window.innerWidth);
    }
    window.addEventListener('resize', updateSize);
    return function () {
      return window.removeEventListener('resize', updateSize);
    };
  }, []);
  var mobileToolbar = size < 672 ? true : false;
  var items = ['Option 1', 'Option 2', 'Option 3'];
  return isNothingSelected && (useDenseHeader && useDenseHeader ? /*#__PURE__*/React.createElement(TableToolbarContent, {
    size: "sm"
  }, !mobileToolbar ? /*#__PURE__*/React.createElement(React.Fragment, null, renderFilterPanelButton(), /*#__PURE__*/React.createElement("div", {
    style: style
  }, /*#__PURE__*/React.createElement(Button, {
    kind: "ghost",
    hasIconOnly: true,
    tooltipPosition: "bottom",
    renderIcon: Download,
    iconDescription: 'Download CSV',
    onClick: downloadCsv
  })), renderFilterFlyout(), CustomizeColumnsButton && /*#__PURE__*/React.createElement("div", {
    style: style
  }, /*#__PURE__*/React.createElement(CustomizeColumnsButton, null)), /*#__PURE__*/React.createElement(RowSizeDropdown, rowSizeDropdownProps), /*#__PURE__*/React.createElement("div", {
    style: style,
    className: "".concat(blockClass, "__toolbar-divider")
  }, /*#__PURE__*/React.createElement(Button, {
    kind: "ghost",
    renderIcon: Add,
    iconDescription: 'Action'
  }, "Ghost button"))) : /*#__PURE__*/React.createElement(OverflowMenu, {
    "aria-label": "Tools",
    size: "md",
    flipped: true
  }, /*#__PURE__*/React.createElement(OverflowMenuItem, {
    itemText: "Filter",
    hasDivider: true,
    requireTitle: true,
    onClick: function onClick() {
      return setModalOpen(true);
    }
  }), /*#__PURE__*/React.createElement(OverflowMenuItem, {
    itemText: "Export",
    hasDivider: true,
    requireTitle: true
  }), /*#__PURE__*/React.createElement(OverflowMenuItem, {
    itemText: "Settings",
    hasDivider: true,
    requireTitle: true
  }), /*#__PURE__*/React.createElement(OverflowMenuItem, {
    itemText: "Import items",
    hasDivider: true,
    requireTitle: true
  }), /*#__PURE__*/React.createElement(OverflowMenuItem, {
    itemText: "Create",
    hasDivider: true,
    requireTitle: true
  }))) : !mobileToolbar ? /*#__PURE__*/React.createElement(TableToolbarContent, null, renderFilterPanelButton(), /*#__PURE__*/React.createElement(TableToolbarSearch, {
    size: "xl",
    id: "columnSearch",
    persistent: true,
    placeHolderText: searchForAColumn,
    onChange: function onChange(e) {
      return setGlobalFilter(e.target.value);
    }
  }), renderFilterFlyout(), /*#__PURE__*/React.createElement("div", {
    style: style
  }, /*#__PURE__*/React.createElement(Button, {
    kind: "ghost",
    hasIconOnly: true,
    tooltipPosition: "bottom",
    renderIcon: Restart,
    iconDescription: 'Refresh',
    onClick: refreshColumns
  })), /*#__PURE__*/React.createElement("div", {
    style: style
  }, /*#__PURE__*/React.createElement(Button, {
    kind: "ghost",
    hasIconOnly: true,
    tooltipPosition: "bottom",
    renderIcon: Download,
    iconDescription: 'Download CSV',
    onClick: downloadCsv
  })), CustomizeColumnsButton && /*#__PURE__*/React.createElement("div", {
    style: style
  }, /*#__PURE__*/React.createElement(CustomizeColumnsButton, null)), /*#__PURE__*/React.createElement(RowSizeDropdown, rowSizeDropdownProps), /*#__PURE__*/React.createElement(ButtonMenu, {
    label: "Primary button",
    renderIcon: ChevronDown,
    menuOptionsClass: "".concat(blockClass, "__toolbar-options")
  }, /*#__PURE__*/React.createElement(ButtonMenuItem, {
    itemText: "Option 1",
    onClick: action("Click on ButtonMenu Option 1")
  }), /*#__PURE__*/React.createElement(ButtonMenuItem, {
    itemText: "Option 2",
    onClick: action("Click on ButtonMenu Option 2")
  }), /*#__PURE__*/React.createElement(ButtonMenuItem, {
    itemText: "Option 3",
    onClick: action("Click on ButtonMenu Option 3")
  }))) : /*#__PURE__*/React.createElement(TableToolbarContent, null, renderFilterPanelButton(), /*#__PURE__*/React.createElement(TableToolbarSearch, {
    size: "xl",
    id: "columnSearch",
    persistent: true,
    placeHolderText: searchForAColumn,
    onChange: function onChange(e) {
      return setGlobalFilter(e.target.value);
    }
  }), renderFilterFlyout(), /*#__PURE__*/React.createElement(OverflowMenu, {
    "aria-label": "Tools",
    size: "lg",
    flipped: true,
    renderIcon: ChevronDown,
    className: "".concat(blockClass, "__toolbar-menu__trigger"),
    menuOptionsClass: "".concat(blockClass, "__toolbar-options")
  }, /*#__PURE__*/React.createElement(OverflowMenuItem, {
    itemText: "Filter",
    hasDivider: true,
    requireTitle: true,
    onClick: function onClick() {
      return setModalOpen(true);
    }
  }), /*#__PURE__*/React.createElement(OverflowMenuItem, {
    itemText: "Export",
    hasDivider: true,
    requireTitle: true
  }), /*#__PURE__*/React.createElement(OverflowMenuItem, {
    itemText: "Settings",
    hasDivider: true,
    requireTitle: true
  }), /*#__PURE__*/React.createElement(OverflowMenuItem, {
    itemText: "Import items",
    hasDivider: true,
    requireTitle: true
  }), /*#__PURE__*/React.createElement(OverflowMenuItem, {
    itemText: "Create",
    hasDivider: true,
    requireTitle: true
  })), modalOpen && /*#__PURE__*/React.createElement(ComposedModal, {
    size: "lg",
    open: modalOpen && modalOpen,
    onClose: function onClose() {
      return setModalOpen(false);
    },
    className: "".concat(blockClass, "__mobile-toolbar-modal")
  }, /*#__PURE__*/React.createElement(ModalHeader, null, /*#__PURE__*/React.createElement("h4", null, "Filters")), /*#__PURE__*/React.createElement(ModalBody, null, /*#__PURE__*/React.createElement(Dropdown, {
    initialSelectedItem: items[2],
    items: items,
    titleText: "Label",
    id: "filter1"
  }), /*#__PURE__*/React.createElement(Dropdown, {
    initialSelectedItem: items[2],
    items: items,
    titleText: "Label",
    id: "filter2"
  }), /*#__PURE__*/React.createElement(Dropdown, {
    initialSelectedItem: items[2],
    items: items,
    titleText: "Label",
    id: "filter3"
  })), /*#__PURE__*/React.createElement(ModalFooter, {
    primaryButtonText: "Apply",
    secondaryButtonText: "Cancel"
  }))));
};