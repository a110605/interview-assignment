/*
 * Licensed Materials - Property of IBM
 * 5724-Q36
 * (c) Copyright IBM Corp. 2020
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

var useDisableSelectRows = function useDisableSelectRows(hooks) {
  updateSelectAll(hooks);
  updatePageSelectAll(hooks);
  var getRowProps = function getRowProps(props, _ref) {
    var row = _ref.row,
      instance = _ref.instance;
    return [props, {
      selectDisabled: instance.shouldDisableSelectRow && instance.shouldDisableSelectRow(row)
    }];
  };
  hooks.getRowProps.push(getRowProps);
};
var updateSelectAll = function updateSelectAll(hooks) {
  var getToggleAllRowsSelectedProps = function getToggleAllRowsSelectedProps(props, _ref2) {
    var _instance$disableSele, _instance$disableSele2;
    var instance = _ref2.instance;
    var selectableRows = instance.rows.filter(function (row) {
      return !(instance.shouldDisableSelectRow && instance.shouldDisableSelectRow(row));
    });
    var isAllRowsSelected = selectableRows.length > 0 && selectableRows.every(function (_ref3) {
      var id = _ref3.id;
      return instance.state.selectedRowIds[id];
    });
    return [props, {
      onChange: function onChange(e) {
        selectableRows.forEach(function (row) {
          return row.toggleRowSelected(e.target.checked);
        });
      },
      style: {
        cursor: 'pointer'
      },
      checked: isAllRowsSelected,
      disabled: instance.disableSelectAll,
      title: (instance === null || instance === void 0 ? void 0 : (_instance$disableSele = instance.disableSelectRowsProps) === null || _instance$disableSele === void 0 ? void 0 : (_instance$disableSele2 = _instance$disableSele.labels) === null || _instance$disableSele2 === void 0 ? void 0 : _instance$disableSele2.toggleAllRowsLabel) || 'Toggle All Rows Selected',
      indeterminate: Boolean(!isAllRowsSelected && Object.keys(instance.state.selectedRowIds).length)
    }];
  };
  hooks.getToggleAllRowsSelectedProps.push(getToggleAllRowsSelectedProps);
};
var updatePageSelectAll = function updatePageSelectAll(hooks) {
  var getToggleAllPageRowsSelectedProps = function getToggleAllPageRowsSelectedProps(props, _ref4) {
    var _instance$disableSele3, _instance$disableSele4;
    var instance = _ref4.instance;
    var selectableRows = instance.page.filter(function (row) {
      return !(instance.shouldDisableSelectRow && instance.shouldDisableSelectRow(row));
    });
    var isAllRowsSelected = selectableRows.length > 0 && selectableRows.every(function (_ref5) {
      var id = _ref5.id;
      return instance.state.selectedRowIds[id];
    });
    return [props, {
      onChange: function onChange(e) {
        selectableRows.forEach(function (row) {
          return row.toggleRowSelected(e.target.checked);
        });
      },
      style: {
        cursor: 'pointer'
      },
      checked: isAllRowsSelected,
      disabled: instance.disableSelectAll,
      title: (instance === null || instance === void 0 ? void 0 : (_instance$disableSele3 = instance.disableSelectRowsProps) === null || _instance$disableSele3 === void 0 ? void 0 : (_instance$disableSele4 = _instance$disableSele3.labels) === null || _instance$disableSele4 === void 0 ? void 0 : _instance$disableSele4.toggleAllRowsLabel) || 'Toggle All Rows Selected',
      indeterminate: Boolean(!isAllRowsSelected && instance.page.some(function (_ref6) {
        var id = _ref6.id;
        return instance.state.selectedRowIds[id];
      }))
    }];
  };
  hooks.getToggleAllPageRowsSelectedProps.push(getToggleAllPageRowsSelectedProps);
};
export default useDisableSelectRows;