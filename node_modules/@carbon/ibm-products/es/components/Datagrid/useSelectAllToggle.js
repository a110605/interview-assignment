import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/*
 * Licensed Materials - Property of IBM
 * 5724-Q36
 * (c) Copyright IBM Corp. 2021
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */
// @flow
import React, { useLayoutEffect, useState } from 'react';
import cx from 'classnames';
import { selectionColumnId } from './common-column-ids';
import SelectAllWithToggle from './Datagrid/DatagridSelectAllWithToggle';
import { pkg } from '../../settings';
var blockClass = "".concat(pkg.prefix, "--datagrid");
var useSelectAllToggle = function useSelectAllToggle(hooks) {
  useSelectAllWithToggleComponent(hooks);
  useAddClassNameToSelectRow(hooks);
};
var useSelectAllWithToggleComponent = function useSelectAllWithToggleComponent(hooks) {
  var useInstance = function useInstance(instance) {
    var headers = instance.headers,
      DatagridPagination = instance.DatagridPagination;
    var headersWithSelectAllToggle = headers.map(function (header) {
      if (header.id === selectionColumnId && DatagridPagination) {
        Object.assign(header, {
          Header: Header
        });
      }
      return header;
    });
    Object.assign(instance, {
      headers: headersWithSelectAllToggle
    });
  };
  hooks.useInstance.push(useInstance);
};
var useAddClassNameToSelectRow = function useAddClassNameToSelectRow(hooks) {
  var _useState = useState(window.innerWidth),
    _useState2 = _slicedToArray(_useState, 2),
    windowSize = _useState2[0],
    setWindowSize = _useState2[1];
  useLayoutEffect(function () {
    function updateSize() {
      setWindowSize(window.innerWidth);
    }
    window.addEventListener('resize', updateSize);
    return function () {
      return window.removeEventListener('resize', updateSize);
    };
  }, []);
  hooks.getCellProps.push(function (props, data) {
    var _columns$;
    var column = data.cell.column;
    var _data$instance = data.instance,
      DatagridPagination = _data$instance.DatagridPagination,
      columns = _data$instance.columns,
      withStickyColumn = _data$instance.withStickyColumn;
    var isFirstColumnStickyLeft = ((_columns$ = columns[0]) === null || _columns$ === void 0 ? void 0 : _columns$.sticky) === 'left' && withStickyColumn;
    if (column.id === selectionColumnId && DatagridPagination) {
      return [props, {
        className: cx("".concat(blockClass, "__select-all-toggle-on"), _defineProperty({}, "".concat(blockClass, "__select-all-sticky-left"), isFirstColumnStickyLeft && windowSize > 671))
      }];
    }
    return [props];
  });
};
var Header = function Header(gridState) {
  var tableId = gridState.tableId,
    isFetching = gridState.isFetching,
    selectAllToggle = gridState.selectAllToggle,
    getToggleAllPageRowsSelectedProps = gridState.getToggleAllPageRowsSelectedProps,
    getToggleAllRowsSelectedProps = gridState.getToggleAllRowsSelectedProps,
    isAllRowsSelected = gridState.isAllRowsSelected,
    withStickyColumn = gridState.withStickyColumn,
    columns = gridState.columns;
  var props = {
    tableId: tableId,
    isFetching: isFetching,
    selectAllToggle: selectAllToggle,
    getToggleAllPageRowsSelectedProps: getToggleAllPageRowsSelectedProps,
    getToggleAllRowsSelectedProps: getToggleAllRowsSelectedProps,
    isAllRowsSelected: isAllRowsSelected,
    withStickyColumn: withStickyColumn,
    columns: columns
  };
  return /*#__PURE__*/React.createElement(SelectAllWithToggle, props);
};
export default useSelectAllToggle;