import _defineProperty from "@babel/runtime/helpers/defineProperty";
/**
 * Copyright IBM Corp. 2022, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React, { useEffect } from 'react';
import { pkg } from '../../settings';
import cx from 'classnames';
import { InlineEditCell } from './Datagrid/addons/InlineEdit/InlineEditCell';
var blockClass = "".concat(pkg.prefix, "--datagrid");
var useInlineEdit = function useInlineEdit(hooks, usingEditableCell) {
  useEffect(function () {
    if (!usingEditableCell) {
      pkg.checkReportFeatureEnabled('Datagrid.useInlineEdit');
    }
    if (usingEditableCell) {
      pkg.checkReportFeatureEnabled('Datagrid.useEditableCell');
    }
  }, [usingEditableCell]);
  var addInlineEdit = function addInlineEdit(props, _ref) {
    var _cell$column, _cell$column$inlineEd, _instance$columns$fil;
    var cell = _ref.cell,
      instance = _ref.instance;
    var columnInlineEditConfig = cell.column.inlineEdit;
    var inlineEditType = (_cell$column = cell.column) === null || _cell$column === void 0 ? void 0 : (_cell$column$inlineEd = _cell$column.inlineEdit) === null || _cell$column$inlineEd === void 0 ? void 0 : _cell$column$inlineEd.type;
    var totalInlineEditColumns = (_instance$columns$fil = instance.columns.filter(function (item) {
      return item.inlineEdit;
    })) === null || _instance$columns$fil === void 0 ? void 0 : _instance$columns$fil.length;
    var renderInlineEditComponent = function renderInlineEditComponent(type) {
      return /*#__PURE__*/React.createElement(InlineEditCell, {
        config: columnInlineEditConfig,
        tabIndex: -1,
        value: cell.value,
        cell: cell,
        instance: instance,
        totalInlineEditColumns: totalInlineEditColumns,
        type: type
      });
    };
    if (cell.column.id === 'spacer') {
      return [props, {
        className: cx("".concat(blockClass, "__cell"), "".concat(blockClass, "__cell--spacer"))
      }];
    }
    return [props, {
      className: cx("".concat(blockClass, "__cell"), _defineProperty({}, "".concat(blockClass, "__cell-inline-edit"), !!usingEditableCell || pkg.isFeatureEnabled('Datagrid.useInlineEdit') ? true : '')),
      role: 'gridcell',
      children: (!!usingEditableCell || pkg.isFeatureEnabled('Datagrid.useInlineEdit')) && /*#__PURE__*/React.createElement(React.Fragment, null, inlineEditType === 'text' && renderInlineEditComponent(inlineEditType), inlineEditType === 'number' && renderInlineEditComponent(inlineEditType), inlineEditType === 'selection' && renderInlineEditComponent(inlineEditType), inlineEditType === 'date' && renderInlineEditComponent(inlineEditType), !inlineEditType && /*#__PURE__*/React.createElement(InlineEditCell, {
        config: columnInlineEditConfig,
        tabIndex: -1,
        value: cell.value,
        cell: cell,
        instance: instance,
        disabled: true,
        nonEditCell: true,
        totalInlineEditColumns: totalInlineEditColumns,
        type: "text"
      }))
    }];
  };
  hooks.getCellProps.push(addInlineEdit);
  hooks.useInstance.push(function (instance) {
    Object.assign(instance, {
      withInlineEdit: !!usingEditableCell || pkg.isFeatureEnabled('Datagrid.useInlineEdit') ? true : false
    });
  });
};
export default useInlineEdit;