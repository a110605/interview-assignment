import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Copyright IBM Corp. 2020, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React from 'react';
import cx from 'classnames';
import { pkg, carbon } from '../../settings';
import { Button } from '@carbon/react';
import { ArrowUp, ArrowDown, ArrowsVertical } from '@carbon/react/icons';
var blockClass = "".concat(pkg.prefix, "--datagrid");
var ordering = {
  ASC: 'ASC',
  DESC: 'DESC',
  NONE: 'NONE'
};
var useSortableColumns = function useSortableColumns(hooks) {
  var sortableVisibleColumns = function sortableVisibleColumns(visibleColumns, _ref) {
    var _instance$customizeCo;
    var instance = _ref.instance;
    var onSort = instance.onSort;
    var onSortClick = function onSortClick(column) {
      var key = column.id;
      var sortDesc = column.isSortedDesc;
      var _getNewSortOrder = getNewSortOrder(sortDesc),
        newSortDesc = _getNewSortOrder.newSortDesc,
        newOrder = _getNewSortOrder.newOrder;
      if (onSort) {
        onSort(key, newOrder);
      }
      instance.toggleSortBy(key, newSortDesc, false);
    };
    var sortableColumns = visibleColumns.map(function (column) {
      var icon = function icon(col, props) {
        if (col !== null && col !== void 0 && col.isSorted) {
          switch (col.isSortedDesc) {
            case false:
              return /*#__PURE__*/React.createElement(ArrowUp, _extends({
                size: 16
              }, props, {
                className: "".concat(blockClass, "__sortable-icon ").concat(carbon.prefix, "--btn__icon")
              }));
            case true:
              return /*#__PURE__*/React.createElement(ArrowDown, _extends({
                size: 16
              }, props, {
                className: "".concat(blockClass, "__sortable-icon ").concat(carbon.prefix, "--btn__icon")
              }));
            default:
              return /*#__PURE__*/React.createElement(ArrowsVertical, _extends({
                size: 16
              }, props, {
                className: "".concat(blockClass, "__sortable-icon ").concat(carbon.prefix, "--btn__icon")
              }));
          }
        }
        return /*#__PURE__*/React.createElement(ArrowsVertical, _extends({
          size: 16
        }, props, {
          className: "".concat(blockClass, "__sortable-icon ").concat(carbon.prefix, "--btn__icon")
        }));
      };
      var Header = function Header(headerProp) {
        var _cx;
        return column.disableSortBy === true ? column.Header : /*#__PURE__*/React.createElement(Button, {
          onClick: function onClick() {
            return onSortClick(headerProp === null || headerProp === void 0 ? void 0 : headerProp.column);
          },
          kind: "ghost",
          renderIcon: function renderIcon(props) {
            return icon(headerProp === null || headerProp === void 0 ? void 0 : headerProp.column, props);
          },
          className: cx("".concat(carbon.prefix, "--table-sort ").concat(blockClass, "--table-sort"), (_cx = {}, _defineProperty(_cx, "".concat(blockClass, "--table-sort--desc"), headerProp === null || headerProp === void 0 ? void 0 : headerProp.column.isSortedDesc), _defineProperty(_cx, "".concat(blockClass, "--table-sort--asc"), (headerProp === null || headerProp === void 0 ? void 0 : headerProp.column.isSortedDesc) === false), _cx))
        }, column.Header);
      };
      return _objectSpread(_objectSpread({}, column), {}, {
        Header: Header,
        minWidth: column.disableSortBy === true ? 0 : 90
      });
    });
    return (_instance$customizeCo = instance.customizeColumnsProps) !== null && _instance$customizeCo !== void 0 && _instance$customizeCo.isTearsheetOpen ? visibleColumns : _toConsumableArray(sortableColumns);
  };
  var sortInstanceProps = function sortInstanceProps(instance) {
    var onSort = instance.onSort;
    Object.assign(instance, {
      manualSortBy: !!onSort,
      isTableSortable: true
    });
  };
  var getNewSortOrder = function getNewSortOrder(sortOrder) {
    var order = {
      newSortDesc: undefined,
      newOrder: ordering.NONE
    };
    if (sortOrder === false) {
      order.newOrder = ordering.DESC;
      order.newSortDesc = true;
    }
    if (sortOrder === undefined) {
      order.newOrder = ordering.ASC;
      order.newSortDesc = false;
    }
    return order;
  };
  hooks.visibleColumns.push(sortableVisibleColumns);
  hooks.useInstance.push(sortInstanceProps);
};
export default useSortableColumns;