import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Copyright IBM Corp. 2021, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import * as React from 'react';
import { pkg } from '../../settings';
import { CustomizeColumnsTearsheetWrapper, ToggleButtonWrapper } from './Datagrid/addons/CustomizeColumns';
var useCustomizeColumns = function useCustomizeColumns(hooks) {
  React.useEffect(function () {
    pkg.checkReportFeatureEnabled('Datagrid.useCustomizeColumns');
  }, []);
  var _React$useState = React.useState(false),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    isTearsheetOpen = _React$useState2[0],
    setIsTearsheetOpen = _React$useState2[1];
  hooks.useInstance.push(function (instance) {
    var customizeColumnsProps = instance.customizeColumnsProps;
    var _ref = customizeColumnsProps || {},
      labels = _ref.labels;
    Object.assign(instance, {
      customizeColumnsProps: _objectSpread(_objectSpread({}, customizeColumnsProps), {}, {
        isTearsheetOpen: isTearsheetOpen,
        setIsTearsheetOpen: setIsTearsheetOpen
      }),
      CustomizeColumnsButton: function CustomizeColumnsButton(props) {
        return /*#__PURE__*/React.createElement(ToggleButtonWrapper, _extends({
          iconTooltipLabel: labels === null || labels === void 0 ? void 0 : labels.iconTooltipLabel,
          isTearsheetOpen: isTearsheetOpen,
          setIsTearsheetOpen: setIsTearsheetOpen
        }, props));
      },
      CustomizeColumnsTearsheet: CustomizeColumnsTearsheetWrapper
    });
  });
};
export default useCustomizeColumns;