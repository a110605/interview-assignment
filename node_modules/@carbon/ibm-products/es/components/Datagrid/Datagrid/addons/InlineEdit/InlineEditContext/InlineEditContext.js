import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React, { createContext, useReducer } from 'react';
import PropTypes from 'prop-types';
import { returnUpdatedActiveCell } from './returnUpdatedActiveCell';
import { getCellIdAsObject } from './getCellIdAsObject';
export var InlineEditContext = /*#__PURE__*/createContext();
var inlineEditReducer = function inlineEditReducer(state, action) {
  switch (action.type) {
    case 'ADD_GRID_ACTIVE_FOCUS':
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          gridActive: true,
          activeCellId: action.payload,
          // set default active cell when grid receives focus
          previousActiveCellId: null
        });
      }
    case 'REMOVE_GRID_ACTIVE_FOCUS':
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          gridActive: false,
          editId: null,
          activeCellId: null,
          previousActiveCellId: action.payload
        });
      }
    case 'ENTER_EDIT_MODE':
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          activeCellId: action.payload.activeCellId,
          editId: action.payload.editId
        });
      }
    case 'EXIT_EDIT_MODE':
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          activeCellId: action.payload,
          editId: null
        });
      }
    case 'UPDATE_ACTIVE_CELL_ID':
      {
        var _action$payload = action.payload,
          direction = _action$payload.direction,
          oldId = _action$payload.oldId,
          instance = _action$payload.instance;
        if (!action.payload.direction) {
          return _objectSpread(_objectSpread({}, state), {}, {
            activeCellId: action.payload,
            editId: null
          });
        }
        if (direction && typeof direction === 'string') {
          var activeCellCoords = getCellIdAsObject(oldId);
          var totalVisibleColumns = instance.visibleColumns.filter(function (item) {
            return item.id !== 'spacer';
          });
          return returnUpdatedActiveCell({
            activeCellCoords: activeCellCoords,
            direction: direction,
            totalVisibleColumns: totalVisibleColumns,
            state: state,
            instance: instance
          });
        }
        break;
      }
    default:
      return state;
  }
};
export var InlineEditProvider = function InlineEditProvider(_ref) {
  var children = _ref.children;
  var initialState = {};
  var _useReducer = useReducer(inlineEditReducer, initialState),
    _useReducer2 = _slicedToArray(_useReducer, 2),
    state = _useReducer2[0],
    dispatch = _useReducer2[1];
  return /*#__PURE__*/React.createElement(InlineEditContext.Provider, {
    value: {
      state: state,
      dispatch: dispatch
    }
  }, children);
};
InlineEditProvider.propTypes = {
  children: PropTypes.element
};