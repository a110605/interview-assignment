/**
 * Copyright IBM Corp. 2023, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React from 'react';
import { PropTypes } from 'prop-types';
import { Checkbox } from '@carbon/react';
import { isColumnVisible } from './common';
import DraggableElement from '../../DraggableElement';
import { pkg } from '../../../../../settings';
var blockClass = "".concat(pkg.prefix, "--datagrid");
export var DraggableItemsList = function DraggableItemsList(_ref) {
  var columns = _ref.columns,
    filterString = _ref.filterString,
    focusIndex = _ref.focusIndex,
    getNextIndex = _ref.getNextIndex,
    isTableSortable = _ref.isTableSortable,
    moveElement = _ref.moveElement,
    onSelectColumn = _ref.onSelectColumn,
    setAriaRegionText = _ref.setAriaRegionText,
    setColumnsObject = _ref.setColumnsObject,
    setFocusIndex = _ref.setFocusIndex;
  return /*#__PURE__*/React.createElement(React.Fragment, null, columns
  // hide the columns without Header, e.g the sticky actions, spacer
  .filter(function (colDef) {
    var _colDef$Header$props$, _colDef$Header$props;
    var sortableTitle = isTableSortable && ((_colDef$Header$props$ = colDef.Header().props.children.props) === null || _colDef$Header$props$ === void 0 ? void 0 : _colDef$Header$props$.title);
    return !!colDef.Header.props && !!((_colDef$Header$props = colDef.Header.props) !== null && _colDef$Header$props !== void 0 && _colDef$Header$props.title) || isTableSortable && !!sortableTitle;
  }).filter(function (colDef) {
    return !colDef.isAction;
  }).filter(function (colDef) {
    var _colDef$Header$props$2, _colDef$Header$props2, _colDef$Header$props3;
    var sortableTitle = isTableSortable && ((_colDef$Header$props$2 = colDef.Header().props.children.props) === null || _colDef$Header$props$2 === void 0 ? void 0 : _colDef$Header$props$2.title);
    return filterString.length === 0 || (isTableSortable ? sortableTitle === null || sortableTitle === void 0 ? void 0 : sortableTitle.toLowerCase().includes(filterString) : (_colDef$Header$props2 = colDef.Header.props) === null || _colDef$Header$props2 === void 0 ? void 0 : (_colDef$Header$props3 = _colDef$Header$props2.title) === null || _colDef$Header$props3 === void 0 ? void 0 : _colDef$Header$props3.toLowerCase().includes(filterString)) && colDef.id !== 'spacer';
  }).map(function (colDef, i) {
    var _colDef$Header$props$3, _colDef$Header$props4, _colDef$Header$props5, _colDef$Header$props6, _colDef$Header$props7;
    var isSortableColumn = !!colDef.canSort && !!isTableSortable;
    var sortableTitle = isTableSortable && ((_colDef$Header$props$3 = colDef.Header().props.children.props) === null || _colDef$Header$props$3 === void 0 ? void 0 : _colDef$Header$props$3.title);
    var searchString = new RegExp('(' + filterString + ')');
    var res = filterString.length ? isSortableColumn ? sortableTitle.toLowerCase().split(searchString) : colDef.Header.props.title.toLowerCase().split(searchString) : null;
    var firstWord = res !== null ? res[0] === '' ? res[1].charAt(0).toUpperCase() + res[1].substring(1) : res[0].charAt(0).toUpperCase() + res[0].substring(1) : null;
    var highlightedText = res !== null ? res[0] === '' ? "<strong>".concat(firstWord, "</strong>") + res[2] : firstWord + "<strong>".concat(res[1], "</strong>") + res[2] : isSortableColumn ? sortableTitle : (_colDef$Header$props4 = colDef.Header.props) === null || _colDef$Header$props4 === void 0 ? void 0 : _colDef$Header$props4.title;
    var isFrozenColumn = !!colDef.sticky;
    var listContents = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Checkbox, {
      wrapperClassName: "".concat(blockClass, "__customize-columns-checkbox-wrapper"),
      checked: isColumnVisible(colDef),
      disabled: isFrozenColumn,
      onChange: function onChange(_, _ref2) {
        var checked = _ref2.checked;
        return onSelectColumn(colDef, checked);
      },
      id: "".concat(blockClass, "__customization-column-").concat(colDef.id),
      labelText: isSortableColumn ? sortableTitle : (_colDef$Header$props5 = colDef.Header.props) === null || _colDef$Header$props5 === void 0 ? void 0 : _colDef$Header$props5.title,
      title: isSortableColumn ? sortableTitle : (_colDef$Header$props6 = colDef.Header.props) === null || _colDef$Header$props6 === void 0 ? void 0 : _colDef$Header$props6.title,
      className: "".concat(blockClass, "__customize-columns-checkbox"),
      hideLabel: true
    }), /*#__PURE__*/React.createElement("div", {
      dangerouslySetInnerHTML: {
        __html: highlightedText
      },
      className: "".concat(blockClass, "__customize-columns-checkbox-visible-label")
    }));
    return /*#__PURE__*/React.createElement(DraggableElement, {
      key: colDef.id,
      index: i,
      listData: columns,
      setListData: setColumnsObject,
      id: "dnd-datagrid-columns-".concat(colDef.id),
      type: "column-customization",
      disabled: filterString.length > 0 || isFrozenColumn,
      ariaLabel: isSortableColumn ? sortableTitle : (_colDef$Header$props7 = colDef.Header.props) === null || _colDef$Header$props7 === void 0 ? void 0 : _colDef$Header$props7.title,
      onGrab: setAriaRegionText,
      isFocused: focusIndex === i,
      moveElement: moveElement,
      onArrowKeyDown: function onArrowKeyDown(e, isGrabbed, currentIndex) {
        if (isGrabbed) {
          var _columns$nextIndex;
          var nextIndex = getNextIndex(columns, currentIndex, e.key);
          e.preventDefault();
          e.stopPropagation();
          if (nextIndex >= 0 && !((_columns$nextIndex = columns[nextIndex]) !== null && _columns$nextIndex !== void 0 && _columns$nextIndex.sticky)) {
            setFocusIndex(nextIndex);
            moveElement(currentIndex, nextIndex);
            e.target.scrollIntoView({
              block: 'center'
            });
          }
        }
      },
      isSticky: isFrozenColumn,
      selected: isColumnVisible(colDef)
    }, listContents);
  }));
};
DraggableItemsList.propTypes = {
  columns: PropTypes.array.isRequired,
  filterString: PropTypes.string.isRequired,
  focusIndex: PropTypes.number.isRequired,
  getNextIndex: PropTypes.func.isRequired,
  isTableSortable: PropTypes.bool,
  moveElement: PropTypes.func.isRequired,
  onSelectColumn: PropTypes.func.isRequired,
  setAriaRegionText: PropTypes.func.isRequired,
  setColumnsObject: PropTypes.func.isRequired,
  setFocusIndex: PropTypes.func.isRequired
};