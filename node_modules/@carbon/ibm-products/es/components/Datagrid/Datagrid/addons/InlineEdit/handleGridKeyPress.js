import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Copyright IBM Corp. 2022, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { carbon, pkg } from '../../../../../settings';
import { handleMultipleKeys } from './handleMultipleKeys';
import { getCellIdAsObject } from './InlineEditContext/getCellIdAsObject';
var blockClass = "".concat(pkg.prefix, "--datagrid");
export var handleGridKeyPress = function handleGridKeyPress(_ref) {
  var event = _ref.event,
    dispatch = _ref.dispatch,
    state = _ref.state,
    instance = _ref.instance,
    keysPressedList = _ref.keysPressedList,
    usingMac = _ref.usingMac;
  var key = event.key;
  var gridActive = state.gridActive,
    activeCellId = state.activeCellId,
    editId = state.editId;
  var focusedCell = document.querySelector("#".concat(instance.tableId, " .").concat(blockClass, "__table-with-inline-edit [data-cell-id=\"").concat(activeCellId, "\"]"));

  // If we reach this it means that tab was pressed while in
  // edit mode which should not remove the focus from the grid
  if (activeCellId === editId && key === 'Tab') {
    // Attempting to exit date picker
    if (focusedCell.getAttribute('data-inline-type') === 'date') {
      dispatch({
        type: 'EXIT_EDIT_MODE',
        payload: activeCellId
      });
      var inlineEditArea = document.querySelector("#".concat(instance.tableId, " .").concat(blockClass, "__table-with-inline-edit"));
      inlineEditArea.focus();
    }
    event.preventDefault();
    return;
  }
  if (activeCellId === editId && key === 'Escape') {
    if (focusedCell.getAttribute('data-inline-type') === 'date') {
      dispatch({
        type: 'EXIT_EDIT_MODE',
        payload: activeCellId
      });
      event.preventDefault();
      var _inlineEditArea = document.querySelector("#".concat(instance.tableId, " .").concat(blockClass, "__table-with-inline-edit"));
      _inlineEditArea.focus();
      return;
    }
  }

  // Checks if the dropdown menu is open
  var dropdownIsActive = function dropdownIsActive() {
    var focusedElementRole = document.activeElement.getAttribute('role');
    if (focusedElementRole === 'listbox' && document.activeElement.classList.contains("".concat(carbon.prefix, "--list-box__menu"))) {
      // Prevents arrow keys from scrolling any other content when dropdown menu is open
      event.preventDefault();
      return true;
    }
    return false;
  };

  // Checks if the date picker is open
  var datePickerIsActive = function datePickerIsActive() {
    var focusedCalendarElement = document.querySelector(".".concat(carbon.prefix, "--date-picker__input.flatpickr-input.active"));
    if (focusedCalendarElement || document.activeElement.classList.contains("flatpickr-day")) {
      return true;
    }
    return false;
  };

  // Stop grid key listener when in edit mode
  var isEditing = document.activeElement.id === activeCellId && document.activeElement.id === editId || dropdownIsActive() || datePickerIsActive();
  if (isEditing || !gridActive) {
    return;
  }
  // Command keys need to be returned as there is default browser behavior with these keys
  if (key === 'Meta' || key === 'Control') {
    return;
  }
  // Prevent arrow keys, home key, and end key from scrolling the page when the data spreadsheet container has focus
  if (['End', 'Home', 'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown'].indexOf(key) > -1 && !isEditing && keysPressedList.length < 2) {
    event.preventDefault();
  }
  var isDisabledCell = focusedCell.getAttribute('data-disabled') === 'false' ? false : true;
  var sharedUpdateParams = {
    oldId: activeCellId,
    instance: instance
  };
  if (keysPressedList.length > 1) {
    handleMultipleKeys({
      usingMac: usingMac,
      keysPressedList: keysPressedList,
      dispatch: dispatch,
      activeCellId: activeCellId,
      instance: instance
    });
  }
  if (keysPressedList.length < 2) {
    switch (key) {
      case 'Tab':
        {
          if (!editId) {
            dispatch({
              type: 'REMOVE_GRID_ACTIVE_FOCUS',
              payload: activeCellId
            });
          }
          break;
        }
      case 'ArrowRight':
        {
          dispatch({
            type: 'UPDATE_ACTIVE_CELL_ID',
            payload: _objectSpread({
              direction: 'right'
            }, sharedUpdateParams)
          });
          break;
        }
      case 'ArrowLeft':
        {
          dispatch({
            type: 'UPDATE_ACTIVE_CELL_ID',
            payload: _objectSpread({
              direction: 'left'
            }, sharedUpdateParams)
          });
          break;
        }
      case 'ArrowUp':
        {
          dispatch({
            type: 'UPDATE_ACTIVE_CELL_ID',
            payload: _objectSpread({
              direction: 'up'
            }, sharedUpdateParams)
          });
          break;
        }
      case 'ArrowDown':
        {
          dispatch({
            type: 'UPDATE_ACTIVE_CELL_ID',
            payload: _objectSpread({
              direction: 'down'
            }, sharedUpdateParams)
          });
          break;
        }
      // Move active cell to first column in current row
      case 'Home':
        {
          var activeCellObject = getCellIdAsObject(activeCellId);
          var newActiveCellCoords = _objectSpread(_objectSpread({}, activeCellObject), {}, {
            column: 0
          });
          var newActiveCellId = "column-".concat(newActiveCellCoords.column, "-row-").concat(newActiveCellCoords.row);
          var scrollElement = document.querySelector("#".concat(instance.tableId, " .").concat(pkg.prefix, "--datagrid__table-container"));
          // Scroll table container to the furthest left position
          scrollElement.scrollLeft = 0;
          dispatch({
            type: 'UPDATE_ACTIVE_CELL_ID',
            payload: newActiveCellId
          });
          break;
        }
      // Move active cell to last column in current row
      case 'End':
        {
          var _activeCellObject = getCellIdAsObject(activeCellId);
          var totalVisibleColumns = instance.visibleColumns.filter(function (item) {
            return item.id !== 'spacer';
          });
          var _newActiveCellCoords = _objectSpread(_objectSpread({}, _activeCellObject), {}, {
            column: totalVisibleColumns.length - 1
          });
          var _newActiveCellId = "column-".concat(_newActiveCellCoords.column, "-row-").concat(_newActiveCellCoords.row);
          var _scrollElement = document.querySelector("#".concat(instance.tableId, " .").concat(pkg.prefix, "--datagrid__table-container"));
          // Scroll table container to the furthest right position
          _scrollElement.scrollLeft = _scrollElement.scrollWidth;
          dispatch({
            type: 'UPDATE_ACTIVE_CELL_ID',
            payload: _newActiveCellId
          });
          break;
        }
      case ' ':
      case 'F2':
      case 'Enter':
        {
          // Disabled cells are not allowed to go into edit mode
          if (isDisabledCell) {
            return;
          }
          // Only go into edit mode if there is no editId, meaning that we're not already in edit mode
          if (!editId) {
            var focusedType = focusedCell.getAttribute('data-inline-type');
            // Open dropdown immediately after entering edit mode for selection type
            if (focusedType === 'selection') {
              setTimeout(function () {
                var dropdownTrigger = focusedCell.querySelector('button');
                dropdownTrigger === null || dropdownTrigger === void 0 ? void 0 : dropdownTrigger.click();
              }, 1);
            }
            if (focusedType === 'date') {
              setTimeout(function () {
                var dateInputTrigger = focusedCell.querySelector('input');
                dateInputTrigger === null || dateInputTrigger === void 0 ? void 0 : dateInputTrigger.click();
                dateInputTrigger === null || dateInputTrigger === void 0 ? void 0 : dateInputTrigger.focus();
              }, 1);
            }
            dispatch({
              type: 'ENTER_EDIT_MODE',
              payload: {
                activeCellId: activeCellId,
                editId: activeCellId
              }
            });
          }
        }
    }
  }
};