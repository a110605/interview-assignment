/**
 * Copyright IBM Corp. 2022, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { CHECKBOX, DATE, DROPDOWN, FLYOUT, NUMBER, PANEL, RADIO } from './constants';
var applyInitialFilters = function applyInitialFilters(filterState, initialFilters) {
  Object.keys(filterState).forEach(function (key) {
    var hasInitialFilter = initialFilters.find(function (filter) {
      return filter.id === key;
    });
    if (hasInitialFilter) {
      filterState[key].value = hasInitialFilter.value;
    }
  });
};

// This functions takes the filters passed in and makes an object to track it's state
export var getInitialStateFromFilters = function getInitialStateFromFilters(filters) {
  var variation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FLYOUT;
  var initialFilters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var initialFilterState = {};
  var setInitialState = function setInitialState(_ref) {
    var type = _ref.type,
      column = _ref.column,
      props = _ref.props;
    if (type === CHECKBOX) {
      initialFilterState[column] = {
        value: props.Checkbox.map(function (_ref2) {
          var id = _ref2.id,
            labelText = _ref2.labelText,
            value = _ref2.value;
          return {
            id: id,
            labelText: labelText,
            value: value,
            selected: false
          };
        }),
        type: type
      };
    } else if (type === DATE) {
      initialFilterState[column] = {
        value: [null, null],
        type: type
      };
    } else if (type === NUMBER) {
      initialFilterState[column] = {
        value: '',
        type: type
      };
    } else if (type === RADIO) {
      initialFilterState[column] = {
        value: '',
        type: type
      };
    } else if (type === DROPDOWN) {
      initialFilterState[column] = {
        value: '',
        type: type
      };
    }
  };
  if (variation === FLYOUT) {
    filters.forEach(setInitialState);
  } else if (variation === PANEL) {
    filters.forEach(function (_ref3) {
      var _ref3$filters = _ref3.filters,
        sections = _ref3$filters === void 0 ? [] : _ref3$filters;
      sections.forEach(function (_ref4) {
        var filter = _ref4.filter;
        return setInitialState(filter);
      });
    });
  } else {
    console.error('No variation passed into useInitialStateFromFilters');
  }
  if (initialFilters.length > 0) {
    applyInitialFilters(initialFilterState, initialFilters);
  }
  return initialFilterState;
};