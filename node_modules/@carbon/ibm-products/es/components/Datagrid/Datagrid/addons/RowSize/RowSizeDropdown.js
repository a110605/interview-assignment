import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["align", "legendText"];
/**
 * Copyright IBM Corp. 2021, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import * as React from 'react';
import PropTypes from 'prop-types';
import { Settings } from '@carbon/react/icons';
import { IconButton, Toggletip, ToggletipContent, ToggletipButton } from '@carbon/react';
import cx from 'classnames';
import RowSizeRadioGroup from './RowSizeRadioGroup';
import { pkg } from '../../../../../settings';
var blockClass = "".concat(pkg.prefix, "--datagrid");
var RowSizeDropdown = function RowSizeDropdown(_ref) {
  var _ref$align = _ref.align,
    align = _ref$align === void 0 ? 'bottom' : _ref$align,
    _ref$legendText = _ref.legendText,
    legendText = _ref$legendText === void 0 ? 'Row height' : _ref$legendText,
    props = _objectWithoutProperties(_ref, _excluded);
  var _React$useState = React.useState(false),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    isOpen = _React$useState2[0],
    setIsOpen = _React$useState2[1];
  return /*#__PURE__*/React.createElement(React.Fragment, null, !isOpen && /*#__PURE__*/React.createElement(IconButton, {
    kind: "ghost",
    align: align,
    onClick: function onClick() {
      return setIsOpen(function (prevOpen) {
        return !prevOpen;
      });
    },
    label: legendText,
    className: cx("".concat(blockClass, "__row-size-button"))
  }, /*#__PURE__*/React.createElement(Settings, {
    size: 16
  })), isOpen && /*#__PURE__*/React.createElement(Toggletip, {
    defaultOpen: true,
    className: "".concat(blockClass, "__row-size-toggle-tip")
  }, /*#__PURE__*/React.createElement(ToggletipButton, {
    className: cx("".concat(blockClass, "__row-size-toggle-tip-button"), "".concat(blockClass, "__row-size-button--open")),
    label: legendText
  }, /*#__PURE__*/React.createElement(Settings, {
    size: 16
  })), /*#__PURE__*/React.createElement(ToggletipContent, {
    className: "".concat(blockClass, "__row-size-toggle-tip-content")
  }, /*#__PURE__*/React.createElement(RowSizeRadioGroup, _extends({}, props, {
    legendText: legendText,
    hideRadioGroup: function hideRadioGroup() {
      setIsOpen(false);
    }
  })))));
};
RowSizeDropdown.propTypes = {
  align: IconButton.propTypes.align,
  datagridName: PropTypes.string,
  legendText: PropTypes.string,
  light: PropTypes.bool,
  onChange: PropTypes.func.isRequired,
  selectedOption: PropTypes.string
};
export default RowSizeDropdown;