/* eslint-disable react/default-props-match-prop-types */
// @flow
/*
 * Licensed Materials - Property of IBM
 * 5724-Q36
 * (c) Copyright IBM Corp. 2021
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

import React, { useRef } from 'react';
import PropTypes from 'prop-types';
import { RadioButtonGroup, RadioButton } from '@carbon/react';
import isArray from 'lodash/isArray';
import { pkg } from '../../../../../settings';
import { useClickOutside } from '../../../../../global/js/hooks';
var blockClass = "".concat(pkg.prefix, "--datagrid");
var RowSizeRadioGroup = function RowSizeRadioGroup(_ref) {
  var rowSizes = _ref.rowSizes,
    selectedOption = _ref.selectedOption,
    datagridName = _ref.datagridName,
    onChange = _ref.onChange,
    hideRadioGroup = _ref.hideRadioGroup,
    legendText = _ref.legendText,
    _ref$rowSizeLabels = _ref.rowSizeLabels,
    rowSizeLabels = _ref$rowSizeLabels === void 0 ? {
      xl: 'Extra large',
      lg: 'Large (default)',
      md: 'Medium',
      sm: 'Small',
      xs: 'Extra small'
    } : _ref$rowSizeLabels;
  var popoverContentRef = useRef();
  useClickOutside(popoverContentRef, function (target) {
    if (target.closest(".".concat(blockClass, "__row-size-button"))) {
      return;
    }
    hideRadioGroup();
  });
  return /*#__PURE__*/React.createElement("div", {
    ref: popoverContentRef,
    className: "".concat(blockClass, "__row-size-dropdown"),
    role: "presentation",
    onClick: function onClick(e) {
      e.stopPropagation();
    }
  }, /*#__PURE__*/React.createElement(RadioButtonGroup, {
    legendText: legendText,
    name: "row-height-group",
    orientation: "vertical",
    defaultSelected: getBackwardCompatibleRowSize(selectedOption),
    onChange: onChange
  }, rowSizes && isArray(rowSizes) && rowSizes.map(function (option) {
    var labelText;
    try {
      labelText = option.labelText || rowSizeLabels[option.value];
    } catch (e) {
      labelText = option.value;
    }
    return /*#__PURE__*/React.createElement(RadioButton, {
      className: "".concat(blockClass, "__row-size-radio-button"),
      key: option.value,
      labelText: labelText,
      value: option.value,
      id: "".concat(datagridName || 'datagrid', "--row-density--").concat(option.value)
    });
  })));
};
var getBackwardCompatibleRowSize = function getBackwardCompatibleRowSize(rowSize) {
  // TODO: deprecate this function in next major release (v8) on carbon-components-react
  var rowSizeMap = {
    tall: 'xl',
    normal: 'lg',
    short: 'sm',
    compact: 'xs'
    // md is a new value
  };

  return rowSizeMap[rowSize] || rowSize;
};
RowSizeRadioGroup.defaultProps = {
  rowSizes: [{
    value: 'xl' // 64
  }, {
    value: 'lg' // 48
  }, {
    value: 'md' // 40
  }, {
    value: 'sm' // 32
  }, {
    value: 'xs' // 24
  }],

  selectedOption: 'lg'
};
RowSizeRadioGroup.propTypes = {
  datagridName: PropTypes.string,
  hideRadioGroup: PropTypes.func.isRequired,
  legendText: PropTypes.string,
  onChange: PropTypes.func.isRequired,
  rowSizeLabels: PropTypes.object,
  rowSizes: PropTypes.array.isRequired,
  selectedOption: PropTypes.string.isRequired
};
export default RowSizeRadioGroup;