import _defineProperty from "@babel/runtime/helpers/defineProperty";
/*
 * Licensed Materials - Property of IBM
 * 5724-Q36
 * (c) Copyright IBM Corp. 2022
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

import React from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import { pkg } from '../../../../../../settings';
var blockClass = "".concat(pkg.prefix, "--datagrid");
export var InlineEditButton = function InlineEditButton(_ref) {
  var _cx, _cx2;
  var label = _ref.label,
    Icon = _ref.renderIcon,
    disabled = _ref.disabled,
    LabelIcon = _ref.labelIcon,
    placeholder = _ref.placeholder,
    nonEditCell = _ref.nonEditCell,
    isActiveCell = _ref.isActiveCell,
    columnConfig = _ref.columnConfig,
    totalInlineEditColumns = _ref.totalInlineEditColumns,
    totalColumns = _ref.totalColumns,
    type = _ref.type;
  var inlineEditColsLessThanHalfOfTotal = totalInlineEditColumns < totalColumns / 2;
  return /*#__PURE__*/React.createElement("div", {
    className: cx("".concat(blockClass, "__inline-edit-button"), (_cx = {}, _defineProperty(_cx, "".concat(blockClass, "__inline-edit-button--disabled"), disabled || nonEditCell), _defineProperty(_cx, "".concat(blockClass, "__inline-edit-button--with-label-icon"), LabelIcon), _defineProperty(_cx, "".concat(blockClass, "__inline-edit-button--non-edit"), nonEditCell), _defineProperty(_cx, "".concat(blockClass, "__inline-edit-button--active"), isActiveCell), _defineProperty(_cx, "".concat(blockClass, "__inline-edit-button--edit-less-than-half-of-total-cols"), inlineEditColsLessThanHalfOfTotal), _defineProperty(_cx, "".concat(blockClass, "__inline-edit-button--").concat(type), type === 'date' || type === 'selection'), _cx)),
    tabIndex: isActiveCell ? 0 : -1,
    "data-disabled": disabled || nonEditCell,
    "aria-disabled": disabled || nonEditCell,
    role: "button",
    title: label
  }, LabelIcon && /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__label-icon")
  }, /*#__PURE__*/React.createElement(LabelIcon, null)), label !== '' ? /*#__PURE__*/React.createElement("span", {
    className: cx("".concat(blockClass, "__inline-edit-button-label"), (_cx2 = {}, _defineProperty(_cx2, "".concat(blockClass, "__inline-edit-button-label-with-icon"), !nonEditCell), _defineProperty(_cx2, "".concat(blockClass, "__defaultStringRenderer--multiline"), columnConfig === null || columnConfig === void 0 ? void 0 : columnConfig.multiLineWrap), _cx2))
  }, label) : /*#__PURE__*/React.createElement("span", {
    className: "".concat(blockClass, "__placeholder")
  }, placeholder), !nonEditCell && Icon && /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__inline-edit-button-icon")
  }, /*#__PURE__*/React.createElement(Icon, null)));
};
InlineEditButton.propTypes = {
  columnConfig: PropTypes.object,
  disabled: PropTypes.bool,
  isActiveCell: PropTypes.bool,
  label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  labelIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
  nonEditCell: PropTypes.bool,
  placeholder: PropTypes.string,
  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
  totalColumns: PropTypes.number,
  totalInlineEditColumns: PropTypes.number,
  type: PropTypes.oneOf(['text', 'number', 'selection', 'date']),
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.node])
};