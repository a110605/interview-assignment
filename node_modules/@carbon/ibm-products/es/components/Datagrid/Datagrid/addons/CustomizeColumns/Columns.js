import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React from 'react';
import PropTypes from 'prop-types';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { Checkbox } from '@carbon/react';
import update from 'immutability-helper';
import { pkg } from '../../../../../settings';
import cx from 'classnames';
import { DraggableItemsList } from './DraggableItemsList';
var blockClass = "".concat(pkg.prefix, "--datagrid");
var getNextIndex = function getNextIndex(array, currentIndex, key) {
  var newIndex = -1;
  if (key === 'ArrowUp') {
    newIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : array.length - 1;
  }
  if (key === 'ArrowDown') {
    newIndex = currentIndex + 1 < array.length ? currentIndex + 1 : 0;
  }
  return newIndex;
};
var Columns = function Columns(_ref) {
  var getVisibleColumnsCount = _ref.getVisibleColumnsCount,
    filterString = _ref.filterString,
    columns = _ref.columns,
    setColumnsObject = _ref.setColumnsObject,
    onSelectColumn = _ref.onSelectColumn,
    assistiveTextInstructionsLabel = _ref.assistiveTextInstructionsLabel,
    assistiveTextDisabledInstructionsLabel = _ref.assistiveTextDisabledInstructionsLabel,
    selectAllLabel = _ref.selectAllLabel,
    isTableSortable = _ref.isTableSortable;
  var _React$useState = React.useState(''),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    ariaRegionText = _React$useState2[0],
    setAriaRegionText = _React$useState2[1];
  var _React$useState3 = React.useState(-1),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    focusIndex = _React$useState4[0],
    setFocusIndex = _React$useState4[1];
  var moveElement = React.useCallback(function (dragIndex, hoverIndex) {
    var dragCard = columns[dragIndex];
    setColumnsObject(update(columns, {
      $splice: [[dragIndex, 1], [hoverIndex, 0, dragCard]]
    }));
  }, [columns, setColumnsObject]);
  return /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__customize-columns-column-list")
  }, /*#__PURE__*/React.createElement(DndProvider, {
    backend: HTML5Backend
  }, /*#__PURE__*/React.createElement("ol", {
    className: "".concat(blockClass, "__customize-columns-column-list--focus"),
    role: "listbox",
    "aria-describedby": "".concat(blockClass, "__customize-columns--instructions"),
    onKeyDown: function onKeyDown(e) {
      var nextIndex = getNextIndex(columns, focusIndex, e.key);
      if (nextIndex >= 0) {
        setFocusIndex(nextIndex);
        e.preventDefault();
        e.stopPropagation();
      }
    },
    tabIndex: 0
  }, /*#__PURE__*/React.createElement("span", {
    "aria-live": "assertive",
    className: "".concat(blockClass, "__shared-ui--assistive-text")
  }, ariaRegionText), /*#__PURE__*/React.createElement("span", {
    id: "".concat(blockClass, "__customize-columns--instructions"),
    className: "".concat(blockClass, "__shared-ui--assistive-text")
  }, filterString.length === 0 ? assistiveTextInstructionsLabel : assistiveTextDisabledInstructionsLabel), /*#__PURE__*/React.createElement("div", {
    id: "".concat(blockClass, "__customize-columns-select-all"),
    className: cx("".concat(blockClass, "__customize-columns-select-all"), _defineProperty({}, "".concat(blockClass, "__customize-columns-select-all--selected"), getVisibleColumnsCount() > 0)),
    selected: getVisibleColumnsCount() > 0
  }, /*#__PURE__*/React.createElement(Checkbox, {
    className: "".concat(blockClass, "__customize-columns-checkbox-wrapper"),
    checked: getVisibleColumnsCount() === columns.length,
    indeterminate: getVisibleColumnsCount() < columns.length && getVisibleColumnsCount() > 0,
    onChange: function onChange() {
      onSelectColumn(columns, getVisibleColumnsCount() !== columns.length);
    },
    id: "".concat(blockClass, "__customization-column-select-all"),
    labelText: selectAllLabel
  })), /*#__PURE__*/React.createElement(DraggableItemsList, {
    columns: columns,
    filterString: filterString,
    focusIndex: focusIndex,
    getNextIndex: getNextIndex,
    isTableSortable: isTableSortable,
    moveElement: moveElement,
    onSelectColumn: onSelectColumn,
    setAriaRegionText: setAriaRegionText,
    setColumnsObject: setColumnsObject,
    setFocusIndex: setFocusIndex
  }))));
};
Columns.propTypes = {
  assistiveTextDisabledInstructionsLabel: PropTypes.string,
  assistiveTextInstructionsLabel: PropTypes.string,
  columns: PropTypes.array.isRequired,
  disabledInstructionsLabel: PropTypes.string,
  filterString: PropTypes.string.isRequired,
  getVisibleColumnsCount: PropTypes.func.isRequired,
  instructionsLabel: PropTypes.string,
  isTableSortable: PropTypes.bool.isRequired,
  onSelectColumn: PropTypes.func.isRequired,
  selectAllLabel: PropTypes.string,
  setColumnStatus: PropTypes.func,
  setColumnsObject: PropTypes.func.isRequired
};
export default Columns;