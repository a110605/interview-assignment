/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { includesResourceKey } from '../../../../DataSpreadsheet/utils/handleMultipleKeys';
import { pkg } from '../../../../../settings';
import { getFocusableElements } from '../../../../../global/js/utils/getFocusableElements';
var blockClass = "".concat(pkg.prefix, "--datagrid");
export var handleMultipleKeys = function handleMultipleKeys(_ref) {
  var usingMac = _ref.usingMac,
    keysPressedList = _ref.keysPressedList,
    dispatch = _ref.dispatch,
    activeCellId = _ref.activeCellId,
    instance = _ref.instance;
  // Resource key and Home
  // Move active cell to first cell in first row and column
  if (includesResourceKey(keysPressedList, usingMac) && keysPressedList.includes('Home')) {
    var scrollElement = document.querySelector("#".concat(instance.tableId, " .").concat(pkg.prefix, "--datagrid__table-container"));
    // Scroll table container to the furthest top left position
    scrollElement.scrollTop = 0;
    scrollElement.scrollLeft = 0;
    dispatch({
      type: 'UPDATE_ACTIVE_CELL_ID',
      payload: 'column-0-row-0'
    });
  }

  // Resource key and End
  // Move active cell to last cell in in the last row and column
  if (includesResourceKey(keysPressedList, usingMac) && keysPressedList.includes('End')) {
    var _instance$rows;
    var totalVisibleColumns = instance.visibleColumns.filter(function (item) {
      return item.id !== 'spacer';
    }).length;
    var totalRows = (_instance$rows = instance.rows) === null || _instance$rows === void 0 ? void 0 : _instance$rows.length;
    var lastCellDataId = "column-".concat(totalVisibleColumns - 1, "-row-").concat(totalRows - 1);
    var lastCellElement = document.querySelector("#".concat(instance.tableId, " .").concat(blockClass, "__table-with-inline-edit [data-cell-id=\"").concat(activeCellId, "\"]"));
    var _scrollElement = document.querySelector("#".concat(instance.tableId, " .").concat(pkg.prefix, "--datagrid__table-container"));
    // Scroll table container to the furthest bottom right position
    _scrollElement.scrollTop = _scrollElement.scrollHeight;
    _scrollElement.scrollLeft = _scrollElement.scrollWidth;
    if (lastCellElement) {
      dispatch({
        type: 'UPDATE_ACTIVE_CELL_ID',
        payload: lastCellDataId
      });
    } else {
      // If a Datagrid component is using virtualized data, it's possible that the last cell
      // has not yet been rendered. In this case, we simply need to wait until the scrollable
      // container has scrolled to the bottom/right most position, then we can dispatch the
      // update active cell id action
      setTimeout(function () {
        dispatch({
          type: 'UPDATE_ACTIVE_CELL_ID',
          payload: lastCellDataId
        });
      }, 250);
    }
  }
  // Shift + Tab
  // This should remove the active grid state
  if ((keysPressedList.includes('ShiftLeft') || keysPressedList.includes('ShiftRight')) && keysPressedList.includes('Tab')) {
    dispatch({
      type: 'REMOVE_GRID_ACTIVE_FOCUS',
      payload: activeCellId
    });
    var tableElement = document.querySelector("#".concat(instance.tableId));
    var datagridFocusableElements = getFocusableElements(tableElement);
    var indexOfTable = datagridFocusableElements.findIndex(function (item) {
      return item instanceof HTMLTableElement;
    });
    if (indexOfTable && Number.isFinite(indexOfTable)) {
      var _datagridFocusableEle;
      (_datagridFocusableEle = datagridFocusableElements[indexOfTable]) === null || _datagridFocusableEle === void 0 ? void 0 : _datagridFocusableEle.focus();
    }
  }
};