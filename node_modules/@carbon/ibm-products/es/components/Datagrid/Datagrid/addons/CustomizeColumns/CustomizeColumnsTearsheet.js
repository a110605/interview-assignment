import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Copyright IBM Corp. 2022, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { isColumnVisible } from './common';
import { TearsheetNarrow } from '../../../../Tearsheet';
import Columns from './Columns';
import Actions from './Actions';
import { pkg } from '../../../../../settings';
import { useCallback } from 'react';
var blockClass = "".concat(pkg.prefix, "--datagrid");
var CustomizeColumnsTearsheet = function CustomizeColumnsTearsheet(_ref) {
  var isOpen = _ref.isOpen,
    setIsTearsheetOpen = _ref.setIsTearsheetOpen,
    onSaveColumnPrefs = _ref.onSaveColumnPrefs,
    columnDefinitions = _ref.columnDefinitions,
    originalColumnDefinitions = _ref.originalColumnDefinitions,
    _ref$customizeTearshe = _ref.customizeTearsheetHeadingLabel,
    customizeTearsheetHeadingLabel = _ref$customizeTearshe === void 0 ? 'Customize columns' : _ref$customizeTearshe,
    _ref$primaryButtonTex = _ref.primaryButtonTextLabel,
    primaryButtonTextLabel = _ref$primaryButtonTex === void 0 ? 'Save' : _ref$primaryButtonTex,
    _ref$secondaryButtonT = _ref.secondaryButtonTextLabel,
    secondaryButtonTextLabel = _ref$secondaryButtonT === void 0 ? 'Cancel' : _ref$secondaryButtonT,
    _ref$instructionsLabe = _ref.instructionsLabel,
    instructionsLabel = _ref$instructionsLabe === void 0 ? 'Select columns to display them. Click and drag the box to reorder the columns. These specifications will be saved and persist if you leave and return to the data table.' : _ref$instructionsLabe,
    _ref$findColumnPlaceh = _ref.findColumnPlaceholderLabel,
    findColumnPlaceholderLabel = _ref$findColumnPlaceh === void 0 ? 'Find column' : _ref$findColumnPlaceh,
    _ref$resetToDefaultLa = _ref.resetToDefaultLabel,
    resetToDefaultLabel = _ref$resetToDefaultLa === void 0 ? 'Reset to default' : _ref$resetToDefaultLa,
    _ref$assistiveTextIns = _ref.assistiveTextInstructionsLabel,
    assistiveTextInstructionsLabel = _ref$assistiveTextIns === void 0 ? 'Press space bar to toggle drag drop mode, use arrow keys to move selected elements.' : _ref$assistiveTextIns,
    _ref$assistiveTextDis = _ref.assistiveTextDisabledInstructionsLabel,
    assistiveTextDisabledInstructionsLabel = _ref$assistiveTextDis === void 0 ? 'Reordering columns are disabled because they are filtered currently.' : _ref$assistiveTextDis,
    _ref$selectAllLabel = _ref.selectAllLabel,
    selectAllLabel = _ref$selectAllLabel === void 0 ? 'Column name' : _ref$selectAllLabel,
    isTableSortable = _ref.isTableSortable;
  var _useState = useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    visibleColumnsCount = _useState2[0],
    setVisibleColumnsCount = _useState2[1];
  var _useState3 = useState(''),
    _useState4 = _slicedToArray(_useState3, 2),
    totalColumns = _useState4[0],
    setTotalColumns = _useState4[1];
  var _useState5 = useState(''),
    _useState6 = _slicedToArray(_useState5, 2),
    searchText = _useState6[0],
    setSearchText = _useState6[1];
  var _useState7 = useState(columnDefinitions
    // only sort the hidden column to the end when modal reopen
    .sort(function (defA, defB) {
      var isVisibleA = isColumnVisible(defA);
      var isVisibleB = isColumnVisible(defB);
      if (isVisibleA && !isVisibleB) {
        return -1;
      }
      if (!isVisibleA && isVisibleB) {
        return 1;
      }
      return 0;
    })),
    _useState8 = _slicedToArray(_useState7, 2),
    columnObjects = _useState8[0],
    setColumnObjects = _useState8[1];
  var _useState9 = useState(false),
    _useState10 = _slicedToArray(_useState9, 2),
    isDirty = _useState10[0],
    setIsDirty = _useState10[1];
  var onRequestClose = function onRequestClose() {
    setIsTearsheetOpen(false);
  };
  var onRequestSubmit = function onRequestSubmit() {
    setIsTearsheetOpen(false);
    var updatedColumns = columnObjects.map(function (colDef) {
      return {
        id: colDef.id,
        isVisible: colDef.isVisible
      };
    });
    onSaveColumnPrefs(updatedColumns);
  };
  var onCheckboxCheck = function onCheckboxCheck(col, value) {
    var changedDefinitions = columnObjects.map(function (definition) {
      if (Array.isArray(col) && col.indexOf(definition) != null || definition.id === col.id) {
        return _objectSpread(_objectSpread({}, definition), {}, {
          isVisible: value
        });
      }
      return definition;
    });
    setColumnObjects(changedDefinitions);
    setDirty();
  };
  var setDirty = function setDirty() {
    if (!isDirty) {
      setIsDirty(true);
    }
  };
  var getVisibleColumnsCount = useCallback(function () {
    return columnObjects.filter(function (col) {
      return col.isVisible;
    }).length;
  }, [columnObjects]);
  var string = searchText.trim().toLowerCase();
  useEffect(function () {
    setVisibleColumnsCount(getVisibleColumnsCount());
    setTotalColumns(columnObjects.length);
  }, [getVisibleColumnsCount, columnObjects.length]);
  return /*#__PURE__*/React.createElement(TearsheetNarrow, {
    className: "".concat(blockClass, "__customize-columns-tearsheet"),
    open: isOpen,
    title: "".concat(customizeTearsheetHeadingLabel, " (").concat(visibleColumnsCount, "/").concat(totalColumns, ")"),
    description: instructionsLabel,
    actions: [{
      kind: 'secondary',
      label: secondaryButtonTextLabel,
      onClick: onRequestClose
    }, {
      kind: 'primary',
      label: primaryButtonTextLabel,
      onClick: onRequestSubmit,
      disabled: !isDirty
    }]
  }, /*#__PURE__*/React.createElement(Actions, {
    columns: columnObjects,
    originalColumnDefinitions: originalColumnDefinitions,
    searchText: searchText,
    setColumnsObject: function setColumnsObject(cols) {
      setColumnObjects(cols);
      setDirty();
    },
    setSearchText: setSearchText,
    findColumnPlaceholderLabel: findColumnPlaceholderLabel,
    resetToDefaultLabel: resetToDefaultLabel
  }), isOpen && /*#__PURE__*/React.createElement(Columns, {
    assistiveTextInstructionsLabel: assistiveTextInstructionsLabel,
    assistiveTextDisabledInstructionsLabel: assistiveTextDisabledInstructionsLabel,
    getVisibleColumnsCount: getVisibleColumnsCount,
    columns: columnObjects,
    filterString: string,
    onSelectColumn: onCheckboxCheck,
    setColumnsObject: function setColumnsObject(cols) {
      setColumnObjects(cols);
      setDirty();
    },
    selectAllLabel: selectAllLabel,
    isTableSortable: isTableSortable
  }));
};
CustomizeColumnsTearsheet.propTypes = {
  assistiveTextDisabledInstructionsLabel: PropTypes.string,
  assistiveTextInstructionsLabel: PropTypes.string,
  columnDefinitions: PropTypes.array.isRequired,
  customizeTearsheetHeadingLabel: PropTypes.string,
  findColumnPlaceholderLabel: PropTypes.string,
  instructionsLabel: PropTypes.string,
  isOpen: PropTypes.bool.isRequired,
  isTableSortable: PropTypes.bool.isRequired,
  onSaveColumnPrefs: PropTypes.func.isRequired,
  originalColumnDefinitions: PropTypes.array.isRequired,
  primaryButtonTextLabel: PropTypes.string,
  resetToDefaultLabel: PropTypes.string,
  secondaryButtonTextLabel: PropTypes.string,
  selectAllLabel: PropTypes.string,
  setIsTearsheetOpen: PropTypes.func.isRequired
};
export default CustomizeColumnsTearsheet;