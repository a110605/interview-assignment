import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React, { createContext, useState } from 'react';
import PropTypes from 'prop-types';
import { DATE, DROPDOWN, NUMBER, RADIO, CHECKBOX } from './constants';
export var FilterContext = /*#__PURE__*/createContext();
var EventEmitter = {
  events: {},
  dispatch: function dispatch(event, data) {
    if (!this.events[event]) {
      return;
    }
    this.events[event].forEach(function (callback) {
      return callback(data);
    });
  },
  subscribe: function subscribe(event, callback) {
    if (!this.events[event]) {
      this.events[event] = [];
    } else {
      this.events[event].push(callback);
    }
  }
};
var prepareFiltersForTags = function prepareFiltersForTags(filters) {
  var tags = [];
  filters.forEach(function (_ref) {
    var id = _ref.id,
      type = _ref.type,
      value = _ref.value;
    if (type === DROPDOWN || type === RADIO || type === NUMBER) {
      tags.push({
        key: id,
        value: value
      });
    } else if (type === DATE) {
      var _value = _slicedToArray(value, 2),
        startDate = _value[0],
        endDate = _value[1];
      tags.push({
        key: id,
        value: "".concat(startDate.toLocaleDateString(), " - ").concat(endDate.toLocaleDateString())
      });
    } else if (type === CHECKBOX) {
      value.forEach(function (checkbox) {
        if (checkbox.selected) {
          tags.push({
            key: id,
            value: checkbox.value
          });
        }
      });
    }
  });
  return tags;
};
export var FilterProvider = function FilterProvider(_ref2) {
  var children = _ref2.children,
    filters = _ref2.filters;
  var filterTags = prepareFiltersForTags(filters);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    panelOpen = _useState2[0],
    setPanelOpen = _useState2[1];
  var value = {
    filterTags: filterTags,
    EventEmitter: EventEmitter,
    panelOpen: panelOpen,
    setPanelOpen: setPanelOpen
  };
  return /*#__PURE__*/React.createElement(FilterContext.Provider, {
    value: value
  }, children);
};
FilterProvider.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,
  filters: PropTypes.arrayOf(PropTypes.object).isRequired
};