import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/*
 * Licensed Materials - Property of IBM
 * 5724-Q36
 * (c) Copyright IBM Corp. 2020
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */
import React from 'react';
import { TableBody } from '@carbon/react';
import cx from 'classnames';
import { pkg } from '../../../settings';
var blockClass = "".concat(pkg.prefix, "--datagrid");
var DatagridSimpleBody = function DatagridSimpleBody(datagridState) {
  var getTableBodyProps = datagridState.getTableBodyProps,
    rows = datagridState.rows,
    prepareRow = datagridState.prepareRow;
  return /*#__PURE__*/React.createElement(TableBody, _extends({}, getTableBodyProps({
    role: false
  }), {
    className: cx("".concat(blockClass, "__simple-body"), getTableBodyProps().className)
  }), rows.map(function (row) {
    prepareRow(row);
    return row.RowRenderer(_objectSpread(_objectSpread({}, datagridState), {}, {
      row: row
    }));
  }));
};
export default DatagridSimpleBody;