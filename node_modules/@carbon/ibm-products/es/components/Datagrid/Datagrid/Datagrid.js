import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["datagridState"];
/**
 * Copyright IBM Corp. 2020, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { getDevtoolsProps } from '../../../global/js/utils/devtools';
import { pkg } from '../../../settings';
import pconsole from '../../../global/js/utils/pconsole';
import { InlineEditProvider } from './addons/InlineEdit/InlineEditContext';
import { DatagridContent } from './DatagridContent';
import { FilterProvider } from './addons/Filtering/FilterProvider';
var blockClass = "".concat(pkg.prefix, "--datagrid");
var componentName = 'Datagrid';
export var Datagrid = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var datagridState = _ref.datagridState,
    rest = _objectWithoutProperties(_ref, _excluded);
  if (!datagridState) {
    pconsole.warn('Datagrid was not passed datagridState which is required to render this component.');
    return null;
  }
  var withVirtualScroll = datagridState.withVirtualScroll,
    DatagridPagination = datagridState.DatagridPagination,
    isFetching = datagridState.isFetching,
    tableId = datagridState.tableId,
    filterProps = datagridState.filterProps,
    className = datagridState.className,
    filters = datagridState.state.filters;
  var rows = DatagridPagination && datagridState.page || datagridState.rows;
  return /*#__PURE__*/React.createElement(FilterProvider, {
    filters: filters
  }, /*#__PURE__*/React.createElement(InlineEditProvider, null, /*#__PURE__*/React.createElement("div", _extends({}, rest, {
    id: tableId,
    ref: ref,
    className: cx(className, blockClass, withVirtualScroll ? "".concat(blockClass, "__datagridWrap") : "".concat(blockClass, "__datagridWrap-simple"), !isFetching && rows.length === 0 ? "".concat(blockClass, "__empty-state") : '')
  }, getDevtoolsProps(componentName)), (filterProps === null || filterProps === void 0 ? void 0 : filterProps.variation) === 'panel' ? /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__datagridWithPanel ").concat(blockClass, "__displayFlex")
  }, /*#__PURE__*/React.createElement(DatagridContent, {
    datagridState: datagridState
  })) : /*#__PURE__*/React.createElement(DatagridContent, {
    datagridState: datagridState
  }))));
});

// Return a placeholder if not released and not enabled by feature flag
Datagrid = pkg.checkComponentEnabled(Datagrid, componentName);

// The display name of the component, used by React. Note that displayName
// is used in preference to relying on function.name.
Datagrid.displayName = componentName;
Datagrid.propTypes = {
  /**
   * The data grid state, much of it being supplied by the useDatagrid hook
   */
  datagridState: PropTypes.object.isRequired
};