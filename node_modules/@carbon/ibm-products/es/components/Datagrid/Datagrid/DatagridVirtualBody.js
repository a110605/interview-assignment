import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/*
 * Licensed Materials - Property of IBM
 * 5724-Q36
 * (c) Copyright IBM Corp. 2020 - 2023
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */
import React, { useEffect } from 'react';
import { VariableSizeList } from 'react-window';
import { TableBody } from '@carbon/react';
import { pkg } from '../../../settings';
import DatagridHead from './DatagridHead';
import { px } from '@carbon/layout';
import { useResizeObserver } from '../../../global/js/hooks/useResizeObserver';
var blockClass = "".concat(pkg.prefix, "--datagrid");
var rowSizeMap = {
  xs: 24,
  sm: 32,
  md: 40,
  lg: 48,
  xl: 64,
  // TODO: deprecate the below values in next major release (v8) on carbon-components-react
  short: 32,
  compact: 24,
  normal: 48,
  tall: 64
};
var defaultRowHeight = rowSizeMap.lg;
var DatagridVirtualBody = function DatagridVirtualBody(datagridState) {
  var _gridRef$current, _gridRef$current2;
  var getTableBodyProps = datagridState.getTableBodyProps,
    rows = datagridState.rows,
    prepareRow = datagridState.prepareRow,
    onScroll = datagridState.onScroll,
    innerListRef = datagridState.innerListRef,
    _datagridState$tableH = datagridState.tableHeight,
    tableHeight = _datagridState$tableH === void 0 ? 400 : _datagridState$tableH,
    virtualHeight = datagridState.virtualHeight,
    listRef = datagridState.listRef,
    rowSize = datagridState.rowSize,
    DatagridPagination = datagridState.DatagridPagination,
    page = datagridState.page,
    handleResize = datagridState.handleResize,
    gridRef = datagridState.gridRef;
  var handleVirtualGridResize = function handleVirtualGridResize() {
    var gridRefElement = gridRef === null || gridRef === void 0 ? void 0 : gridRef.current;
    gridRefElement.style.width = gridRefElement === null || gridRefElement === void 0 ? void 0 : gridRefElement.clientWidth;
  };
  useResizeObserver(gridRef, handleVirtualGridResize);
  var syncScroll = function syncScroll(e) {
    var virtualBody = e.target;
    document.querySelector(".".concat(blockClass, "__head-wrap")).scrollLeft = virtualBody.scrollLeft;
    var spacerColumn = document.querySelector(".".concat(blockClass, "__head-wrap thead th:last-child"));
    spacerColumn.style.width = px(32 + (virtualBody.offsetWidth - virtualBody.clientWidth)); // scrollbar width to header column to fix header alignment
  };

  useEffect(function () {
    handleResize();
  }, [handleResize]);
  var rowHeight = rowSize && rowSizeMap[rowSize] || defaultRowHeight;
  if (listRef && listRef.current) {
    listRef.current.resetAfterIndex(0);
  }
  var visibleRows = DatagridPagination && page || rows;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__head-wrap"),
    style: {
      width: (_gridRef$current = gridRef.current) === null || _gridRef$current === void 0 ? void 0 : _gridRef$current.clientWidth,
      overflow: 'hidden'
    }
  }, /*#__PURE__*/React.createElement(DatagridHead, datagridState)), /*#__PURE__*/React.createElement(TableBody, _extends({}, getTableBodyProps({
    role: false
  }), {
    onScroll: function onScroll(e) {
      return syncScroll(e);
    }
  }), /*#__PURE__*/React.createElement(VariableSizeList, {
    height: virtualHeight || tableHeight,
    itemCount: visibleRows.length,
    itemSize: function itemSize(index) {
      return visibleRows[index].isExpanded ? (visibleRows[index].expandedContentHeight || 0) + rowHeight : rowHeight;
    },
    estimatedItemSize: rowHeight,
    onScroll: onScroll,
    innerRef: innerListRef,
    ref: listRef,
    className: "".concat(blockClass, "__virtual-scrollbar"),
    style: {
      width: (_gridRef$current2 = gridRef.current) === null || _gridRef$current2 === void 0 ? void 0 : _gridRef$current2.clientWidth
    }
  }, function (_ref) {
    var index = _ref.index,
      style = _ref.style;
    var row = visibleRows[index];
    prepareRow(row);
    return /*#__PURE__*/React.createElement("div", {
      style: _objectSpread({}, style)
    }, row.RowRenderer(_objectSpread(_objectSpread({}, datagridState), {}, {
      row: row
    })));
  })));
};
export default DatagridVirtualBody;