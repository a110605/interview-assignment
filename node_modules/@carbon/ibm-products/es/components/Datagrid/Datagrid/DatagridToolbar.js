import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
/**
 * Copyright IBM Corp. 2022, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React, { useEffect, useRef, useState } from 'react';
import { Add, OverflowMenuVertical } from '@carbon/react/icons';
import { TableToolbar, TableBatchActions, TableBatchAction } from '@carbon/react';
import { useResizeObserver } from '../../../global/js/hooks/useResizeObserver';
import { ButtonMenu, ButtonMenuItem } from '../../ButtonMenu';
import { pkg, carbon } from '../../../settings';
import cx from 'classnames';
var blockClass = "".concat(pkg.prefix, "--datagrid");
var DatagridBatchActionsToolbar = function DatagridBatchActionsToolbar(datagridState, width, ref) {
  var _Object$keys;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    displayAllInMenu = _useState2[0],
    setDisplayAllInMenu = _useState2[1];
  var _useState3 = useState(null),
    _useState4 = _slicedToArray(_useState3, 2),
    initialListWidth = _useState4[0],
    setInitialListWidth = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    receivedInitialWidth = _useState6[0],
    setReceivedInitialWidth = _useState6[1];
  var selectedRowIds = datagridState.state.selectedRowIds,
    toggleAllRowsSelected = datagridState.toggleAllRowsSelected,
    toolbarBatchActions = datagridState.toolbarBatchActions,
    setGlobalFilter = datagridState.setGlobalFilter,
    rows = datagridState.rows;
  var totalSelected = (_Object$keys = Object.keys(selectedRowIds || {})) === null || _Object$keys === void 0 ? void 0 : _Object$keys.length;

  // Get initial width of batch actions container,
  // used to measure when all items are put inside
  // the ButtonMenu
  useEffect(function () {
    if (totalSelected === 1 && !receivedInitialWidth) {
      var batchActionListWidth = ref.current.querySelector(".".concat(carbon.prefix, "--action-list")).offsetWidth;
      setInitialListWidth(batchActionListWidth);
      setReceivedInitialWidth(true);
    }
  }, [totalSelected, receivedInitialWidth, ref]);
  useEffect(function () {
    var summaryWidth = ref.current.querySelector(".".concat(carbon.prefix, "--batch-summary")).offsetWidth;
    if (width < summaryWidth + initialListWidth + 32) {
      setDisplayAllInMenu(true);
    } else {
      setDisplayAllInMenu(false);
    }
  }, [width, ref, initialListWidth]);
  var getSelectedRowData = function getSelectedRowData() {
    var selectedRowIndexes = Object.keys(selectedRowIds);
    var selectedRowData = selectedRowIndexes && selectedRowIndexes.length ? selectedRowIndexes.map(function (rowIndex) {
      var filteredRow = rows.filter(function (row) {
        return row.index === parseInt(rowIndex);
      });
      if (filteredRow.length) {
        return filteredRow[0];
      }
      return [];
    }) : [];
    return selectedRowData;
  };

  // Render batch actions in ButtonMenu
  var renderBatchActionOverflow = function renderBatchActionOverflow() {
    var minWidthBeforeOverflowIcon = 380;
    // Do not render ButtonMenu when there are 3 or less items
    // and if there is enough available space to render all the items
    if ((toolbarBatchActions === null || toolbarBatchActions === void 0 ? void 0 : toolbarBatchActions.length) <= 3 && !displayAllInMenu) {
      return null;
    }
    return /*#__PURE__*/React.createElement(ButtonMenu, {
      label: width > minWidthBeforeOverflowIcon ? 'More' : null,
      renderIcon: width > minWidthBeforeOverflowIcon ? Add : OverflowMenuVertical,
      className: cx("".concat(blockClass, "__button-menu"), _defineProperty({}, "".concat(blockClass, "__button-menu--icon-only"), width <= minWidthBeforeOverflowIcon)),
      menuOptionsClass: "".concat(blockClass, "__button-menu-options"),
      flipped: true,
      menuAriaLabel: 'Batch actions'
    }, toolbarBatchActions && toolbarBatchActions.map(function (batchAction, index) {
      if (index < 2) {
        if (displayAllInMenu) {
          return /*#__PURE__*/React.createElement(ButtonMenuItem, {
            key: "".concat(batchAction.label, "-").concat(index),
            itemText: batchAction.label,
            onClick: function onClick(event) {
              batchAction.onClick(getSelectedRowData(), event);
              if (batchAction.type === 'select_all') {
                toggleAllRowsSelected(true);
              }
            }
          });
        }
        return null;
      }
      return /*#__PURE__*/React.createElement(ButtonMenuItem, {
        key: "".concat(batchAction.label, "-").concat(index),
        itemText: batchAction.label,
        onClick: function onClick(event) {
          batchAction.onClick(getSelectedRowData(), event);
          if (batchAction.type === 'select_all') {
            toggleAllRowsSelected(true);
          }
        }
      });
    }));
  };

  // Only display the first two batch actions, the rest are
  // displayed inside of the ButtonMenu if there are more than
  // 3 batch actions
  return /*#__PURE__*/React.createElement(TableBatchActions, {
    shouldShowBatchActions: totalSelected > 0,
    totalSelected: totalSelected,
    onCancel: function onCancel() {
      toggleAllRowsSelected(false);
      setGlobalFilter(null);
    }
  }, !displayAllInMenu && toolbarBatchActions && (toolbarBatchActions === null || toolbarBatchActions === void 0 ? void 0 : toolbarBatchActions.map(function (batchAction, index) {
    if (index < 2 && toolbarBatchActions.length > 3 || index < 3 && toolbarBatchActions.length <= 3) {
      return /*#__PURE__*/React.createElement(TableBatchAction, {
        key: "".concat(batchAction.label, "-").concat(index),
        renderIcon: batchAction.renderIcon,
        onClick: function onClick(event) {
          batchAction.onClick(getSelectedRowData(), event);
          if (batchAction.type === 'select_all') {
            toggleAllRowsSelected(true);
          }
        },
        iconDescription: batchAction.label
      }, batchAction.label);
    }
  })), renderBatchActionOverflow());
};
var DatagridToolbar = function DatagridToolbar(datagridState) {
  var ref = useRef(null);
  var _useResizeObserver = useResizeObserver(ref),
    width = _useResizeObserver.width;
  var DatagridActions = datagridState.DatagridActions,
    DatagridBatchActions = datagridState.DatagridBatchActions,
    batchActions = datagridState.batchActions,
    rowSize = datagridState.rowSize;
  var getRowHeight = rowSize ? rowSize : 'lg';
  return batchActions && DatagridActions ? /*#__PURE__*/React.createElement("div", {
    ref: ref,
    className: cx("".concat(blockClass, "__table-toolbar"), "".concat(blockClass, "__table-toolbar--").concat(getRowHeight))
  }, /*#__PURE__*/React.createElement(TableToolbar, null, DatagridActions && DatagridActions(datagridState), DatagridBatchActionsToolbar && DatagridBatchActionsToolbar(datagridState, width, ref))) : DatagridActions ? /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__table-toolbar")
  }, /*#__PURE__*/React.createElement(TableToolbar, null, DatagridActions && DatagridActions(datagridState), DatagridBatchActions && DatagridBatchActions(datagridState))) : null;
};
export default DatagridToolbar;