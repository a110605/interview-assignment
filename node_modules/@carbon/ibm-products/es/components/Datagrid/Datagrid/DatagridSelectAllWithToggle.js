import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
var _excluded = ["onChange"];
/**
 * Copyright IBM Corp. 2020, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React, { useEffect, useState, useLayoutEffect } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { Checkbox, OverflowMenu, OverflowMenuItem } from '@carbon/react';
import { CaretDown } from '@carbon/react/icons';
import { pkg } from '../../../settings';
// cspell:words columnheader

var blockClass = "".concat(pkg.prefix, "--datagrid");
var SELECT_ALL_PAGE_ROWS = 'pageRows';
var SELECT_ALL_ROWS = 'allRows';
var SelectAllWithToggle = function SelectAllWithToggle(_ref) {
  var _columns$;
  var tableId = _ref.tableId,
    isFetching = _ref.isFetching,
    isAllRowsSelected = _ref.isAllRowsSelected,
    selectAllToggle = _ref.selectAllToggle,
    getToggleAllPageRowsSelectedProps = _ref.getToggleAllPageRowsSelectedProps,
    getToggleAllRowsSelectedProps = _ref.getToggleAllRowsSelectedProps,
    _ref$allPageRowsLabel = _ref.allPageRowsLabel,
    allPageRowsLabel = _ref$allPageRowsLabel === void 0 ? 'Select all on page' : _ref$allPageRowsLabel,
    _ref$allRowsLabel = _ref.allRowsLabel,
    allRowsLabel = _ref$allRowsLabel === void 0 ? 'Select all' : _ref$allRowsLabel,
    columns = _ref.columns,
    withStickyColumn = _ref.withStickyColumn;
  var _ref2 = selectAllToggle || {},
    onSelectAllRows = _ref2.onSelectAllRows,
    labels = _ref2.labels;
  var _useState = useState(SELECT_ALL_PAGE_ROWS),
    _useState2 = _slicedToArray(_useState, 2),
    selectAllMode = _useState2[0],
    setSelectAllMode = _useState2[1];
  useEffect(function () {
    if (onSelectAllRows) {
      onSelectAllRows(isAllRowsSelected && selectAllMode === SELECT_ALL_ROWS);
    }
  }, [isAllRowsSelected, selectAllMode, onSelectAllRows]);
  var _useState3 = useState(window.innerWidth),
    _useState4 = _slicedToArray(_useState3, 2),
    windowSize = _useState4[0],
    setWindowSize = _useState4[1];
  useLayoutEffect(function () {
    function updateSize() {
      setWindowSize(window.innerWidth);
    }
    window.addEventListener('resize', updateSize);
    return function () {
      return window.removeEventListener('resize', updateSize);
    };
  }, []);
  if (labels) {
    allPageRowsLabel = labels.allPageRows || allPageRowsLabel;
    allRowsLabel = labels.allRows || allRowsLabel;
  }
  var getProps = selectAllMode === SELECT_ALL_PAGE_ROWS ? getToggleAllPageRowsSelectedProps : getToggleAllRowsSelectedProps;
  var _getProps = getProps(),
    onChange = _getProps.onChange,
    selectProps = _objectWithoutProperties(_getProps, _excluded);
  var disabled = isFetching || selectProps.disabled;
  var isFirstColumnStickyLeft = ((_columns$ = columns[0]) === null || _columns$ === void 0 ? void 0 : _columns$.sticky) === 'left' && withStickyColumn;
  return /*#__PURE__*/React.createElement("th", {
    role: "columnheader",
    scope: "col",
    className: cx("".concat(blockClass, "__select-all-toggle-on"), _defineProperty({}, "".concat(blockClass, "__select-all-sticky-left"), isFirstColumnStickyLeft && windowSize > 671))
  }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement(Checkbox, _extends({}, selectProps, {
    name: "".concat(tableId, "-select-all-checkbox-name"),
    onClick: function onClick(e) {
      onChange(e);
    },
    disabled: disabled,
    id: "".concat(tableId, "-select-all-checkbox-id"),
    labelText: allRowsLabel,
    hideLabel: true
  }))), /*#__PURE__*/React.createElement(OverflowMenu, {
    renderIcon: function renderIcon(props) {
      return /*#__PURE__*/React.createElement(CaretDown, _extends({
        size: 16
      }, props));
    },
    size: "sm",
    "aria-label": allRowsLabel,
    menuOptionsClass: "".concat(blockClass, "__select-all-toggle-overflow")
  }, /*#__PURE__*/React.createElement(OverflowMenuItem, {
    itemText: allPageRowsLabel,
    requireTitle: true,
    disabled: disabled,
    onClick: function onClick() {
      setSelectAllMode(SELECT_ALL_PAGE_ROWS);
      // deselect all rows first
      getToggleAllRowsSelectedProps().onChange({
        target: {
          checked: false
        }
      });
      // select all row on current page
      getToggleAllPageRowsSelectedProps().onChange({
        target: {
          checked: true
        }
      });
    }
  }), /*#__PURE__*/React.createElement(OverflowMenuItem, {
    itemText: allRowsLabel,
    requireTitle: true,
    disabled: disabled,
    onClick: function onClick() {
      setSelectAllMode(SELECT_ALL_ROWS);
      getToggleAllRowsSelectedProps().onChange({
        target: {
          checked: true
        }
      });
    }
  })));
};
SelectAllWithToggle.propTypes = {
  allPageRowsLabel: PropTypes.string,
  allRowsLabel: PropTypes.string,
  columns: PropTypes.arrayOf(PropTypes.object),
  getToggleAllPageRowsSelectedProps: PropTypes.func.isRequired,
  getToggleAllRowsSelectedProps: PropTypes.func.isRequired,
  isAllRowsSelected: PropTypes.bool.isRequired,
  isFetching: PropTypes.bool,
  selectAllToggle: PropTypes.object,
  tableId: PropTypes.string.isRequired,
  withStickyColumn: PropTypes.bool
};
export default SelectAllWithToggle;