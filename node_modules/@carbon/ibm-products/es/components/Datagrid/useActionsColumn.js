import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["id", "itemText", "onClick", "icon", "shouldHideMenuItem"],
  _excluded2 = ["id", "onClick", "shouldHideMenuItem", "shouldDisableMenuItem", "disabled"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Copyright IBM Corp. 2021, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React, { useEffect } from 'react';
import cx from 'classnames';
import { IconSkeleton, OverflowMenu, OverflowMenuItem } from '@carbon/react';
import { pkg } from '../../settings';
var blockClass = "".concat(pkg.prefix, "--datagrid");
var useActionsColumn = function useActionsColumn(hooks) {
  useEffect(function () {
    pkg.checkReportFeatureEnabled('Datagrid.useActionsColumn');
  }, []);
  var useAttachActionsOnInstance = function useAttachActionsOnInstance(instance) {
    var rowActions = instance.rowActions,
      isFetching = instance.isFetching,
      selectedFlatRows = instance.selectedFlatRows;
    if (rowActions && Array.isArray(rowActions)) {
      var addActionsMenu = function addActionsMenu(props, cellData) {
        var cell = cellData.cell;
        var row = cell.row,
          column = cell.column;
        if (column.isAction) {
          var _cx3;
          return [props, {
            children: /*#__PURE__*/React.createElement("div", {
              className: "".concat(blockClass, "__actions-column-contents")
            }, isFetching && /*#__PURE__*/React.createElement(IconSkeleton, {
              className: "".concat(blockClass, "__actions-column-loading")
            }), !isFetching && rowActions.length <= 2 && /*#__PURE__*/React.createElement("div", {
              className: "".concat(blockClass, "_actions-column"),
              style: {
                display: 'flex'
              }
            }, rowActions.map(function (action, index) {
              var id = action.id,
                itemText = action.itemText,
                _onClick = action.onClick,
                icon = action.icon,
                shouldHideMenuItem = action.shouldHideMenuItem,
                rest = _objectWithoutProperties(action, _excluded);
              var hidden = typeof shouldHideMenuItem === 'function' && shouldHideMenuItem(row);
              if (hidden) {
                return null;
              }
              var selectedRowId = selectedFlatRows === null || selectedFlatRows === void 0 ? void 0 : selectedFlatRows.filter(function (item) {
                return item.id === row.id ? item.id : null;
              });
              return /*#__PURE__*/React.createElement("div", {
                className: cx("".concat(blockClass, "__actions-column-button"), _defineProperty({}, "".concat(blockClass, "__disabled-row-action-button"), selectedFlatRows && selectedFlatRows.length && selectedRowId && selectedRowId.length)),
                key: "".concat(itemText, "__").concat(index)
              }, /*#__PURE__*/React.createElement(OverflowMenu, _extends({}, rest, {
                renderIcon: icon,
                hasIconOnly: true,
                light: true,
                iconDescription: itemText,
                kind: "ghost",
                className: cx(_defineProperty({}, "".concat(blockClass, "__disabled-row-action"), selectedFlatRows && selectedFlatRows.length && selectedRowId && selectedRowId.length)),
                onClick: function onClick(e) {
                  if (selectedFlatRows && selectedFlatRows.length && selectedRowId && selectedRowId.length) {
                    // Row actions should be disabled if row is selected and batchActions toolbar is active
                    return;
                  }
                  e.stopPropagation();
                  _onClick(id, row, e);
                }
              })));
            })), !isFetching && rowActions.length > 2 && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(OverflowMenu, {
              size: "sm",
              light: true,
              flipped: true,
              onClick: function onClick(e) {
                e.stopPropagation();
              }
            }, rowActions.map(function (action) {
              var id = action.id,
                _onClick2 = action.onClick,
                shouldHideMenuItem = action.shouldHideMenuItem,
                shouldDisableMenuItem = action.shouldDisableMenuItem,
                disabled = action.disabled,
                rest = _objectWithoutProperties(action, _excluded2);
              var hidden = typeof shouldHideMenuItem === 'function' && shouldHideMenuItem(row);
              // shouldDisableMenuItem will override disabled because it's more specific
              // if shouldDisableMenuItem doesn't exists, fall back to disabled
              var isDisabledByRow = typeof shouldDisableMenuItem === 'function' ? shouldDisableMenuItem(row) : disabled;
              if (hidden) {
                return null;
              }
              return /*#__PURE__*/React.createElement(OverflowMenuItem, _extends({}, rest, {
                disabled: isDisabledByRow,
                onClick: function onClick(e) {
                  e.stopPropagation();
                  _onClick2(id, row, e);
                },
                key: id
              }));
            })))),
            className: cx((_cx3 = {}, _defineProperty(_cx3, "".concat(blockClass, "__actions-column-cell"), true), _defineProperty(_cx3, "".concat(blockClass, "__cell"), true), _cx3)),
            style: {
              width: rowActions.length > 2 ? 48 : 96
            }
          }];
        }
        return [props];
      };
      hooks.getCellProps.push(addActionsMenu);
    }
  };
  var useStickyHeaderWidth = function useStickyHeaderWidth(instance) {
    var rowActions = instance.rowActions;
    if (rowActions && Array.isArray(rowActions)) {
      var addHeaderWidth = function addHeaderWidth(props, cellData) {
        var column = cellData.column;
        if (column.isAction) {
          return [props, {
            style: _objectSpread(_objectSpread({}, props.style), {}, {
              width: rowActions.length > 2 ? 48 : 96 // set header width based on action length
            })
          }];
        }

        return [props];
      };
      hooks.getHeaderProps.push(addHeaderWidth);
    }
  };
  hooks.useInstance.push(useStickyHeaderWidth);
  hooks.useInstance.push(useAttachActionsOnInstance);
};
export default useActionsColumn;