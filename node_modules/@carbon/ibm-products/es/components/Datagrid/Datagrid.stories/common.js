import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
import React from 'react';
import namor from 'namor';
var range = function range(len) {
  var arr = [];
  for (var i = 0; i < len; i++) {
    arr.push(i);
  }
  return arr;
};
var newPerson = function newPerson() {
  var statusChance = Math.random();
  return {
    firstName: namor.generate({
      words: 1,
      numbers: 0
    }),
    lastName: namor.generate({
      words: 1,
      numbers: 0
    }),
    age: Math.floor(Math.random() * 30),
    visits: Math.floor(Math.random() * 100),
    progress: Math.floor(Math.random() * 100),
    someone1: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone2: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone3: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone4: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone5: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone6: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone7: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone8: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone9: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone10: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone11: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone12: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone13: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone14: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone15: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone16: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone17: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone18: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone19: namor.generate({
      words: 1,
      numbers: 0
    }),
    someone20: namor.generate({
      words: 1,
      numbers: 0
    }),
    status: statusChance > 0.66 ? 'relationship' : statusChance > 0.33 ? 'complicated' : 'single'
  };
};

// eslint-disable-next-line react/prop-types
export var Wrapper = function Wrapper(_ref) {
  var children = _ref.children;
  return /*#__PURE__*/React.createElement("div", {
    style: {
      height: '490px',
      width: '100%',
      padding: '16px',
      margin: '0',
      zIndex: '0'
    }
  }, children);
};
export var makeData = function makeData() {
  for (var _len = arguments.length, lens = new Array(_len), _key = 0; _key < _len; _key++) {
    lens[_key] = arguments[_key];
  }
  var makeDataLevel = function makeDataLevel() {
    var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var len = lens[depth];
    return range(len).map(function () {
      return _objectSpread(_objectSpread({}, newPerson()), {}, {
        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined
      });
    });
  };
  return makeDataLevel();
};
export var defaultHeader = [{
  Header: 'Row Index',
  accessor: function accessor(row, i) {
    return i;
  },
  sticky: 'left'
}, {
  Header: 'First Name',
  accessor: 'firstName',
  sticky: 'left'
}, {
  Header: 'Last Name',
  accessor: 'lastName'
}, {
  Header: 'Age',
  accessor: 'age',
  width: 50
}, {
  Header: 'Visits',
  accessor: 'visits',
  width: 60
}, {
  Header: 'Someone 1',
  accessor: 'someone1'
}, {
  Header: 'Someone 2',
  accessor: 'someone2'
}, {
  Header: 'Someone 3',
  accessor: 'someone3'
}, {
  Header: 'Someone 4',
  accessor: 'someone4'
}, {
  Header: 'Someone 5',
  accessor: 'someone5'
}, {
  Header: 'Someone 6',
  accessor: 'someone6'
}, {
  Header: 'Someone 7',
  accessor: 'someone7'
}, {
  Header: 'Someone 8',
  accessor: 'someone8'
}, {
  Header: 'Someone 9',
  accessor: 'someone9'
}, {
  Header: 'Someone 10',
  accessor: 'someone10'
}];