import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["value1", "setValue1"];
/* eslint-disable react/prop-types */
/**
 * Copyright IBM Corp. 2021, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import React, { useState } from 'react';
import { Button, Column, Grid, InlineNotification, RadioButtonGroup, RadioButton, TextInput, Toggle, NumberInput, Checkbox } from '@carbon/react';
import cx from 'classnames';
import { pkg } from '../../../settings';
import { CreateTearsheet } from '../CreateTearsheet';
import { CreateTearsheetStep } from '../CreateTearsheetStep';
var blockClass = "".concat(pkg.prefix, "--tearsheet-create-multi-step");
var CustomStep = function CustomStep(_ref) {
  var value1 = _ref.value1,
    setValue1 = _ref.setValue1,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(CreateTearsheetStep, _extends({}, rest, {
    disableSubmit: !value1
  }), /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Column, {
    xlg: 8,
    lg: 8,
    md: 8,
    sm: 4
  }, /*#__PURE__*/React.createElement(TextInput, {
    value: value1,
    onChange: function onChange(event) {
      return setValue1(event.target.value);
    },
    id: "custom-step-input",
    labelText: "Location",
    placeholder: "Enter location"
  }))));
};
export var MultiStepTearsheet = function MultiStepTearsheet(_ref2) {
  var backButtonText = _ref2.backButtonText,
    cancelButtonText = _ref2.cancelButtonText,
    className = _ref2.className,
    description = _ref2.description,
    firstFocusElement = _ref2.firstFocusElement,
    influencerWidth = _ref2.influencerWidth,
    label = _ref2.label,
    nextButtonText = _ref2.nextButtonText,
    submitButtonText = _ref2.submitButtonText,
    title = _ref2.title;
  var _useState = useState(750),
    _useState2 = _slicedToArray(_useState, 1),
    simulatedDelay = _useState2[0];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    open = _useState4[0],
    setOpen = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    shouldReject = _useState6[0],
    setShouldReject = _useState6[1];
  var _useState7 = useState(false),
    _useState8 = _slicedToArray(_useState7, 2),
    hasSubmitError = _useState8[0],
    setHasSubmitError = _useState8[1];
  var _useState9 = useState(''),
    _useState10 = _slicedToArray(_useState9, 2),
    value1 = _useState10[0],
    setValue1 = _useState10[1];
  var _useState11 = useState(''),
    _useState12 = _slicedToArray(_useState11, 2),
    stepOneTextInputValue = _useState12[0],
    setStepOneTextInputValue = _useState12[1];
  var _useState13 = useState(''),
    _useState14 = _slicedToArray(_useState13, 2),
    topicDescriptionValue = _useState14[0],
    setTopicDescriptionValue = _useState14[1];
  var _useState15 = useState(''),
    _useState16 = _slicedToArray(_useState15, 2),
    topicVersionValue = _useState16[0],
    setTopicVersionValue = _useState16[1];
  var _useState17 = useState(1),
    _useState18 = _slicedToArray(_useState17, 2),
    stepTwoTextInputValue = _useState18[0],
    setStepTwoTextInputValue = _useState18[1];
  var _useState19 = useState('one-day'),
    _useState20 = _slicedToArray(_useState19, 2),
    stepThreeTextInputValue = _useState20[0],
    setStepThreeTextInputValue = _useState20[1];
  var _useState21 = useState(false),
    _useState22 = _slicedToArray(_useState21, 2),
    isInvalid = _useState22[0],
    setIsInvalid = _useState22[1];
  var _useState23 = useState(false),
    _useState24 = _slicedToArray(_useState23, 2),
    shouldIncludeAdditionalStep = _useState24[0],
    setShouldIncludeAdditionalStep = _useState24[1];
  var clearCreateData = function clearCreateData() {
    setStepOneTextInputValue('');
    setTopicDescriptionValue('');
    setTopicVersionValue('');
    setStepTwoTextInputValue(1);
    setStepThreeTextInputValue('one-day');
    setHasSubmitError(false);
    setIsInvalid(false);
    setOpen(false);
    setValue1('');
    setShouldIncludeAdditionalStep(false);
  };
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("style", null, ".".concat(blockClass, " { opacity: 0 }"), ";"), /*#__PURE__*/React.createElement(Button, {
    onClick: function onClick() {
      return setOpen(!open);
    }
  }, open ? 'Close CreateTearsheet' : 'Open CreateTearsheet'), /*#__PURE__*/React.createElement(CreateTearsheet, {
    influencerWidth: influencerWidth,
    label: label,
    className: cx(blockClass, className),
    submitButtonText: submitButtonText,
    cancelButtonText: cancelButtonText,
    backButtonText: backButtonText,
    nextButtonText: nextButtonText,
    description: description,
    title: title,
    open: open,
    onClose: clearCreateData,
    onRequestSubmit: function onRequestSubmit() {
      return new Promise(function (resolve) {
        setTimeout(function () {
          clearCreateData();
          resolve();
        }, simulatedDelay);
      });
    },
    firstFocusElement: firstFocusElement
  }, /*#__PURE__*/React.createElement(CreateTearsheetStep, {
    onNext: function onNext() {
      return new Promise(function (resolve, reject) {
        setTimeout(function () {
          // Example usage of how to prevent the next step if some kind
          // of error occurred during the `onNext` handler.
          if (shouldReject) {
            setHasSubmitError(true);
            reject();
          }
          setIsInvalid(false);
          resolve();
        }, simulatedDelay);
      });
    },
    title: "Topic name",
    fieldsetLegendText: "Topic information",
    disableSubmit: !stepOneTextInputValue,
    subtitle: "This is the unique name used to recognize your topic",
    description: "It will also be used by your producers and consumers as part of the connection information, so make it something easy to recognize."
  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Column, {
    xlg: 8,
    lg: 8,
    md: 8,
    sm: 4
  }, /*#__PURE__*/React.createElement(TextInput, {
    labelText: "Topic name",
    placeholder: "Enter topic name",
    id: "tearsheet-multi-step-story-text-input-multi-step-1",
    value: stepOneTextInputValue,
    onChange: function onChange(event) {
      if (event.target.value.length) {
        setIsInvalid(false);
      }
      setStepOneTextInputValue(event.target.value);
    },
    invalid: isInvalid,
    invalidText: "This is a required field",
    onBlur: function onBlur() {}
  }), /*#__PURE__*/React.createElement(TextInput, {
    labelText: "Topic description (optional)",
    id: "tearsheet-multi-step-story-text-input-multi-step-1-input-2",
    value: topicDescriptionValue,
    placeholder: "Enter topic description",
    onChange: function onChange(event) {
      return setTopicDescriptionValue(event.target.value);
    }
  }), /*#__PURE__*/React.createElement(TextInput, {
    labelText: "Topic version (optional)",
    id: "tearsheet-multi-step-story-text-input-multi-step-1-input-3",
    value: topicVersionValue,
    placeholder: "Enter topic version",
    onChange: function onChange(event) {
      return setTopicVersionValue(event.target.value);
    }
  }), hasSubmitError && /*#__PURE__*/React.createElement(InlineNotification, {
    kind: "error",
    title: "Error",
    subtitle: "Resolve errors to continue",
    onClose: function onClose() {
      return setHasSubmitError(false);
    }
  }), /*#__PURE__*/React.createElement(Toggle, {
    className: "".concat(blockClass, "__error--toggle"),
    id: "simulated-error-toggle",
    size: "sm",
    labelText: "Simulate error",
    onToggle: function onToggle(event) {
      return setShouldReject(event);
    }
  }), /*#__PURE__*/React.createElement(Checkbox, {
    labelText: "Include additional step",
    id: "include-additional-step-checkbox",
    onChange: function onChange(value) {
      return setShouldIncludeAdditionalStep(value);
    },
    checked: shouldIncludeAdditionalStep
  })))), /*#__PURE__*/React.createElement(CreateTearsheetStep, {
    title: "Dynamic step",
    subtitle: "Dynamic step subtitle",
    description: "This is an example showing how to include a dynamic step into the CreateTearsheet",
    hasFieldset: false,
    includeStep: shouldIncludeAdditionalStep
  }, "dynamic step content"), /*#__PURE__*/React.createElement(CustomStep, {
    title: "Location",
    subtitle: "Custom step subtitle",
    description: "Custom step description (see storybook implementation for new custom step capability)",
    value1: value1,
    setValue1: setValue1,
    hasFieldset: false
  }), /*#__PURE__*/React.createElement(CreateTearsheetStep, {
    title: "Partitions",
    disableSubmit: !stepTwoTextInputValue,
    subtitle: "One or more partitions make up a topic. A partition is an ordered list of messages.",
    description: "Partitions are distributed across the brokers in order to increase the scalability of your topic. You can also use them to distribute messages across the members of a consumer group.",
    fieldsetLegendText: "Partition information"
  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Column, {
    xlg: 3,
    lg: 3,
    md: 8,
    sm: 4
  }, /*#__PURE__*/React.createElement(NumberInput, {
    iconDescription: "Choose a number",
    id: "carbon-number",
    min: 1,
    max: 100,
    value: stepTwoTextInputValue,
    label: "Partitions",
    helperText: "1 partition is sufficient for getting started but, production systems often have more.",
    invalidText: "Max partitions is 100, min is 1",
    onChange: function onChange(event) {
      return setStepTwoTextInputValue(event.imaginaryTarget.value);
    }
  })))), /*#__PURE__*/React.createElement(CreateTearsheetStep, {
    title: "Message retention",
    disableSubmit: !stepThreeTextInputValue,
    onNext: function onNext() {
      return Promise.resolve();
    },
    subtitle: "This is how long messages are retained before they are deleted.",
    description: "If your messages are not read by a consumer within this time, they will be missed.",
    fieldsetLegendText: "Message retention scheduling"
  }, /*#__PURE__*/React.createElement(Grid, null, /*#__PURE__*/React.createElement(Column, {
    xlg: 8,
    lg: 8,
    md: 8,
    sm: 4
  }, /*#__PURE__*/React.createElement(RadioButtonGroup, {
    legendText: "Message retention",
    name: "radio-button-group",
    defaultSelected: stepThreeTextInputValue,
    onChange: function onChange(value) {
      return setStepThreeTextInputValue(value);
    },
    orientation: "vertical"
  }, /*#__PURE__*/React.createElement(RadioButton, {
    labelText: "A day",
    value: "one-day",
    id: "one-day"
  }), /*#__PURE__*/React.createElement(RadioButton, {
    labelText: "A week",
    value: "one-week",
    id: "one-week"
  }), /*#__PURE__*/React.createElement(RadioButton, {
    labelText: "A month",
    value: "one-month",
    id: "one-month"
  })))))));
};