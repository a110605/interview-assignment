import React from 'react';
import { StoryDocsPage } from '../../global/js/utils/StoryDocsPage';
import * as stories from './CreateTearsheet.stories';
var DocsPage = function DocsPage() {
  return /*#__PURE__*/React.createElement(StoryDocsPage, {
    altGuidelinesHref: "https://pages.github.ibm.com/cdai-design/pal/patterns/creation-flows/usage#wide-tearsheet",
    blocks: [{
      story: stories.multiStepTearsheet,
      description: "This is used when you have one section per step. This can be created by passing\nin the overall `<CreateTearsheet />` component and the `<CreateTearsheetStep />`\ncomponent with form items as children:",
      source: {
        code: "    <CreateTearsheet {...props}>\n      <CreateTearsheetStep\n          title=\"Required title\"\n          subtitle=\"Optional subtitle\"\n          description=\"Optional description\"\n          onNext={() => {'Optional function'}}\n          disableSubmit={}\n          >\n        <TextInput\n          id=\"test-1\"\n          invalidText=\"A valid value is required\"\n          labelText=\"Topic name\"\n          placeholder=\"Enter topic name\"\n        />\n      </CreateTearsheetStep>\n    </CreateTearsheet>"
      }
    }, {
      title: 'Using custom components',
      description: "It is possible to use custom components that return `CreateTearsheetStep`s in\norder to help reduce the amount of logic in the component that contains the main\n`CreateTearsheet`. _It is required that each child of the `CreateTearsheet`\neither be a custom step or a `CreateTearsheetStep`_. An example of this could\nlook like the following:",
      source: {
        code: "const CreateStepCustom = ({ subtitle, ...rest }) => {\n  return (\n    <CreateTearsheetStep\n      {...rest}\n      subtitle={subtitle}\n      title=\"Step 1\"\n      onNext={() => console.log('optional validation check')}\n      onMount={() => console.log('optional onMount fn')}\n      disableSubmit={false}\n    >\n      step content here\n    </CreateTearsheetStep>\n  );\n};\n\nconst CreateComponent = () => {\n  return (\n    <CreateTearsheet {...createTearsheetProps}>\n      <CreateStepCustom subtitle=\"Custom step subtitle\" />\n      <CreateTearsheetStep\n        title=\"Topic name\"\n        fieldsetLegendText=\"Topic information\"\n        disableSubmit={!value}\n        subtitle=\"This is the unique name used to recognize your topic\"\n        description=\"It will also be used by your producers and consumers as part of the\n        connection information, so make it something easy to recognize.\"\n      >\n        Content for second step\n      </CreateTearsheetStep>\n    </CreateTearsheet>\n  );\n};"
      }
    }, {
      title: 'Using dynamic steps',
      description: "The use of dynamic steps can be utilized in a scenario when the user makes a\ncertain selection on one step that effects which steps will follow it, this is\ncontrolled via the `includeStep` prop. See abbreviated example below:",
      code: "import { useState } from 'react';\n\nconst CreateFlow = () => {\n  const [shouldIncludeAdditionalStep, setShouldIncludeAdditionalStep] =\n    useState(false);\n  return (\n    <CreateTearsheet {...createTearsheetProps}>\n      <CreateTearsheetStep {...step1Props}>\n        Step 1 content\n        <Checkbox\n          labelText={`Include additional step`}\n          id=\"include-additional-step-checkbox\"\n          onChange={(value) => setShouldIncludeAdditionalStep(value)}\n          checked={shouldIncludeAdditionalStep}\n        />\n      </CreateTearsheetStep>\n      <CreateTearsheetStep\n        {...step2Props}\n        includeStep={shouldIncludeAdditionalStep}\n      >\n        Dynamic step content\n      </CreateTearsheetStep>\n      <CreateTearsheetStep {...step3Props}>\n        Final step content\n      </CreateTearsheetStep>\n    </CreateTearsheet>\n  );\n};"
    }, {
      title: 'Class names',
      description: "Additionally, to get the preferred styling when including your own children as\nsections, you can utilize the below included class names.\n\n| Class name                                            | Element     | Features                                                   |\n| ----------------------------------------------------- | ----------- | ---------------------------------------------------------- |\n| `#{$pkg-prefix}--create-tearsheet__step--title`       | title       | `productive-heading-04` & `margin-bottom` of `$spacing-05` |\n| `#{$pkg-prefix}--create-tearsheet__step--subtitle`    | subtitle    | `productive-heading-01` & `margin-bottom` of `$spacing-03` |\n| `#{$pkg-prefix}--create-tearsheet__step--description` | description | `body-long-01` & `margin-bottom` of `$spacing-06`          |\n| `#{$pkg-prefix}--create-tearsheet__step--fieldset`    | fieldset    | `margin-bottom` of `$spacing-05` to all children elements  |\n| `#{$pkg-prefix}--create-tearsheet__section--divider`  | divider     | Includes a `1px` divider line inside the `main` content    |\n"
    }]
  });
};
export default DocsPage;