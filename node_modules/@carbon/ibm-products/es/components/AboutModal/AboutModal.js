import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["additionalInfo", "className", "closeIconDescription", "copyrightText", "content", "links", "logo", "modalAriaLabel", "onClose", "open", "title", "version"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Copyright IBM Corp. 2020, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Import portions of React that are needed.
import React, { useState, useRef, useEffect } from 'react';
import { useResizeObserver } from '../../global/js/hooks/useResizeObserver';

// Other standard imports.
import PropTypes from 'prop-types';
import cx from 'classnames';
import { pkg } from '../../settings';
import uuidv4 from '../../global/js/utils/uuidv4';
import { getDevtoolsProps } from '../../global/js/utils/devtools';

// Carbon and package components we use.
import { ComposedModal, ModalHeader, ModalFooter, ModalBody, Theme } from '@carbon/react';

// The block part of our conventional BEM class names (blockClass__E--M).
var blockClass = "".concat(pkg.prefix, "--about-modal");
var componentName = 'AboutModal';

// NOTE: the component SCSS is not imported here: it is rolled up separately.

/**
 * The `AboutModal` component provides a way to communicate product information
 * to users. It is triggered by a userâ€™s action, appears on top of the main
 * page content, and is persistent until dismissed. The purpose of this modal
 * should be immediately apparent to the user, with a clear and obvious path
 * to completion.
 */
export var AboutModal = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var additionalInfo = _ref.additionalInfo,
    className = _ref.className,
    closeIconDescription = _ref.closeIconDescription,
    copyrightText = _ref.copyrightText,
    content = _ref.content,
    links = _ref.links,
    logo = _ref.logo,
    modalAriaLabel = _ref.modalAriaLabel,
    onClose = _ref.onClose,
    open = _ref.open,
    title = _ref.title,
    version = _ref.version,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(true),
    _useState2 = _slicedToArray(_useState, 2),
    hasScrollingContent = _useState2[0],
    setHasScrollingContent = _useState2[1];
  var bodyRef = useRef();
  var contentRef = useRef();
  var contentId = uuidv4();
  var handleResize = function handleResize() {
    setHasScrollingContent(
    // if our scroll height exceeds the client height enable scrolling
    bodyRef.current.clientHeight < (hasScrollingContent ?
    // Carbon modal adds 32px bottom margin when scrolling content is enabled
    bodyRef.current.scrollHeight - 32 : bodyRef.current.scrollHeight));
  };

  // We can't add a ref directly to the ModalBody, so track it in a ref
  // as the parent of the current bodyRef element
  useEffect(function () {
    bodyRef.current = contentRef.current.parentElement;
  }, [bodyRef]);

  // Detect resize of the ModalBody to recalculate whether scrolling is enabled
  useResizeObserver(bodyRef, handleResize);
  return /*#__PURE__*/React.createElement(ComposedModal, _extends({}, rest, {
    className: cx(blockClass,
    // Apply the block class to the main HTML element
    className // Apply any supplied class names to the main HTML element.
    ),

    "aria-label": modalAriaLabel
  }, _objectSpread({
    onClose: onClose,
    open: open,
    ref: ref
  }, getDevtoolsProps(componentName))), /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__logo")
  }, logo), /*#__PURE__*/React.createElement(ModalHeader, {
    className: "".concat(blockClass, "__header"),
    closeModal: onClose,
    iconDescription: closeIconDescription,
    label: title,
    labelClassName: "".concat(blockClass, "__title")
  }), /*#__PURE__*/React.createElement(ModalBody, {
    "aria-label": hasScrollingContent ? '' : null,
    "aria-labelledby": hasScrollingContent ? contentId : null,
    className: "".concat(blockClass, "__body"),
    hasScrollingContent: hasScrollingContent
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__body-content"),
    ref: contentRef,
    id: contentId
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__version")
  }, version), links && links.length > 0 && /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__links-container")
  }, links.map(function (link, i) {
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: i
    }, link);
  })), content && /*#__PURE__*/React.createElement("p", {
    className: "".concat(blockClass, "__content")
  }, content), copyrightText && /*#__PURE__*/React.createElement("p", {
    className: "".concat(blockClass, "__copyright-text")
  }, copyrightText))), additionalInfo && /*#__PURE__*/React.createElement(Theme, {
    theme: "g100"
  }, /*#__PURE__*/React.createElement(ModalFooter, {
    className: "".concat(blockClass, "__footer")
  }, additionalInfo)));
});

// Return a placeholder if not released and not enabled by feature flag
AboutModal = pkg.checkComponentEnabled(AboutModal, componentName);
AboutModal.displayName = componentName;

// The types and DocGen commentary for the component props,
// in alphabetical order (for consistency).
// See https://www.npmjs.com/package/prop-types#usage.
AboutModal.propTypes = {
  /**
   * If you are legally required to display logos of technologies used
   * to build your product you can provide this in the additionalInfo.
   * Additional information will be displayed in the footer.
   */
  additionalInfo: PropTypes.node,
  /**
   * Provide an optional class to be applied to the modal root node.
   */
  className: PropTypes.string,
  /**
   * The accessibility title for the close icon.
   */
  closeIconDescription: PropTypes.string.isRequired,
  /**
   * Subhead text providing any relevant product disclaimers including
   * legal information (optional)
   */
  content: PropTypes.node,
  /**
   * Trademark and copyright information. Displays first year of
   * product release to current year.
   */
  copyrightText: PropTypes.string.isRequired,
  /**
   * An array of Carbon `Link` component if there are additional information
   * to call out within the card. The about modal should be used to display
   * the product information and not where users go to find help (optional)
   */
  links: PropTypes.arrayOf(PropTypes.element),
  /**
   * A visual symbol used to represent the product.
   */
  logo: PropTypes.node.isRequired,
  /**
   * Specifies aria label for AboutModal
   */
  modalAriaLabel: PropTypes.string,
  /**
   * Specifies an optional handler which is called when the AboutModal
   * is closed. Returning `false` prevents the AboutModal from closing.
   */
  onClose: PropTypes.func,
  /**
   * Specifies whether the AboutModal is open or not.
   */
  open: PropTypes.bool,
  /**
   * Header text that provides the product name. The IBM Services logo
   * consists of two discrete, but required, elements: the iconic
   * IBM 8-bar logo represented alongside the IBM Services logotype.
   * Please follow these guidelines to ensure proper execution.
   */
  title: PropTypes.node.isRequired,
  /**
   * Text that provides information on the version number of your product.
   */
  version: PropTypes.string.isRequired
};