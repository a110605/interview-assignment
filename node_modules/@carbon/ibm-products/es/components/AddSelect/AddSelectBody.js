import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["className", "clearFiltersText", "closeIconDescription", "columnInputPlaceholder", "defaultModifiers", "description", "filterByLabel", "globalFilterOpts", "globalFiltersLabel", "globalFiltersIconDescription", "globalFiltersPlaceholderText", "globalFiltersPrimaryButtonText", "globalFiltersSecondaryButtonText", "globalSearchLabel", "globalSearchPlaceholder", "globalSortBy", "illustrationTheme", "influencerTitle", "items", "itemsLabel", "metaIconDescription", "metaPanelTitle", "multi", "navIconDescription", "noResultsDescription", "noResultsTitle", "noSelectionDescription", "noSelectionTitle", "normalizedItems", "onClose", "onCloseButtonText", "onSubmit", "onSubmitButtonText", "open", "portalTarget", "searchResultsTitle", "sortByLabel", "title", "useNormalizedItems"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
//
// Copyright IBM Corp. 2022, 2022
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

import React, { forwardRef, useState } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { Tag } from '@carbon/react';
import { Tearsheet, TearsheetNarrow } from '../../components/Tearsheet';
import { NotFoundEmptyState } from '../EmptyStates/NotFoundEmptyState';
import { AddSelectSidebar } from './AddSelectSidebar';
import { AddSelectBreadcrumbs } from './AddSelectBreadcrumbs';
import { AddSelectList } from './AddSelectList';
import { AddSelectColumn } from './AddSelectColumn';
import { AddSelectFilter } from './AddSelectFilter';
import { AddSelectSort } from './AddSelectSort';
import { sortItems, getFilteredItems } from './add-select-utils';
import { useItemSort } from './hooks/useItemSort';
import useParentSelect from './hooks/useParentSelect';
import usePath from './hooks/usePath';
import { pkg } from '../../settings';
var blockClass = "".concat(pkg.prefix, "--add-select");
var componentName = 'AddSelectBody';
export var AddSelectBody = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var _cx, _path$;
  var className = _ref.className,
    clearFiltersText = _ref.clearFiltersText,
    closeIconDescription = _ref.closeIconDescription,
    columnInputPlaceholder = _ref.columnInputPlaceholder,
    defaultModifiers = _ref.defaultModifiers,
    description = _ref.description,
    filterByLabel = _ref.filterByLabel,
    globalFilterOpts = _ref.globalFilterOpts,
    globalFiltersLabel = _ref.globalFiltersLabel,
    globalFiltersIconDescription = _ref.globalFiltersIconDescription,
    globalFiltersPlaceholderText = _ref.globalFiltersPlaceholderText,
    globalFiltersPrimaryButtonText = _ref.globalFiltersPrimaryButtonText,
    globalFiltersSecondaryButtonText = _ref.globalFiltersSecondaryButtonText,
    globalSearchLabel = _ref.globalSearchLabel,
    globalSearchPlaceholder = _ref.globalSearchPlaceholder,
    globalSortBy = _ref.globalSortBy,
    illustrationTheme = _ref.illustrationTheme,
    influencerTitle = _ref.influencerTitle,
    items = _ref.items,
    itemsLabel = _ref.itemsLabel,
    metaIconDescription = _ref.metaIconDescription,
    metaPanelTitle = _ref.metaPanelTitle,
    multi = _ref.multi,
    navIconDescription = _ref.navIconDescription,
    noResultsDescription = _ref.noResultsDescription,
    noResultsTitle = _ref.noResultsTitle,
    noSelectionDescription = _ref.noSelectionDescription,
    noSelectionTitle = _ref.noSelectionTitle,
    normalizedItems = _ref.normalizedItems,
    onClose = _ref.onClose,
    onCloseButtonText = _ref.onCloseButtonText,
    onSubmit = _ref.onSubmit,
    onSubmitButtonText = _ref.onSubmitButtonText,
    open = _ref.open,
    portalTarget = _ref.portalTarget,
    searchResultsTitle = _ref.searchResultsTitle,
    sortByLabel = _ref.sortByLabel,
    title = _ref.title,
    useNormalizedItems = _ref.useNormalizedItems,
    rest = _objectWithoutProperties(_ref, _excluded);
  // hooks
  var _useState = useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    singleSelection = _useState2[0],
    setSingleSelection = _useState2[1];
  var _useState3 = useState([]),
    _useState4 = _slicedToArray(_useState3, 2),
    multiSelection = _useState4[0],
    setMultiSelection = _useState4[1];
  var _useState5 = useState(''),
    _useState6 = _slicedToArray(_useState5, 2),
    searchTerm = _useState6[0],
    setSearchTerm = _useState6[1];
  var _useState7 = useState({}),
    _useState8 = _slicedToArray(_useState7, 2),
    appliedGlobalFilters = _useState8[0],
    setAppliedGlobalFilters = _useState8[1];
  var _useState9 = useState({}),
    _useState10 = _slicedToArray(_useState9, 2),
    displayMetalPanel = _useState10[0],
    setDisplayMetaPanel = _useState10[1];
  var _useState11 = useState(defaultModifiers),
    _useState12 = _slicedToArray(_useState11, 2),
    appliedModifiers = _useState12[0],
    setAppliedModifiers = _useState12[1];
  var _useItemSort = useItemSort(),
    sortDirection = _useItemSort.sortDirection,
    setSortDirection = _useItemSort.setSortDirection,
    sortAttribute = _useItemSort.sortAttribute,
    setSortAttribute = _useItemSort.setSortAttribute;
  var _useParentSelect = useParentSelect(),
    parentSelected = _useParentSelect.parentSelected,
    setParentSelected = _useParentSelect.setParentSelected;
  var _usePath = usePath(itemsLabel),
    path = _usePath.path,
    setPath = _usePath.setPath,
    pathOnclick = _usePath.pathOnclick,
    resetPath = _usePath.resetPath;
  var resetState = function resetState() {
    setSingleSelection('');
    setMultiSelection([]);
    setSearchTerm('');
    setAppliedGlobalFilters({});
    setDisplayMetaPanel({});
    setAppliedModifiers(defaultModifiers);
    setSortAttribute('');
    setSortDirection('');
    setParentSelected(null);
    resetPath();
  };
  var onCloseHandler = function onCloseHandler() {
    resetState();
    onClose();
  };
  var tearsheetClassnames = cx(className, blockClass, (_cx = {}, _defineProperty(_cx, "".concat(blockClass, "__single"), !multi), _defineProperty(_cx, "".concat(blockClass, "__multi"), multi), _cx));
  var globalFilterKeys = Object.keys(appliedGlobalFilters);
  var globalFiltersApplied = globalFilterKeys.length > 0;

  // handlers
  var handleSearch = function handleSearch(term) {
    setSearchTerm(term);
  };
  var handleFilter = function handleFilter(filters) {
    setAppliedGlobalFilters(filters);
  };
  var submitHandler = function submitHandler() {
    if (multi && appliedModifiers.length > 0) {
      var selections = multiSelection.map(function (item) {
        return appliedModifiers.find(function (mod) {
          return mod.id === item;
        });
      });
      onSubmit(selections);
    } else if (multi && appliedModifiers.length === 0) {
      onSubmit(multiSelection);
    } else {
      onSubmit(singleSelection);
    }
    onCloseHandler();
  };
  var setShowBreadsCrumbs = function setShowBreadsCrumbs() {
    if (useNormalizedItems === false || searchTerm || globalFiltersApplied) {
      return false;
    }
    return true;
  };
  var setShowTags = function setShowTags() {
    if (searchTerm) {
      return true;
    }
    if (useNormalizedItems && multi) {
      return false;
    }
    return true;
  };
  var parentSelectionHandler = function parentSelectionHandler(id, title, parentId) {
    setParentSelected(id);
    setPath(id, title, parentId);
  };
  var sortFn = sortItems(sortAttribute, sortDirection);
  var itemsToDisplay = getFilteredItems(useNormalizedItems, normalizedItems, searchTerm, globalFiltersApplied, globalFilterKeys, appliedGlobalFilters, sortFn, multi, items, path);
  var hasResults = itemsToDisplay.length > 0;
  var showBreadsCrumbs = setShowBreadsCrumbs();
  var showSort = (searchTerm || globalFiltersApplied) && hasResults;
  var showTags = setShowTags();
  var commonListProps = {
    displayMetalPanel: displayMetalPanel,
    metaIconDescription: metaIconDescription,
    multi: multi,
    multiSelection: multiSelection,
    navIconDescription: navIconDescription,
    path: path,
    setMultiSelection: setMultiSelection,
    setPath: setPath,
    setSingleSelection: setSingleSelection,
    singleSelection: singleSelection,
    setDisplayMetaPanel: setDisplayMetaPanel,
    parentId: path[0].id
  };
  var commonTearsheetProps = _objectSpread(_objectSpread({}, rest), {}, {
    className: tearsheetClassnames,
    open: open,
    title: title,
    description: description,
    actions: [{
      label: onCloseButtonText,
      kind: 'secondary',
      onClick: onCloseHandler
    }, {
      label: onSubmitButtonText,
      kind: 'primary',
      onClick: submitHandler,
      disabled: multi ? multiSelection.length === 0 : !singleSelection
    }],
    portalTarget: portalTarget,
    ref: ref
  });
  var sidebarProps = {
    appliedModifiers: appliedModifiers,
    closeIconDescription: closeIconDescription,
    displayMetalPanel: displayMetalPanel,
    illustrationTheme: illustrationTheme,
    influencerTitle: influencerTitle,
    items: useNormalizedItems ? normalizedItems : items.entries,
    metaPanelTitle: metaPanelTitle,
    modifiers: items.modifiers,
    multiSelection: multiSelection,
    noSelectionDescription: noSelectionDescription,
    noSelectionTitle: noSelectionTitle,
    setDisplayMetaPanel: setDisplayMetaPanel
  };
  var displayColumnView = multi && useNormalizedItems && !searchTerm && !globalFiltersApplied;

  // main content
  var body = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    id: "add-select",
    className: "".concat(blockClass, "__header")
  }, /*#__PURE__*/React.createElement(AddSelectFilter, {
    inputLabel: globalSearchLabel,
    inputPlaceholder: globalSearchPlaceholder,
    searchTerm: searchTerm,
    handleSearch: handleSearch,
    multi: multi,
    filterOpts: globalFilterOpts,
    filtersLabel: globalFiltersLabel,
    handleFilter: handleFilter,
    primaryButtonText: globalFiltersPrimaryButtonText,
    secondaryButtonText: globalFiltersSecondaryButtonText,
    placeholder: globalFiltersPlaceholderText,
    iconDescription: globalFiltersIconDescription,
    appliedFilters: appliedGlobalFilters,
    hasFiltersApplied: globalFiltersApplied,
    clearFiltersText: clearFiltersText
  }), /*#__PURE__*/React.createElement("div", {
    className: cx("".concat(blockClass, "__sub-header"), _defineProperty({}, "".concat(blockClass, "__sub-header-multi"), multi))
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__tags")
  }, showBreadsCrumbs ? /*#__PURE__*/React.createElement(AddSelectBreadcrumbs, {
    path: path,
    onClick: pathOnclick,
    multi: multi
  }) : /*#__PURE__*/React.createElement("p", {
    className: "".concat(blockClass, "__tags-label")
  }, searchTerm ? searchResultsTitle : itemsLabel), showTags && /*#__PURE__*/React.createElement(Tag, {
    type: "gray",
    size: "sm"
  }, itemsToDisplay.length)), showSort && /*#__PURE__*/React.createElement(AddSelectSort, {
    items: itemsToDisplay,
    setSortAttribute: setSortAttribute,
    setSortDirection: setSortDirection,
    sortAttribute: sortAttribute,
    sortDirection: sortDirection,
    sortBy: globalSortBy
  }))), displayColumnView ? /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__columns")
  }, /*#__PURE__*/React.createElement(AddSelectColumn, _extends({}, commonListProps, {
    items: itemsToDisplay,
    columnInputPlaceholder: columnInputPlaceholder,
    header: (_path$ = path[0]) === null || _path$ === void 0 ? void 0 : _path$.title,
    filterByLabel: filterByLabel,
    sortByLabel: sortByLabel
  }))) : /*#__PURE__*/React.createElement("div", null, hasResults ? /*#__PURE__*/React.createElement(AddSelectList, _extends({}, commonListProps, {
    filteredItems: itemsToDisplay,
    modifiers: items.modifiers,
    appliedModifiers: appliedModifiers,
    setAppliedModifiers: setAppliedModifiers,
    setParentSelected: parentSelectionHandler,
    parentSelected: parentSelected,
    parentId: parentSelected || path[0].id
  })) : /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "__body")
  }, /*#__PURE__*/React.createElement(NotFoundEmptyState, {
    subtitle: noResultsDescription,
    title: noResultsTitle,
    illustrationTheme: illustrationTheme
  }))));
  if (multi) {
    return /*#__PURE__*/React.createElement(Tearsheet, _extends({}, commonTearsheetProps, {
      influencer: multi && /*#__PURE__*/React.createElement(AddSelectSidebar, sidebarProps),
      influencerPosition: "right"
    }), body);
  }
  return /*#__PURE__*/React.createElement(TearsheetNarrow, commonTearsheetProps, body);
});
AddSelectBody.propTypes = {
  className: PropTypes.string,
  clearFiltersText: PropTypes.string,
  closeIconDescription: PropTypes.string,
  columnInputPlaceholder: PropTypes.string,
  defaultModifiers: PropTypes.array,
  description: PropTypes.string,
  filterByLabel: PropTypes.string,
  globalFilterOpts: PropTypes.array,
  globalFiltersIconDescription: PropTypes.string,
  globalFiltersLabel: PropTypes.string,
  globalFiltersPlaceholderText: PropTypes.string,
  globalFiltersPrimaryButtonText: PropTypes.string,
  globalFiltersSecondaryButtonText: PropTypes.string,
  globalSearchLabel: PropTypes.string.isRequired,
  globalSearchPlaceholder: PropTypes.string,
  globalSortBy: PropTypes.array,
  illustrationTheme: PropTypes.oneOf(['light', 'dark']),
  influencerTitle: PropTypes.string,
  items: PropTypes.shape({
    modifiers: PropTypes.shape({
      id: PropTypes.string,
      label: PropTypes.string,
      options: PropTypes.array
    }),
    sortBy: PropTypes.array,
    filterBy: PropTypes.array,
    entries: PropTypes.arrayOf(PropTypes.shape({
      avatar: PropTypes.shape({
        alt: PropTypes.string,
        icon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
        src: PropTypes.string,
        theme: PropTypes.oneOf(['light', 'dark'])
      }),
      children: PropTypes.object,
      icon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
      id: PropTypes.string.isRequired,
      meta: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({
        id: PropTypes.string,
        title: PropTypes.string,
        value: PropTypes.string
      })), PropTypes.node]),
      subtitle: PropTypes.string,
      title: PropTypes.string.isRequired,
      value: PropTypes.string.isRequired
    }))
  }),
  itemsLabel: PropTypes.string,
  metaIconDescription: PropTypes.string,
  metaPanelTitle: PropTypes.string,
  multi: PropTypes.bool,
  navIconDescription: PropTypes.string,
  noResultsDescription: PropTypes.string,
  noResultsTitle: PropTypes.string,
  noSelectionDescription: PropTypes.string,
  noSelectionTitle: PropTypes.string,
  normalizedItems: PropTypes.object,
  onClose: PropTypes.func,
  onCloseButtonText: PropTypes.string,
  onSubmit: PropTypes.func,
  onSubmitButtonText: PropTypes.string,
  open: PropTypes.bool,
  portalTarget: PropTypes.node,
  searchResultsTitle: PropTypes.string,
  sortByLabel: PropTypes.string,
  title: PropTypes.string,
  useNormalizedItems: PropTypes.bool
};
AddSelectBreadcrumbs.displayName = componentName;