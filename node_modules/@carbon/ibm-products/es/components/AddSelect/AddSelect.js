import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["items", "globalFilters"];
//
// Copyright IBM Corp. 2022, 2022
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import { AddSelectBody } from './AddSelectBody';
import { normalize, getGlobalFilterValues } from './add-select-utils';
var componentName = 'AddSelect';
export var AddSelect = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var items = _ref.items,
    globalFilters = _ref.globalFilters,
    props = _objectWithoutProperties(_ref, _excluded);
  var useNormalizedItems = !!items.entries.find(function (item) {
    return item.children;
  });
  var normalizedItems = useNormalizedItems ? normalize(items) : null;
  var globalFilterOpts = props.multi && globalFilters !== null && globalFilters !== void 0 && globalFilters.length ? getGlobalFilterValues(globalFilters, normalizedItems) : null;
  var defaultModifiers = props.multi && items.modifiers ? items.entries.map(function (item) {
    var modifierAttribute = items.modifiers.id;
    return _defineProperty({
      id: item.id
    }, modifierAttribute, item[modifierAttribute]);
  }) : [];
  return /*#__PURE__*/React.createElement(AddSelectBody, _extends({}, props, {
    ref: ref,
    items: items,
    normalizedItems: normalizedItems,
    useNormalizedItems: useNormalizedItems,
    globalFilterOpts: globalFilterOpts,
    defaultModifiers: defaultModifiers
  }));
});
AddSelect.propTypes = {
  className: PropTypes.string,
  clearFiltersText: PropTypes.string,
  closeIconDescription: PropTypes.string.isRequired,
  columnInputPlaceholder: PropTypes.string,
  description: PropTypes.string.isRequired,
  filterByLabel: PropTypes.string,
  globalFilters: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string,
    label: PropTypes.string
  })),
  globalFiltersIconDescription: PropTypes.string,
  globalFiltersLabel: PropTypes.string,
  globalFiltersPlaceholderText: PropTypes.string,
  globalFiltersPrimaryButtonText: PropTypes.string,
  globalFiltersSecondaryButtonText: PropTypes.string,
  globalSearchLabel: PropTypes.string.isRequired,
  globalSearchPlaceholder: PropTypes.string,
  globalSortBy: PropTypes.array,
  illustrationTheme: PropTypes.oneOf(['light', 'dark']),
  influencerTitle: PropTypes.string,
  items: PropTypes.shape({
    modifiers: PropTypes.shape({
      id: PropTypes.string,
      label: PropTypes.string,
      options: PropTypes.array
    }),
    sortBy: PropTypes.array,
    filterBy: PropTypes.array,
    entries: PropTypes.arrayOf(PropTypes.shape({
      avatar: PropTypes.shape({
        alt: PropTypes.string,
        icon: PropTypes.func,
        src: PropTypes.string,
        theme: PropTypes.oneOf(['light', 'dark'])
      }),
      children: PropTypes.object,
      icon: PropTypes.func,
      id: PropTypes.string.isRequired,
      meta: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({
        id: PropTypes.string,
        title: PropTypes.string,
        value: PropTypes.string
      })), PropTypes.node]),
      subtitle: PropTypes.string,
      title: PropTypes.string.isRequired,
      value: PropTypes.string.isRequired
    })).isRequired
  }).isRequired,
  itemsLabel: PropTypes.string.isRequired,
  metaIconDescription: PropTypes.string,
  metaPanelTitle: PropTypes.string,
  multi: PropTypes.bool.isRequired,
  navIconDescription: PropTypes.string,
  noResultsDescription: PropTypes.string.isRequired,
  noResultsTitle: PropTypes.string.isRequired,
  noSelectionDescription: PropTypes.string,
  noSelectionTitle: PropTypes.string,
  onClose: PropTypes.func.isRequired,
  onCloseButtonText: PropTypes.string.isRequired,
  onSubmit: PropTypes.func.isRequired,
  onSubmitButtonText: PropTypes.string.isRequired,
  open: PropTypes.bool.isRequired,
  /**
   * portal target for the all tags modal
   */
  portalTarget: PropTypes.node,
  searchResultsTitle: PropTypes.string,
  sortByLabel: PropTypes.string,
  title: PropTypes.string.isRequired
};
AddSelect.defaultProps = {
  closeIconDescription: '',
  description: '',
  itemsLabel: '',
  items: {
    entries: []
  },
  multi: false,
  noResultsDescription: '',
  noResultsTitle: '',
  onClose: function onClose() {},
  onCloseButtonText: '',
  onSubmit: function onSubmit() {},
  onSubmitButtonText: '',
  open: false,
  title: ''
};
AddSelect.displayName = componentName;