import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
//
// Copyright IBM Corp. 2022, 2022
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

import { useState, useEffect } from 'react';
var usePath = function usePath() {
  var itemsLabel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var _useState = useState([{
      id: 'base_of_path',
      title: itemsLabel
    }]),
    _useState2 = _slicedToArray(_useState, 2),
    path = _useState2[0],
    setPath = _useState2[1];
  useEffect(function () {
    setPath([{
      id: 'base_of_path',
      title: itemsLabel
    }]);
  }, [itemsLabel]);
  var handler = function handler(id, title, parentId) {
    if (path.find(function (entry) {
      return entry.id === id;
    })) {
      return;
    }
    var pathEntry = _objectSpread({
      id: id,
      title: title
    }, parentId && {
      parentId: parentId
    });
    if (path.find(function (entry) {
      return entry.parentId === parentId;
    })) {
      var parentIdx = path.findIndex(function (entry) {
        return entry.id === parentId;
      });
      var pathCopy = _toConsumableArray(path);
      pathCopy.length = parentIdx + 1;
      setPath([].concat(_toConsumableArray(pathCopy), [pathEntry]));
    } else {
      setPath([].concat(_toConsumableArray(path), [pathEntry]));
    }
  };
  var pathClickHandler = function pathClickHandler(idx) {
    var pathCopy = _toConsumableArray(path);
    pathCopy.length = idx + 1;
    setPath(_toConsumableArray(pathCopy));
  };
  var resetPath = function resetPath() {
    setPath([{
      id: 'base_of_path',
      title: itemsLabel
    }]);
  };
  return {
    path: path,
    setPath: handler,
    pathOnclick: pathClickHandler,
    resetPath: resetPath
  };
};
export default usePath;