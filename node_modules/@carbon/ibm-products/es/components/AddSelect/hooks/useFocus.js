import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { useCallback, useState, useEffect } from 'react';
var useFocus = function useFocus(size) {
  // the state should represent the location of the item in the array
  // make it '' initially so that it doesn't automatically focus the first item
  var _useState = useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    currentFocus = _useState2[0],
    setCurrentFocus = _useState2[1];
  var handleKeyDown = useCallback(function (e) {
    var focus = currentFocus === '' ? 0 : currentFocus;
    if (e.keyCode === 40) {
      // Down arrow
      e.preventDefault();
      setCurrentFocus(focus === size - 1 ? 0 : focus + 1);
    } else if (e.keyCode === 38) {
      // Up arrow
      e.preventDefault();
      setCurrentFocus(focus === 0 ? size - 1 : focus - 1);
    }
  }, [size, currentFocus, setCurrentFocus]);
  useEffect(function () {
    var el = document.querySelector('#add-select-focus');
    el.addEventListener('keydown', handleKeyDown, false);
    return function () {
      el.removeEventListener('keydown', handleKeyDown, false);
    };
  }, [handleKeyDown]);
  return [currentFocus, setCurrentFocus];
};
export default useFocus;