import _extends from "@babel/runtime/helpers/extends";
//
// Copyright IBM Corp. 2022, 2022
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

import React, { isValidElement } from 'react';
import PropTypes from 'prop-types';
import { Close } from '@carbon/react/icons';
import { Button } from '@carbon/react';
import { pkg } from '../../settings';
var blockClass = "".concat(pkg.prefix, "--add-select__meta-panel");
var componentName = 'AddSelectMetaPanel';
export var AddSelectMetaPanel = function AddSelectMetaPanel(_ref) {
  var closeIconDescription = _ref.closeIconDescription,
    meta = _ref.meta,
    setDisplayMetaPanel = _ref.setDisplayMetaPanel,
    title = _ref.title;
  var onCloseHandler = function onCloseHandler() {
    setDisplayMetaPanel({});
  };
  return /*#__PURE__*/React.createElement("div", {
    className: blockClass
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(blockClass, "-header")
  }, /*#__PURE__*/React.createElement("p", {
    className: "".concat(blockClass, "-title")
  }, title), /*#__PURE__*/React.createElement(Button, {
    renderIcon: function renderIcon(props) {
      return /*#__PURE__*/React.createElement(Close, _extends({
        size: 16
      }, props));
    },
    className: "".concat(blockClass, "-close"),
    iconDescription: closeIconDescription,
    tooltipPosition: "left",
    tooltipAlignment: "center",
    hasIconOnly: true,
    onClick: onCloseHandler,
    kind: "ghost",
    size: "sm"
  })), /*#__PURE__*/isValidElement(meta) ? meta : meta.map(function (entry) {
    return /*#__PURE__*/React.createElement("div", {
      key: entry === null || entry === void 0 ? void 0 : entry.id,
      className: "".concat(blockClass, "-entry")
    }, /*#__PURE__*/React.createElement("p", {
      className: "".concat(blockClass, "-entry-title")
    }, entry === null || entry === void 0 ? void 0 : entry.title), /*#__PURE__*/React.createElement("p", {
      className: "".concat(blockClass, "-entry-body")
    }, entry === null || entry === void 0 ? void 0 : entry.value));
  }));
};
AddSelectMetaPanel.propTypes = {
  closeIconDescription: PropTypes.string.isRequired,
  meta: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string,
    title: PropTypes.string,
    value: PropTypes.string
  })), PropTypes.node]).isRequired,
  setDisplayMetaPanel: PropTypes.func.isRequired,
  title: PropTypes.string.isRequired
};
AddSelectMetaPanel.displayName = componentName;