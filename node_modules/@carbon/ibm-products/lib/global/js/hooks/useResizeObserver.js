"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useResizeObserver = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
/**
 * Copyright IBM Corp. 2023, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

var useResizeObserver = function useResizeObserver(ref, callback) {
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    width = _useState2[0],
    setWidth = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    height = _useState4[0],
    setHeight = _useState4[1];
  var entriesToHandle = (0, _react.useRef)(null);
  var cb = (0, _react.useRef)(callback);
  (0, _react.useEffect)(function () {
    // ref for callback removes it as dependency fro useLayoutEffect
    // This significantly reduces repeated calls if a function is redefined on every
    // render
    cb.current = callback;
  }, [callback]);
  (0, _react.useLayoutEffect)(function () {
    if (!(ref !== null && ref !== void 0 && ref.current)) {
      return;
    }
    var doCallbacks = function doCallbacks() {
      if (!(ref !== null && ref !== void 0 && ref.current) || !Array.isArray(entriesToHandle === null || entriesToHandle === void 0 ? void 0 : entriesToHandle.current)) {
        return;
      }
      var entry = entriesToHandle.current[0];
      setWidth(entry.contentRect.width);
      setHeight(entry.contentRect.height);
      cb.current && cb.current(entry.contentRect);
    };
    var observer = new ResizeObserver(function (entries) {
      // always update entriesToHandle
      entriesToHandle.current = entries;
      window.requestAnimationFrame(function () {
        // do callbacks
        doCallbacks();
      });
    });

    // observe all refs passed
    observer.observe(ref.current);
    return function () {
      observer.disconnect();
      observer = null;
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [ref]);
  return {
    width: width,
    height: height
  };
};
exports.useResizeObserver = useResizeObserver;