"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCreateComponentFocus = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _wait = _interopRequireDefault(require("../utils/wait"));
/**
 * Copyright IBM Corp. 2021, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Focus the first focusable element and call the onMount prop for the current step if one is provided
var useCreateComponentFocus = function useCreateComponentFocus(_ref) {
  var previousState = _ref.previousState,
    currentStep = _ref.currentStep,
    blockClass = _ref.blockClass,
    onMount = _ref.onMount,
    firstFocusElement = _ref.firstFocusElement;
  (0, _react.useEffect)(function () {
    if (typeof onMount === 'function') {
      onMount();
    }
  }, [onMount]);
  (0, _react.useEffect)(function () {
    // because of how handleStackChange.claimFocus in TearsheetShell works a timeout is required to focus on specific elements
    var awaitFocus = /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(elm) {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (0, _wait.default)(10);
            case 2:
              elm.focus();
            case 3:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return function awaitFocus(_x) {
        return _ref2.apply(this, arguments);
      };
    }();
    if ((previousState === null || previousState === void 0 ? void 0 : previousState.currentStep) !== currentStep && currentStep > 0) {
      if (firstFocusElement) {
        var elm = document.querySelector(firstFocusElement);
        if (elm) {
          awaitFocus(elm);
        }
      }
    }
  }, [currentStep, previousState, blockClass, onMount, firstFocusElement]);
};
exports.useCreateComponentFocus = useCreateComponentFocus;