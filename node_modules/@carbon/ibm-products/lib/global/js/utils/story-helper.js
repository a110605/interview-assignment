"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.storyDocsPageTitle = exports.storyDocsPageInfo = exports.storyDocsGuidelines = exports.stackblitzHref = exports.prepareStory = exports.palUsageHref = exports.getStoryTitle = exports.getStoryId = exports.getSelectedCarbonTheme = exports.codeSandboxHref = exports.StackblitzLink = exports.CodesandboxLink = void 0;
var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _csf = require("@storybook/csf");
var _packageSettings = _interopRequireDefault(require("../package-settings"));
var _storyStructure = require("../../../../../core/story-structure");
var _changeCase = require("change-case");
//
// Copyright IBM Corp. 2021, 2021
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

/**
 * A helper function to return the structured story title for a component.
 * @param {string} componentName The name of the component.
 * @returns The structured story title.
 */
var getStoryTitle = function getStoryTitle(componentName) {
  var title =
  // if the component isn't in the master structure, put it in a lost+found section
  (0, _storyStructure.getPathForComponent)('c', componentName) || "Carbon for IBM Products/Lost + found/".concat(componentName);

  // add a canary tag if the component is public but not normally enabled
  return !_packageSettings.default.isComponentEnabled(componentName, true) && _packageSettings.default.isComponentPublic(componentName, true) ? "".concat(title, "#canary") : title;
};

/**
 * A helper function to return the slug (structured path name reduced to lower
 * case text and hyphens) which identifies individual story instances.
 * @param {string} componentName The name of the component.
 * @param {string} scenario The scenario name, also as a slug.
 * @returns The story id.
 */
exports.getStoryTitle = getStoryTitle;
var getStoryId = function getStoryId(componentName, scenario, subdirectory) {
  if (subdirectory) {
    return "".concat((0, _csf.sanitize)(getStoryTitle(componentName)), "-").concat((0, _csf.sanitize)(subdirectory), "--").concat(scenario);
  }
  return "".concat((0, _csf.sanitize)(getStoryTitle(componentName)), "--").concat(scenario);
};

/**
 * A helper function to prepare storybook stories for export. This function
 * binds the template, adds the supplied fields, and also inserts a sequence
 * number so that stories can then be sorted into declared order reliably.
 * @param template the story template render function
 * @param options an object containing fields to be added to the bound
 * template, such as `args`, `storyName`, etc.
 * @returns A bound template with the option fields applied.
 */
exports.getStoryId = getStoryId;
var sequence = 0;
var bindTarget = {};
var prepareStory = function prepareStory(template, options) {
  var _result$parameters, _result$parameters2, _result$parameters2$c;
  var result = Object.assign(template.bind(bindTarget), options);
  (_result$parameters = result.parameters) !== null && _result$parameters !== void 0 ? _result$parameters : result.parameters = {};
  (_result$parameters2$c = (_result$parameters2 = result.parameters).ccsSettings) !== null && _result$parameters2$c !== void 0 ? _result$parameters2$c : _result$parameters2.ccsSettings = {};
  result.parameters.ccsSettings.sequence = sequence++;
  return result;
};

/**
 * A helper component that returns a codesandbox link to an example codesandbox for the component.
 * The link URL is based on the example directory name and the standard codesandbox URL for package examples.
 */
exports.prepareStory = prepareStory;
var packagePath = 'github/carbon-design-system/ibm-products/tree/main/examples/carbon-for-ibm-products';
var codeSandboxHref = function codeSandboxHref(exampleDirectory) {
  return "https://codesandbox.io/p/sandbox/".concat(packagePath, "/").concat(exampleDirectory, "?file=%2Fsrc%2FExample%2FExample.jsx");
};
exports.codeSandboxHref = codeSandboxHref;
var CodesandboxLink = function CodesandboxLink(_ref) {
  var exampleDirectory = _ref.exampleDirectory;
  var href = codeSandboxHref(exampleDirectory);
  return /*#__PURE__*/_react.default.createElement("a", {
    href: href
  }, /*#__PURE__*/_react.default.createElement("img", {
    alt: "Edit on CodeSandbox",
    src: "https://codesandbox.io/static/img/play-codesandbox.svg"
  }));
};
exports.CodesandboxLink = CodesandboxLink;
CodesandboxLink.propTypes = {
  /**
   * directory within examples codesandbox will be found
   */
  exampleDirectory: _propTypes.default.string
};
var stackblitzHref = function stackblitzHref(exampleDirectory) {
  return "https://stackblitz.com/".concat(packagePath, "/").concat(exampleDirectory, "?file=src%2FExample%2FExample.jsx");
};
exports.stackblitzHref = stackblitzHref;
var StackblitzLink = function StackblitzLink(_ref2) {
  var exampleDirectory = _ref2.exampleDirectory;
  var href = stackblitzHref(exampleDirectory);
  return /*#__PURE__*/_react.default.createElement("a", {
    href: href
  }, /*#__PURE__*/_react.default.createElement("img", {
    alt: "Edit on Stackblitz",
    src: "https://c.staticblitz.com/assets/favicon_sb-861fe1b85c0dc928750c62de15fed96fc75e57ee366bd937bad17a3938917b3f.svg"
  }));
};
exports.StackblitzLink = StackblitzLink;
StackblitzLink.propTypes = {
  /**
   * directory within examples stackblitz will be found
   */
  exampleDirectory: _propTypes.default.string
};
var palUsageHref = function palUsageHref(csfFile) {
  var _csfFile$meta;
  var title = csfFile === null || csfFile === void 0 ? void 0 : (_csfFile$meta = csfFile.meta) === null || _csfFile$meta === void 0 ? void 0 : _csfFile$meta.title;
  var _title$split = title.split('/'),
    _title$split2 = (0, _slicedToArray2.default)(_title$split, 3),
    _pkg = _title$split2[0],
    kind = _title$split2[1],
    section = _title$split2[2];
  if (/components|patterns/i.test(kind) && name) {
    return "https://pages.github.ibm.com/cdai-design/pal/".concat(kind, "s/").concat((0, _changeCase.paramCase)(section), "/usage");
  }
};
exports.palUsageHref = palUsageHref;
var storyDocsPageTitle = function storyDocsPageTitle(csfFile) {
  var _csfFile$meta2;
  var title = csfFile === null || csfFile === void 0 ? void 0 : (_csfFile$meta2 = csfFile.meta) === null || _csfFile$meta2 === void 0 ? void 0 : _csfFile$meta2.title;
  var _title$split3 = title.split('/'),
    _title$split4 = (0, _toArray2.default)(_title$split3),
    _pkg = _title$split4[0],
    kind = _title$split4[1],
    a = _title$split4[2],
    b = _title$split4[3],
    rest = _title$split4.slice(4);
  var component;
  if (/components|patterns/i.test(kind)) {
    // components and patterns have an additional level
    component = b;
  } else {
    component = a;
  }
  var name = component.split('#')[0]; // canary always written as Example#canary};

  if (name) {
    if (rest.length > 0) {
      return "".concat(name, " (").concat(rest.join(' '), ")");
    } else {
      return name;
    }
  }
  console.error('Error: unable to parse title from metadata.');
  return title;
};
exports.storyDocsPageTitle = storyDocsPageTitle;
var storyDocsPageInfo = function storyDocsPageInfo(csfFile) {
  var _csfFile$meta3;
  var title = csfFile === null || csfFile === void 0 ? void 0 : (_csfFile$meta3 = csfFile.meta) === null || _csfFile$meta3 === void 0 ? void 0 : _csfFile$meta3.title;
  var _title$split5 = title.split('/'),
    _title$split6 = (0, _toArray2.default)(_title$split5),
    pkg = _title$split6[0],
    kind = _title$split6[1],
    a = _title$split6[2],
    b = _title$split6[3],
    rest = _title$split6.slice(4);
  var result = {
    package: pkg,
    kind: kind,
    expectCodedExample: false
  };
  var component;
  if (/components|patterns/i.test(kind)) {
    result.expectCodedExample = true;
    // components and patterns have an additional level
    component = b;
    result.section = a;
    result.guidelinesHref = "https://pages.github.ibm.com/cdai-design/pal/".concat(kind, "s/").concat((0, _changeCase.paramCase)(result.section), "/usage");
  } else {
    component = a;
  }
  var nameSplit = component.split('#'); // canary always written as Example#canary};
  var name = nameSplit[0];
  if (nameSplit.length > 1 && nameSplit[1] === 'canary') {
    result.canary = true;
  }
  if (name) {
    if (rest.length > 0) {
      result.component = result.title = "".concat(name, " (").concat(rest.join(' '), ")");
    } else {
      result.component = name;
      result.title = name;
    }
  } else {
    console.error('Error: unable to parse title from metadata.');
    result.title = title;
  }
  if (result.guidelinesHref) {
    result.guidelinesLinkLabel = "".concat(result.title, " usage guidelines");
  }
  return result;
};
exports.storyDocsPageInfo = storyDocsPageInfo;
var storyDocsGuidelines = function storyDocsGuidelines(csfFile) {
  var storyInfo = storyDocsPageInfo(csfFile);
  return {
    href: storyInfo.guidelinesHref,
    label: storyInfo.guidelinesLinkLabel
  };
};

/**
 * A helper function that finds the designated theme on the Storybook canvas.
 * @returns "dark" or "light"
 */
exports.storyDocsGuidelines = storyDocsGuidelines;
var getSelectedCarbonTheme = function getSelectedCarbonTheme() {
  var themeId = document.querySelector('[storybook-carbon-theme]').getAttribute('storybook-carbon-theme');
  return themeId === 'g90' || themeId === 'g100' ? 'dark' : 'light';
};
exports.getSelectedCarbonTheme = getSelectedCarbonTheme;