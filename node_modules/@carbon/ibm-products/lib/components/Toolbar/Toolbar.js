"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentName = exports.blockClass = exports.ToolbarContext = exports.Toolbar = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = require("prop-types");
var _react = _interopRequireWildcard(require("react"));
var _devtools = require("../../global/js/utils/devtools");
var _getFocusableElements2 = require("../../global/js/utils/getFocusableElements");
var _settings = require("../../settings");
var _excluded = ["children", "className", "vertical"];
/**
 * Copyright IBM Corp. 2021, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var checkComponentEnabled = _settings.pkg.checkComponentEnabled,
  prefix = _settings.pkg.prefix;
var blockClass = "".concat(prefix, "--toolbar");
exports.blockClass = blockClass;
var ToolbarContext = /*#__PURE__*/(0, _react.createContext)();

/** Toolbars are a collection of action items that organize a programâ€™s interaction patterns into a series of closely related commands. */
exports.ToolbarContext = ToolbarContext;
var Toolbar = /*#__PURE__*/(0, _react.forwardRef)(function (_ref2, r) {
  var children = _ref2.children,
    className = _ref2.className,
    vertical = _ref2.vertical,
    rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded);
  var focusableElements = (0, _react.useRef)();
  var getFocusableElements = (0, _react.useCallback)(function () {
    return focusableElements.current;
  }, [focusableElements]);
  var _ref = (0, _react.useRef)();
  var ref = r || _ref;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    focus = _useState2[0],
    setFocus = _useState2[1];
  (0, _react.useEffect)(function () {
    focusableElements.current = (0, _getFocusableElements2.getFocusableElements)(ref.current);
    typeof focus !== 'undefined' && getFocusableElements().forEach(function (element, index) {
      element[index !== focus ? 'setAttribute' : 'removeAttribute']('tabindex', -1);
    });
  });
  (0, _react.useEffect)(function () {
    typeof focus !== 'undefined' && getFocusableElements()[focus].focus();
  }, [focus, getFocusableElements]);
  var _ref3 = !vertical ? ['ArrowRight', 'ArrowLeft'] : ['ArrowDown', 'ArrowUp'],
    _ref4 = (0, _slicedToArray2.default)(_ref3, 2),
    arrowNext = _ref4[0],
    arrowPrevious = _ref4[1];
  function onArrowDown(increment) {
    var nextFocus = focus + increment;
    getFocusableElements()[nextFocus] && setFocus(nextFocus);
  }
  function onFocus(_ref5) {
    var target = _ref5.target;
    var elements = getFocusableElements();
    elements.includes(target) && setFocus(elements.indexOf(target));
  }
  function onKeyDown(_ref6) {
    var key = _ref6.key,
      target = _ref6.target;
    if (getFocusableElements().includes(target)) {
      switch (key) {
        case arrowNext:
          onArrowDown(1);
          break;
        case arrowPrevious:
          onArrowDown(-1);
          break;
      }
    }
  }
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, rest, {
    ref: ref,
    className: (0, _classnames.default)(blockClass, className, (0, _defineProperty2.default)({}, "".concat(blockClass, "--vertical"), vertical)),
    onFocus: onFocus,
    onKeyDown: onKeyDown
  }, vertical && {
    'aria-orientation': 'vertical'
  }, (0, _devtools.getDevtoolsProps)(componentName), {
    role: "toolbar"
  }), /*#__PURE__*/_react.default.createElement(ToolbarContext.Provider, {
    value: {
      vertical: vertical
    }
  }, children));
});
exports.Toolbar = Toolbar;
var componentName = 'Toolbar';
exports.componentName = componentName;
Toolbar.displayName = componentName;
Toolbar.propTypes = {
  /** Provide the content of the `Toolbar` */
  children: _propTypes.node.isRequired,
  /** Provide an optional class to be applied to the containing node */
  className: _propTypes.string,
  /** Determines whether the `Toolbar` is rendered vertically */
  vertical: _propTypes.bool
};
exports.Toolbar = Toolbar = checkComponentEnabled(Toolbar, componentName);