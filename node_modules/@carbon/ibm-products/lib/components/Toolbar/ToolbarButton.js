"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blockClass = exports.ToolbarButton = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = require("@carbon/react");
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = require("prop-types");
var _react2 = _interopRequireWildcard(require("react"));
var _settings = require("../../settings");
var _Toolbar = require("./Toolbar");
var _excluded = ["caret", "children", "className", "renderIcon", "iconDescription"];
/**
 * Copyright IBM Corp. 2021, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var blockClass = "".concat(_Toolbar.blockClass, "__button");

/** Toolbar buttons are common functions performed as part of a products interface or an open window.  */
exports.blockClass = blockClass;
var ToolbarButton = /*#__PURE__*/(0, _react2.forwardRef)(function (_ref, ref) {
  var _useContext;
  var caret = _ref.caret,
    children = _ref.children,
    className = _ref.className,
    renderIcon = _ref.renderIcon,
    _ref$iconDescription = _ref.iconDescription,
    iconDescription = _ref$iconDescription === void 0 ? '' : _ref$iconDescription,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var Icon = renderIcon;
  return /*#__PURE__*/_react2.default.createElement(_react.IconButton, (0, _extends2.default)({
    align: ((_useContext = (0, _react2.useContext)(_Toolbar.ToolbarContext)) === null || _useContext === void 0 ? void 0 : _useContext.vertical) && 'right'
  }, rest, {
    label: iconDescription,
    ref: ref,
    className: (0, _classnames.default)(className, (0, _defineProperty2.default)({}, "".concat(blockClass, "--caret"), caret)),
    kind: "ghost",
    size: "md"
  }), /*#__PURE__*/_react2.default.createElement(_react2.default.Fragment, null, Icon ? /*#__PURE__*/_react2.default.createElement(Icon, null) : null, children, caret && /*#__PURE__*/_react2.default.createElement("span", {
    className: "".concat(blockClass, "__caret")
  })));
});
exports.ToolbarButton = ToolbarButton;
var componentName = 'ToolbarButton';
ToolbarButton.displayName = componentName;
ToolbarButton.propTypes = {
  /** Determines whether the caret is rendered */
  caret: _propTypes.bool,
  /** Provide the content of the `ToolbarButton` */
  children: _propTypes.node,
  /** Provide an optional class to be applied to the containing node */
  className: _propTypes.string,
  /** Specifies the label for the icon button */
  iconDescription: _propTypes.string.isRequired,
  /** Specifies the icon to be used by the ToolbarButton component */
  renderIcon: _propTypes.func.isRequired
};
exports.ToolbarButton = ToolbarButton = _settings.pkg.checkComponentEnabled(ToolbarButton, componentName);