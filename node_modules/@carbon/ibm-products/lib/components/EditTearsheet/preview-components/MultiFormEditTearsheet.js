"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiFormEditTearsheet = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@carbon/react");
var _classnames = _interopRequireDefault(require("classnames"));
var _settings = require("../../../settings");
var _EditTearsheet = require("../EditTearsheet");
var _EditTearsheetForm = require("../EditTearsheetForm");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/* eslint-disable react/prop-types */
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

var blockClass = "".concat(_settings.pkg.prefix, "--tearsheet-edit-multi-form");
var MultiFormEditTearsheet = function MultiFormEditTearsheet(_ref) {
  var cancelButtonText = _ref.cancelButtonText,
    className = _ref.className,
    description = _ref.description,
    influencerWidth = _ref.influencerWidth,
    label = _ref.label,
    submitButtonText = _ref.submitButtonText,
    title = _ref.title;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    hasSubmitError = _useState4[0],
    setHasSubmitError = _useState4[1];
  var _useState5 = (0, _react.useState)('Topic name here'),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    formOneTextInputValue = _useState6[0],
    setFormOneTextInputValue = _useState6[1];
  var _useState7 = (0, _react.useState)('Topic description here'),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    topicDescriptionValue = _useState8[0],
    setTopicDescriptionValue = _useState8[1];
  var _useState9 = (0, _react.useState)('Topic value here'),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    topicVersionValue = _useState10[0],
    setTopicVersionValue = _useState10[1];
  var _useState11 = (0, _react.useState)('Location here'),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    topicLocationValue = _useState12[0],
    setTopicLocationValue = _useState12[1];
  var _useState13 = (0, _react.useState)(1),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    formTwoTextInputValue = _useState14[0],
    setFormTwoTextInputValue = _useState14[1];
  var _useState15 = (0, _react.useState)('one-day'),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    formThreeTextInputValue = _useState16[0],
    setFormThreeTextInputValue = _useState16[1];
  var _useState17 = (0, _react.useState)(false),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    isInvalid = _useState18[0],
    setIsInvalid = _useState18[1];
  var clearCreateData = function clearCreateData() {
    setFormOneTextInputValue(formOneTextInputValue);
    setTopicDescriptionValue(topicDescriptionValue);
    setTopicVersionValue(topicVersionValue);
    setTopicLocationValue(topicLocationValue);
    setFormTwoTextInputValue(1);
    setFormThreeTextInputValue('one-day');
    setHasSubmitError(false);
    setIsInvalid(false);
    setOpen(false);
  };
  var handleModalClick = function handleModalClick() {
    setOpen(!open);
  };
  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("style", null, ".".concat(blockClass, " { opacity: 0 }"), ";"), /*#__PURE__*/_react.default.createElement(_react2.Button, {
    onClick: handleModalClick
  }, open ? 'Close EditTearsheet' : 'Open EditTearsheet'), /*#__PURE__*/_react.default.createElement(_EditTearsheet.EditTearsheet, {
    influencerWidth: influencerWidth,
    label: label,
    className: (0, _classnames.default)(blockClass, className),
    submitButtonText: submitButtonText,
    cancelButtonText: cancelButtonText,
    description: description,
    title: title,
    open: open,
    onHandleModalClick: handleModalClick,
    onClose: clearCreateData
  }, /*#__PURE__*/_react.default.createElement(_EditTearsheetForm.EditTearsheetForm, {
    title: "Topic name",
    fieldsetLegendText: "Topic information",
    subtitle: "This is the unique name used to recognize your topic",
    description: "It will also be used by your producers and consumers as part of the connection information, so make it something easy to recognize."
  }, /*#__PURE__*/_react.default.createElement(_react2.Column, {
    xlg: 8,
    lg: 8,
    md: 8,
    sm: 8
  }, /*#__PURE__*/_react.default.createElement(_react2.TextInput, {
    labelText: "Topic name",
    placeholder: "Enter topic name",
    id: "tearsheet-multi-form-story-text-input-multi-form-1",
    value: formOneTextInputValue,
    onChange: function onChange(event) {
      if (event.target.value.length) {
        setIsInvalid(false);
      }
      setFormOneTextInputValue(event.target.value);
    },
    invalid: isInvalid,
    invalidText: "This is a required field",
    onBlur: function onBlur() {
      if (!formOneTextInputValue.length) {
        setIsInvalid(true);
      }
    }
  }), /*#__PURE__*/_react.default.createElement(_react2.TextInput, {
    labelText: "Topic description (optional)",
    id: "tearsheet-multi-form-story-text-input-multi-form-1-input-2",
    value: topicDescriptionValue,
    placeholder: "Enter topic description",
    onChange: function onChange(event) {
      return setTopicDescriptionValue(event.target.value);
    }
  }), /*#__PURE__*/_react.default.createElement(_react2.TextInput, {
    labelText: "Topic version (optional)",
    id: "tearsheet-multi-form-story-text-input-multi-form-1-input-3",
    value: topicVersionValue,
    placeholder: "Enter topic version",
    onChange: function onChange(event) {
      return setTopicVersionValue(event.target.value);
    }
  }), hasSubmitError && /*#__PURE__*/_react.default.createElement(_react2.InlineNotification, {
    kind: "error",
    title: "Error",
    subtitle: "Resolve errors to continue",
    onClose: function onClose() {
      return setHasSubmitError(!hasSubmitError);
    }
  }), /*#__PURE__*/_react.default.createElement(_react2.Toggle, {
    className: "".concat(blockClass, "__error--toggle"),
    id: "simulated-error-toggle",
    size: "sm",
    labelText: "Simulate error",
    onToggle: function onToggle() {
      return setHasSubmitError(!hasSubmitError);
    },
    toggled: hasSubmitError
  }))), /*#__PURE__*/_react.default.createElement(_EditTearsheetForm.EditTearsheetForm, {
    title: "Location",
    subtitle: "Custom form subtitle",
    fieldsetLegendText: "",
    description: "Custom form description (see storybook implementation for new custom form capability)"
  }, /*#__PURE__*/_react.default.createElement(_react2.Column, {
    xlg: 8,
    lg: 8,
    md: 8,
    sm: 8
  }, /*#__PURE__*/_react.default.createElement(_react2.TextInput, {
    value: topicLocationValue,
    onChange: function onChange(event) {
      return setTopicLocationValue(event.target.value);
    },
    id: "custom-form-input",
    labelText: "Location",
    placeholder: "Enter location"
  }))), /*#__PURE__*/_react.default.createElement(_EditTearsheetForm.EditTearsheetForm, {
    title: "Partitions",
    subtitle: "One or more partitions make up a topic. A partition is an ordered list of messages.",
    description: "Partitions are distributed across the brokers in order to increase the scalability of your topic. You can also use them to distribute messages across the members of a consumer group.",
    fieldsetLegendText: "Partition information"
  }, /*#__PURE__*/_react.default.createElement(_react2.Column, {
    xlg: 3,
    lg: 3,
    md: 8,
    sm: 4
  }, /*#__PURE__*/_react.default.createElement(_react2.NumberInput, {
    id: "carbon-number",
    min: 1,
    max: 100,
    value: formTwoTextInputValue,
    label: "Partitions",
    helperText: "1 partition is sufficient for getting started but, production systems often have more.",
    invalidText: "Max partitions is 100, min is 1",
    onChange: function onChange(event) {
      return setFormTwoTextInputValue(event.imaginaryTarget.value);
    }
  }))), /*#__PURE__*/_react.default.createElement(_EditTearsheetForm.EditTearsheetForm, {
    title: "Message retention",
    subtitle: "This is how long messages are retained before they are deleted.",
    description: "If your messages are not read by a consumer within this time, they will be missed.",
    fieldsetLegendText: "Message retention scheduling"
  }, /*#__PURE__*/_react.default.createElement(_react2.Column, {
    xlg: 8,
    lg: 8,
    md: 8,
    sm: 8
  }, /*#__PURE__*/_react.default.createElement(_react2.RadioButtonGroup, {
    legendText: "Message retention",
    name: "radio-button-group",
    defaultSelected: formThreeTextInputValue,
    onChange: function onChange(value) {
      return setFormThreeTextInputValue(value);
    },
    orientation: "vertical"
  }, /*#__PURE__*/_react.default.createElement(_react2.RadioButton, {
    labelText: "A day",
    value: "one-day",
    id: "one-day"
  }), /*#__PURE__*/_react.default.createElement(_react2.RadioButton, {
    labelText: "A week",
    value: "one-week",
    id: "one-week"
  }), /*#__PURE__*/_react.default.createElement(_react2.RadioButton, {
    labelText: "A month",
    value: "one-month",
    id: "one-month"
  }))))));
};
exports.MultiFormEditTearsheet = MultiFormEditTearsheet;