"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditTearsheetForm = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _react2 = require("@carbon/react");
var _EditTearsheet = require("./EditTearsheet");
var _settings = require("../../settings");
var _pconsole = _interopRequireDefault(require("../../global/js/utils/pconsole"));
var _excluded = ["children", "className", "description", "fieldsetLegendText", "hasFieldset", "subtitle", "title"];
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var componentName = 'EditTearsheetForm';
var blockClass = "".concat(_settings.pkg.prefix, "--tearsheet-edit__form");

// Default values for props
var defaults = {
  hasFieldset: true
};
var EditTearsheetForm = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var _cx;
  var children = _ref.children,
    className = _ref.className,
    description = _ref.description,
    fieldsetLegendText = _ref.fieldsetLegendText,
    _ref$hasFieldset = _ref.hasFieldset,
    hasFieldset = _ref$hasFieldset === void 0 ? defaults.hasFieldset : _ref$hasFieldset,
    subtitle = _ref.subtitle,
    title = _ref.title,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var formContext = (0, _react.useContext)(_EditTearsheet.FormContext);
  var formNumber = (0, _react.useContext)(_EditTearsheet.FormNumberContext);
  return formContext ? /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, rest, {
    className: (0, _classnames.default)(blockClass, className, (_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__form--hidden-form"), formNumber !== (formContext === null || formContext === void 0 ? void 0 : formContext.currentForm)), (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__form--visible-form"), formNumber === (formContext === null || formContext === void 0 ? void 0 : formContext.currentForm)), _cx)),
    ref: ref
  }), /*#__PURE__*/_react.default.createElement(_react2.Grid, null, /*#__PURE__*/_react.default.createElement(_react2.Column, {
    xlg: 12,
    lg: 12,
    md: 8,
    sm: 4
  }, /*#__PURE__*/_react.default.createElement("h4", {
    className: "".concat(blockClass, "--title")
  }, title), subtitle && /*#__PURE__*/_react.default.createElement("h6", {
    className: "".concat(blockClass, "--subtitle")
  }, subtitle), description && /*#__PURE__*/_react.default.createElement("p", {
    className: "".concat(blockClass, "--description")
  }, description)), /*#__PURE__*/_react.default.createElement(_react2.Column, {
    span: 100
  }, hasFieldset ? /*#__PURE__*/_react.default.createElement(_react2.FormGroup, {
    legendText: fieldsetLegendText,
    className: "".concat(blockClass, "--fieldset")
  }, /*#__PURE__*/_react.default.createElement(_react2.Grid, null, children)) : children))) : _pconsole.default.warn("You have tried using a ".concat(componentName, " component outside of a EditTearsheet. This is not allowed. ").concat(componentName, "s should always be children of the EditTearsheet"));
});

// Return a placeholder if not released and not enabled by feature flag
exports.EditTearsheetForm = EditTearsheetForm;
exports.EditTearsheetForm = EditTearsheetForm = _settings.pkg.checkComponentEnabled(EditTearsheetForm, componentName);
EditTearsheetForm.propTypes = {
  /**
   * Content that shows in the tearsheet form
   */
  children: _propTypes.default.node,
  /**
   * Sets an optional className to be added to the tearsheet form
   */
  className: _propTypes.default.string,
  /**
   * Sets an optional description on the form component
   */
  description: _propTypes.default.string,
  /**
   * This is the required legend text that appears above a fieldset html element for accessibility purposes.
   * You can set the `hasFieldset` prop to false if you have multiple fieldset elements or want to control the children of your Full Page's form content.
   * Otherwise, use CSS to hide/remove this label text.
   */
  fieldsetLegendText: _propTypes.default.string.isRequired.if(function (_ref2) {
    var hasFieldset = _ref2.hasFieldset;
    return !!hasFieldset;
  }),
  /**
   * This optional prop will render your form content inside of a fieldset html element
   * and is defaulted to true.
   * You can set this prop to `false` if you have multiple fieldset elements or want to control the children of your Full Page's form content.
   */
  hasFieldset: _propTypes.default.bool,
  /**
   * Sets an optional subtitle on the form component
   */
  subtitle: _propTypes.default.string,
  /**
   * Sets the title text for a tearsheet form
   */
  title: _propTypes.default.node.isRequired
};