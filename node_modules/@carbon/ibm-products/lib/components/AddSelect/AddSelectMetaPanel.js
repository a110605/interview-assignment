"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddSelectMetaPanel = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _icons = require("@carbon/react/icons");
var _react2 = require("@carbon/react");
var _settings = require("../../settings");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
//
// Copyright IBM Corp. 2022, 2022
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

var blockClass = "".concat(_settings.pkg.prefix, "--add-select__meta-panel");
var componentName = 'AddSelectMetaPanel';
var AddSelectMetaPanel = function AddSelectMetaPanel(_ref) {
  var closeIconDescription = _ref.closeIconDescription,
    meta = _ref.meta,
    setDisplayMetaPanel = _ref.setDisplayMetaPanel,
    title = _ref.title;
  var onCloseHandler = function onCloseHandler() {
    setDisplayMetaPanel({});
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: blockClass
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "-header")
  }, /*#__PURE__*/_react.default.createElement("p", {
    className: "".concat(blockClass, "-title")
  }, title), /*#__PURE__*/_react.default.createElement(_react2.Button, {
    renderIcon: function renderIcon(props) {
      return /*#__PURE__*/_react.default.createElement(_icons.Close, (0, _extends2.default)({
        size: 16
      }, props));
    },
    className: "".concat(blockClass, "-close"),
    iconDescription: closeIconDescription,
    tooltipPosition: "left",
    tooltipAlignment: "center",
    hasIconOnly: true,
    onClick: onCloseHandler,
    kind: "ghost",
    size: "sm"
  })), /*#__PURE__*/(0, _react.isValidElement)(meta) ? meta : meta.map(function (entry) {
    return /*#__PURE__*/_react.default.createElement("div", {
      key: entry === null || entry === void 0 ? void 0 : entry.id,
      className: "".concat(blockClass, "-entry")
    }, /*#__PURE__*/_react.default.createElement("p", {
      className: "".concat(blockClass, "-entry-title")
    }, entry === null || entry === void 0 ? void 0 : entry.title), /*#__PURE__*/_react.default.createElement("p", {
      className: "".concat(blockClass, "-entry-body")
    }, entry === null || entry === void 0 ? void 0 : entry.value));
  }));
};
exports.AddSelectMetaPanel = AddSelectMetaPanel;
AddSelectMetaPanel.propTypes = {
  closeIconDescription: _propTypes.default.string.isRequired,
  meta: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string,
    title: _propTypes.default.string,
    value: _propTypes.default.string
  })), _propTypes.default.node]).isRequired,
  setDisplayMetaPanel: _propTypes.default.func.isRequired,
  title: _propTypes.default.string.isRequired
};
AddSelectMetaPanel.displayName = componentName;