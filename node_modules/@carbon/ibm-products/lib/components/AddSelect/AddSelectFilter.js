"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddSelectFilter = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@carbon/react");
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _icons = require("@carbon/react/icons");
var _settings = require("../../settings");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } //
// Copyright IBM Corp. 2022, 2022
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//
var blockClass = "".concat(_settings.pkg.prefix, "--add-select__global-filter");
var componentName = 'AddSelectFilter';
var AddSelectFilter = function AddSelectFilter(_ref) {
  var appliedFilters = _ref.appliedFilters,
    clearFiltersText = _ref.clearFiltersText,
    filterOpts = _ref.filterOpts,
    filtersLabel = _ref.filtersLabel,
    handleFilter = _ref.handleFilter,
    handleSearch = _ref.handleSearch,
    hasFiltersApplied = _ref.hasFiltersApplied,
    iconDescription = _ref.iconDescription,
    inputLabel = _ref.inputLabel,
    inputPlaceholder = _ref.inputPlaceholder,
    multi = _ref.multi,
    placeholder = _ref.placeholder,
    primaryButtonText = _ref.primaryButtonText,
    searchTerm = _ref.searchTerm,
    secondaryButtonText = _ref.secondaryButtonText;
  var _useState = (0, _react.useState)({}),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    filters = _useState2[0],
    setFilters = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    open = _useState4[0],
    setOpen = _useState4[1];
  var searchHandler = function searchHandler(e) {
    handleSearch(e.target.value);
  };
  var onchangeHandler = function onchangeHandler(_ref2, id) {
    var selectedItem = _ref2.selectedItem;
    setFilters(_objectSpread(_objectSpread({}, filters), {}, (0, _defineProperty2.default)({}, id, selectedItem)));
  };

  /**
   * this component needs to manage it's own internal state of filters before they're applied
   * setFilters manages the local filter state
   * applyFilters adds the filter state to the parent
   * resetFilters resets the local state
   * clearFilters resets both
   */
  var applyFilters = function applyFilters() {
    setOpen(false);
    handleFilter(filters);
  };
  var resetFilters = function resetFilters() {
    setFilters({});
  };
  var clearFilters = function clearFilters() {
    resetFilters();
    handleFilter({});
  };
  var removeTag = function removeTag(key) {
    var newFilters = _objectSpread({}, filters);
    delete newFilters[key];
    setFilters(newFilters);
    handleFilter(newFilters);
  };
  var getSelectedItem = function getSelectedItem(id) {
    return filters[id] || '';
  };
  var showFilter = multi && (filterOpts === null || filterOpts === void 0 ? void 0 : filterOpts.length) > 0;
  var filterBtnClassnames = (0, _classnames.default)("".concat(blockClass, "-toggle"), (0, _defineProperty2.default)({}, "".concat(blockClass, "-toggle--open"), open));
  var dirtyInput = Object.keys(filters).length > 0;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "-search")
  }, /*#__PURE__*/_react.default.createElement(_react2.Search, {
    id: "add-select-global-search-filter",
    labelText: inputLabel,
    placeholder: inputPlaceholder,
    value: searchTerm,
    onChange: searchHandler
  }), showFilter && /*#__PURE__*/_react.default.createElement(_react2.Button, {
    renderIcon: function renderIcon(props) {
      return /*#__PURE__*/_react.default.createElement(_icons.Filter, (0, _extends2.default)({
        size: 16
      }, props));
    },
    hasIconOnly: true,
    kind: "ghost",
    onClick: function onClick() {
      return setOpen(!open);
    },
    iconDescription: iconDescription,
    className: filterBtnClassnames,
    size: "md",
    tooltipPosition: "left"
  }), open && /*#__PURE__*/_react.default.createElement(_react2.Layer, {
    className: blockClass,
    level: 1
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "-content")
  }, /*#__PURE__*/_react.default.createElement("p", null, filtersLabel), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "-opts")
  }, filterOpts.map(function (filterOpts) {
    return /*#__PURE__*/_react.default.createElement(_react2.Dropdown, {
      key: filterOpts.id,
      id: filterOpts.id,
      titleText: filterOpts.label,
      items: filterOpts.opts,
      onChange: function onChange(value) {
        return onchangeHandler(value, filterOpts.id);
      },
      selectedItem: getSelectedItem(filterOpts.id),
      label: placeholder
    });
  }))), /*#__PURE__*/_react.default.createElement(_react2.ButtonSet, {
    className: "".concat(blockClass, "-button-set")
  }, /*#__PURE__*/_react.default.createElement(_react2.Button, {
    kind: "secondary",
    onClick: resetFilters,
    className: "".concat(blockClass, "-button"),
    disabled: !dirtyInput
  }, secondaryButtonText), /*#__PURE__*/_react.default.createElement(_react2.Button, {
    kind: "primary",
    onClick: applyFilters,
    className: "".concat(blockClass, "-button"),
    disabled: !dirtyInput && !hasFiltersApplied
  }, primaryButtonText)))), hasFiltersApplied && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "-applied")
  }, Object.keys(appliedFilters).map(function (filterType) {
    return /*#__PURE__*/_react.default.createElement(_react2.Tag, {
      key: filterType,
      type: "gray",
      size: "sm",
      onClose: function onClose() {
        return removeTag(filterType);
      },
      filter: true
    }, "".concat(filterType, ": ").concat(appliedFilters[filterType]));
  }), /*#__PURE__*/_react.default.createElement(_react2.Button, {
    kind: "ghost",
    size: "sm",
    onClick: clearFilters
  }, clearFiltersText)));
};
exports.AddSelectFilter = AddSelectFilter;
AddSelectFilter.propTypes = {
  appliedFilters: _propTypes.default.object,
  clearFiltersText: _propTypes.default.string,
  filterOpts: _propTypes.default.array,
  filtersLabel: _propTypes.default.string,
  handleFilter: _propTypes.default.func,
  handleSearch: _propTypes.default.func,
  hasFiltersApplied: _propTypes.default.bool,
  iconDescription: _propTypes.default.string,
  inputLabel: _propTypes.default.string.isRequired,
  inputPlaceholder: _propTypes.default.string,
  multi: _propTypes.default.bool,
  placeholder: _propTypes.default.string,
  primaryButtonText: _propTypes.default.string,
  searchTerm: _propTypes.default.string,
  secondaryButtonText: _propTypes.default.string
};
AddSelectFilter.displayName = componentName;