"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddSelectSidebar = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@carbon/react");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _NoDataEmptyState = require("../../components/EmptyStates/NoDataEmptyState");
var _settings = require("../../settings");
var _AddSelectMetaPanel = require("./AddSelectMetaPanel");
var _excluded = ["meta", "icon", "avatar"]; //
// Copyright IBM Corp. 2022, 2022
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//
var blockClass = "".concat(_settings.pkg.prefix, "--add-select__sidebar");
var componentName = 'AddSelectSidebar';
var AddSelectSidebar = function AddSelectSidebar(_ref) {
  var _modifiers$options;
  var appliedModifiers = _ref.appliedModifiers,
    closeIconDescription = _ref.closeIconDescription,
    displayMetalPanel = _ref.displayMetalPanel,
    illustrationTheme = _ref.illustrationTheme,
    influencerTitle = _ref.influencerTitle,
    items = _ref.items,
    metaPanelTitle = _ref.metaPanelTitle,
    modifiers = _ref.modifiers,
    multiSelection = _ref.multiSelection,
    noSelectionDescription = _ref.noSelectionDescription,
    noSelectionTitle = _ref.noSelectionTitle,
    setDisplayMetaPanel = _ref.setDisplayMetaPanel;
  var hasModifiers = (modifiers === null || modifiers === void 0 ? void 0 : (_modifiers$options = modifiers.options) === null || _modifiers$options === void 0 ? void 0 : _modifiers$options.length) > 0;
  var hasSelections = multiSelection.length > 0;
  var getNewItem = function getNewItem(item) {
    // certain properties should not be displayed in the sidebar
    // eslint-disable-next-line no-unused-vars
    var meta = item.meta,
      icon = item.icon,
      avatar = item.avatar,
      newItem = (0, _objectWithoutProperties2.default)(item, _excluded);
    return newItem;
  };
  var sidebarItems = multiSelection.map(function (selectionId) {
    if (Array.isArray(items)) {
      var selectedItem = items.find(function (item) {
        return item.id === selectionId;
      });
      return getNewItem(selectedItem);
    }
    return getNewItem(items[selectionId]);
  });
  var getTitle = function getTitle(item) {
    return /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(blockClass, "-accordion-title")
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(blockClass, "-selected-item")
    }, /*#__PURE__*/_react.default.createElement("p", {
      className: "".concat(blockClass, "-selected-item-title")
    }, item.title), /*#__PURE__*/_react.default.createElement("p", {
      className: "".concat(blockClass, "-selected-item-subtitle")
    }, item.subtitle)), hasModifiers && /*#__PURE__*/_react.default.createElement("div", null, appliedModifiers.find(function (modifier) {
      return modifier.id === item.id;
    })[modifiers.id]));
  };
  if (Object.keys(displayMetalPanel).length !== 0) {
    return /*#__PURE__*/_react.default.createElement(_AddSelectMetaPanel.AddSelectMetaPanel, {
      closeIconDescription: closeIconDescription,
      meta: displayMetalPanel.meta,
      setDisplayMetaPanel: setDisplayMetaPanel,
      title: metaPanelTitle
    });
  }
  return /*#__PURE__*/_react.default.createElement("div", {
    className: blockClass
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "-header")
  }, /*#__PURE__*/_react.default.createElement("p", {
    className: "".concat(blockClass, "-title")
  }, influencerTitle), /*#__PURE__*/_react.default.createElement(_react2.Tag, {
    type: "gray",
    size: "sm"
  }, multiSelection.length)), hasSelections ? /*#__PURE__*/_react.default.createElement(_react2.Accordion, {
    align: "start"
  }, sidebarItems.map(function (item) {
    return /*#__PURE__*/_react.default.createElement(_react2.AccordionItem, {
      title: getTitle(item),
      key: item.id
    }, Object.keys(item).map(function (key) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "".concat(blockClass, "-item"),
        key: key
      }, /*#__PURE__*/_react.default.createElement("p", {
        className: "".concat(blockClass, "-item-header")
      }, key), /*#__PURE__*/_react.default.createElement("p", {
        className: "".concat(blockClass, "-item-body")
      }, item[key]));
    }));
  })) : /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "-body")
  }, /*#__PURE__*/_react.default.createElement(_NoDataEmptyState.NoDataEmptyState, {
    subtitle: noSelectionDescription,
    title: noSelectionTitle,
    size: "sm",
    illustrationTheme: illustrationTheme
  })));
};
exports.AddSelectSidebar = AddSelectSidebar;
AddSelectSidebar.propTypes = {
  appliedModifiers: _propTypes.default.array,
  closeIconDescription: _propTypes.default.string,
  displayMetalPanel: _propTypes.default.object,
  illustrationTheme: _propTypes.default.oneOf(['light', 'dark']),
  influencerTitle: _propTypes.default.string,
  items: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array]),
  metaPanelTitle: _propTypes.default.string,
  modifiers: _propTypes.default.object,
  multiSelection: _propTypes.default.array,
  noSelectionDescription: _propTypes.default.string,
  noSelectionTitle: _propTypes.default.string,
  setDisplayMetaPanel: _propTypes.default.func
};
AddSelectSidebar.displayName = componentName;