"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddSelectRow = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = _interopRequireWildcard(require("react"));
var _react2 = require("@carbon/react");
var _icons = require("@carbon/react/icons");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _settings = require("../../settings");
var _AddSelectFormControl = require("./AddSelectFormControl");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
//
// Copyright IBM Corp. 2022, 2022
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

var blockClass = "".concat(_settings.pkg.prefix, "--add-select__selections");
var componentName = 'AddSelectList';
var AddSelectRow = function AddSelectRow(_ref) {
  var _modifiers$options, _cx;
  var appliedModifiers = _ref.appliedModifiers,
    displayMetalPanel = _ref.displayMetalPanel,
    index = _ref.index,
    focus = _ref.focus,
    item = _ref.item,
    metaIconDescription = _ref.metaIconDescription,
    modifiers = _ref.modifiers,
    multi = _ref.multi,
    multiSelection = _ref.multiSelection,
    navIconDescription = _ref.navIconDescription,
    parentId = _ref.parentId,
    parentSelected = _ref.parentSelected,
    setAppliedModifiers = _ref.setAppliedModifiers,
    setDisplayMetaPanel = _ref.setDisplayMetaPanel,
    setFocus = _ref.setFocus,
    setMultiSelection = _ref.setMultiSelection,
    setParentSelected = _ref.setParentSelected,
    setSingleSelection = _ref.setSingleSelection,
    setSize = _ref.setSize,
    singleSelection = _ref.singleSelection;
  var ref = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (focus === index) {
      ref.current.focus();
    }
  }, [focus, index]);
  var isSelected = function isSelected() {
    if (multi) {
      return multiSelection.includes(item.id);
    }
    return item.id === singleSelection;
  };
  var getTabIndex = function getTabIndex() {
    // on initial load make the first item tabbable
    if (index === 0 && focus === '') {
      return 0;
    }

    // make it so only the last focused item is tabbable
    if (focus === index && focus !== '') {
      return 0;
    }

    // make unfocused items un-tabbable
    return -1;
  };
  var focusHandler = (0, _react.useCallback)(function (reset) {
    setFocus(reset ? '' : index);
  }, [setFocus, index]);
  var handleSingleSelection = function handleSingleSelection() {
    setSingleSelection(item.id);
  };
  var onSelectKeyDown = function onSelectKeyDown(_ref2) {
    var key = _ref2.key;
    if (key === 'Enter' || key === ' ') {
      if (multi) {
        handleMultiSelection();
      } else {
        handleSingleSelection();
      }
    } else if (key === 'ArrowRight' && item.children) {
      onNavigateItem();
    }
  };
  var handleMultiSelection = function handleMultiSelection() {
    var checked = isSelected();
    if (!checked) {
      var newValues = [].concat((0, _toConsumableArray2.default)(multiSelection), [item.id]);
      setMultiSelection(newValues);
    } else {
      var _newValues = multiSelection.filter(function (v) {
        return v !== item.id;
      });
      setMultiSelection(_newValues);
    }
  };
  var onNavigateItem = function onNavigateItem() {
    focusHandler(true);
    setParentSelected(item.id, item.title, parentId);
  };
  var modifierHandler = function modifierHandler(id, selectedItem) {
    var modifiersClone = (0, _toConsumableArray2.default)(appliedModifiers);
    var modifierIdx = modifiersClone.findIndex(function (item) {
      return item.id === id;
    });
    modifiersClone[modifierIdx] = (0, _defineProperty2.default)({
      id: id
    }, modifiers.id, selectedItem);
    setAppliedModifiers(modifiersClone);
  };
  var metaPanelHandler = function metaPanelHandler() {
    if (item.meta) {
      setDisplayMetaPanel(item);
    }
  };
  var isInMetaPanel = function isInMetaPanel(id) {
    return id === (displayMetalPanel === null || displayMetalPanel === void 0 ? void 0 : displayMetalPanel.id);
  };
  var hasModifiers = (modifiers === null || modifiers === void 0 ? void 0 : (_modifiers$options = modifiers.options) === null || _modifiers$options === void 0 ? void 0 : _modifiers$options.length) > 0;
  var tabIndex = getTabIndex();
  var selected = isSelected();
  var expanded = parentSelected === item.id;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)("".concat(blockClass, "-row"), (_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(blockClass, "-row--selected"), isSelected()), (0, _defineProperty2.default)(_cx, "".concat(blockClass, "-row-meta--selected"), isInMetaPanel(item.id)), (0, _defineProperty2.default)(_cx, "".concat(blockClass, "-row--active"), expanded), _cx)),
    onKeyDown: onSelectKeyDown,
    tabIndex: tabIndex,
    ref: ref,
    role: "row",
    "aria-selected": selected,
    "aria-posinset": index,
    "aria-setsize": setSize,
    "aria-expanded": expanded
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "-cell"),
    role: "gridcell"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "-cell-wrapper")
  }, multi ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_AddSelectFormControl.AddSelectFormControl, {
    type: "checkbox",
    item: item,
    selected: selected,
    onClick: handleMultiSelection
  }), hasModifiers && /*#__PURE__*/_react.default.createElement(_react2.Layer, null, /*#__PURE__*/_react.default.createElement(_react2.Dropdown, {
    id: "add-select-modifier-".concat(item.id),
    type: "inline",
    items: modifiers.options,
    label: modifiers.label,
    disabled: !isSelected(),
    className: "".concat(blockClass, "-dropdown"),
    initialSelectedItem: item[modifiers.id],
    onChange: function onChange(_ref3) {
      var selectedItem = _ref3.selectedItem;
      return modifierHandler(item.id, selectedItem);
    }
  }))) : /*#__PURE__*/_react.default.createElement(_AddSelectFormControl.AddSelectFormControl, {
    type: "radio",
    item: item,
    selected: selected,
    onClick: handleSingleSelection
  }), item.children && /*#__PURE__*/_react.default.createElement(_react2.Button, {
    className: "".concat(blockClass, "-view-children"),
    renderIcon: function renderIcon(props) {
      return /*#__PURE__*/_react.default.createElement(_icons.ChevronRight, (0, _extends2.default)({
        size: 16
      }, props));
    },
    iconDescription: navIconDescription,
    tooltipPosition: "left",
    tooltipAlignment: "center",
    hasIconOnly: true,
    onClick: onNavigateItem,
    kind: "ghost",
    size: "sm",
    tabIndex: -1,
    "aria-hidden": true
  }), item.meta && /*#__PURE__*/_react.default.createElement(_react2.Button, {
    className: "".concat(blockClass, "-view-meta"),
    renderIcon: function renderIcon(props) {
      return /*#__PURE__*/_react.default.createElement(_icons.View, (0, _extends2.default)({
        size: 16
      }, props));
    },
    iconDescription: metaIconDescription,
    tooltipPosition: "left",
    tooltipAlignment: "center",
    hasIconOnly: true,
    kind: "ghost",
    size: "sm",
    onClick: metaPanelHandler
  }))));
};
exports.AddSelectRow = AddSelectRow;
AddSelectRow.propTypes = {
  appliedModifiers: _propTypes.default.array,
  displayMetalPanel: _propTypes.default.object,
  filteredItems: _propTypes.default.array,
  focus: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  index: _propTypes.default.number,
  item: _propTypes.default.object,
  metaIconDescription: _propTypes.default.string,
  modifiers: _propTypes.default.object,
  multi: _propTypes.default.bool,
  multiSelection: _propTypes.default.array,
  navIconDescription: _propTypes.default.string,
  parentId: _propTypes.default.string,
  parentSelected: _propTypes.default.string,
  setAppliedModifiers: _propTypes.default.func,
  setDisplayMetaPanel: _propTypes.default.func,
  setFocus: _propTypes.default.func,
  setMultiSelection: _propTypes.default.func,
  setParentSelected: _propTypes.default.func,
  setSingleSelection: _propTypes.default.func,
  setSize: _propTypes.default.number,
  singleSelection: _propTypes.default.string
};
AddSelectRow.displayName = componentName;