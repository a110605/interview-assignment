"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddSelect = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _AddSelectBody = require("./AddSelectBody");
var _addSelectUtils = require("./add-select-utils");
var _excluded = ["items", "globalFilters"]; //
// Copyright IBM Corp. 2022, 2022
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var componentName = 'AddSelect';
var AddSelect = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var items = _ref.items,
    globalFilters = _ref.globalFilters,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var useNormalizedItems = !!items.entries.find(function (item) {
    return item.children;
  });
  var normalizedItems = useNormalizedItems ? (0, _addSelectUtils.normalize)(items) : null;
  var globalFilterOpts = props.multi && globalFilters !== null && globalFilters !== void 0 && globalFilters.length ? (0, _addSelectUtils.getGlobalFilterValues)(globalFilters, normalizedItems) : null;
  var defaultModifiers = props.multi && items.modifiers ? items.entries.map(function (item) {
    var modifierAttribute = items.modifiers.id;
    return (0, _defineProperty2.default)({
      id: item.id
    }, modifierAttribute, item[modifierAttribute]);
  }) : [];
  return /*#__PURE__*/_react.default.createElement(_AddSelectBody.AddSelectBody, (0, _extends2.default)({}, props, {
    ref: ref,
    items: items,
    normalizedItems: normalizedItems,
    useNormalizedItems: useNormalizedItems,
    globalFilterOpts: globalFilterOpts,
    defaultModifiers: defaultModifiers
  }));
});
exports.AddSelect = AddSelect;
AddSelect.propTypes = {
  className: _propTypes.default.string,
  clearFiltersText: _propTypes.default.string,
  closeIconDescription: _propTypes.default.string.isRequired,
  columnInputPlaceholder: _propTypes.default.string,
  description: _propTypes.default.string.isRequired,
  filterByLabel: _propTypes.default.string,
  globalFilters: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string,
    label: _propTypes.default.string
  })),
  globalFiltersIconDescription: _propTypes.default.string,
  globalFiltersLabel: _propTypes.default.string,
  globalFiltersPlaceholderText: _propTypes.default.string,
  globalFiltersPrimaryButtonText: _propTypes.default.string,
  globalFiltersSecondaryButtonText: _propTypes.default.string,
  globalSearchLabel: _propTypes.default.string.isRequired,
  globalSearchPlaceholder: _propTypes.default.string,
  globalSortBy: _propTypes.default.array,
  illustrationTheme: _propTypes.default.oneOf(['light', 'dark']),
  influencerTitle: _propTypes.default.string,
  items: _propTypes.default.shape({
    modifiers: _propTypes.default.shape({
      id: _propTypes.default.string,
      label: _propTypes.default.string,
      options: _propTypes.default.array
    }),
    sortBy: _propTypes.default.array,
    filterBy: _propTypes.default.array,
    entries: _propTypes.default.arrayOf(_propTypes.default.shape({
      avatar: _propTypes.default.shape({
        alt: _propTypes.default.string,
        icon: _propTypes.default.func,
        src: _propTypes.default.string,
        theme: _propTypes.default.oneOf(['light', 'dark'])
      }),
      children: _propTypes.default.object,
      icon: _propTypes.default.func,
      id: _propTypes.default.string.isRequired,
      meta: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.shape({
        id: _propTypes.default.string,
        title: _propTypes.default.string,
        value: _propTypes.default.string
      })), _propTypes.default.node]),
      subtitle: _propTypes.default.string,
      title: _propTypes.default.string.isRequired,
      value: _propTypes.default.string.isRequired
    })).isRequired
  }).isRequired,
  itemsLabel: _propTypes.default.string.isRequired,
  metaIconDescription: _propTypes.default.string,
  metaPanelTitle: _propTypes.default.string,
  multi: _propTypes.default.bool.isRequired,
  navIconDescription: _propTypes.default.string,
  noResultsDescription: _propTypes.default.string.isRequired,
  noResultsTitle: _propTypes.default.string.isRequired,
  noSelectionDescription: _propTypes.default.string,
  noSelectionTitle: _propTypes.default.string,
  onClose: _propTypes.default.func.isRequired,
  onCloseButtonText: _propTypes.default.string.isRequired,
  onSubmit: _propTypes.default.func.isRequired,
  onSubmitButtonText: _propTypes.default.string.isRequired,
  open: _propTypes.default.bool.isRequired,
  /**
   * portal target for the all tags modal
   */
  portalTarget: _propTypes.default.node,
  searchResultsTitle: _propTypes.default.string,
  sortByLabel: _propTypes.default.string,
  title: _propTypes.default.string.isRequired
};
AddSelect.defaultProps = {
  closeIconDescription: '',
  description: '',
  itemsLabel: '',
  items: {
    entries: []
  },
  multi: false,
  noResultsDescription: '',
  noResultsTitle: '',
  onClose: function onClose() {},
  onCloseButtonText: '',
  onSubmit: function onSubmit() {},
  onSubmitButtonText: '',
  open: false,
  title: ''
};
AddSelect.displayName = componentName;