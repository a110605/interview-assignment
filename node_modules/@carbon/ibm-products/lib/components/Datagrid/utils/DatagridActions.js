"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatagridActions = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _icons = require("@carbon/react/icons");
var _react = require("@carbon/react");
var _ButtonMenu = require("../../ButtonMenu");
var _react2 = _interopRequireWildcard(require("react"));
var _addonActions = require("@storybook/addon-actions");
var _settings = require("../../../settings");
var _hooks = require("../Datagrid/addons/Filtering/hooks");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * Copyright IBM Corp. 2020, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var DatagridActions = function DatagridActions(datagridState) {
  var _useFilterContext = (0, _hooks.useFilterContext)(),
    setPanelOpen = _useFilterContext.setPanelOpen;
  var selectedFlatRows = datagridState.selectedFlatRows,
    setGlobalFilter = datagridState.setGlobalFilter,
    CustomizeColumnsButton = datagridState.CustomizeColumnsButton,
    RowSizeDropdown = datagridState.RowSizeDropdown,
    rowSizeDropdownProps = datagridState.rowSizeDropdownProps,
    useDenseHeader = datagridState.useDenseHeader,
    filterProps = datagridState.filterProps,
    getFilterFlyoutProps = datagridState.getFilterFlyoutProps,
    FilterFlyout = datagridState.FilterFlyout,
    data = datagridState.data;
  var downloadCsv = function downloadCsv() {
    alert('Downloading...');
  };
  var refreshColumns = function refreshColumns() {
    alert('refreshing...');
  };
  var searchForAColumn = 'Search';
  var isNothingSelected = selectedFlatRows.length === 0;
  var style = {
    'button:nthChild(1) > span:nthChild(1)': {
      bottom: '-37px'
    }
  };
  var renderFilterFlyout = function renderFilterFlyout() {
    return (filterProps === null || filterProps === void 0 ? void 0 : filterProps.variation) === 'flyout' && /*#__PURE__*/_react2.default.createElement(FilterFlyout, getFilterFlyoutProps());
  };
  var renderFilterPanelButton = function renderFilterPanelButton() {
    return (filterProps === null || filterProps === void 0 ? void 0 : filterProps.variation) === 'panel' && /*#__PURE__*/_react2.default.createElement(_react.IconButton, {
      kind: "ghost",
      align: "bottom",
      label: filterProps.panelIconDescription,
      className: "".concat(blockClass, "-filter-panel-open-button"),
      onClick: function onClick() {
        return setPanelOpen(function (open) {
          return !open;
        });
      },
      disabled: data.length === 0
    }, /*#__PURE__*/_react2.default.createElement(_icons.Filter, null));
  };
  var _useState = (0, _react2.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    modalOpen = _useState2[0],
    setModalOpen = _useState2[1];
  var _useState3 = (0, _react2.useState)(window.innerWidth),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    size = _useState4[0],
    setSize = _useState4[1];
  (0, _react2.useLayoutEffect)(function () {
    function updateSize() {
      setSize(window.innerWidth);
    }
    window.addEventListener('resize', updateSize);
    return function () {
      return window.removeEventListener('resize', updateSize);
    };
  }, []);
  var mobileToolbar = size < 672 ? true : false;
  var items = ['Option 1', 'Option 2', 'Option 3'];
  return isNothingSelected && (useDenseHeader && useDenseHeader ? /*#__PURE__*/_react2.default.createElement(_react.TableToolbarContent, {
    size: "sm"
  }, !mobileToolbar ? /*#__PURE__*/_react2.default.createElement(_react2.default.Fragment, null, renderFilterPanelButton(), /*#__PURE__*/_react2.default.createElement("div", {
    style: style
  }, /*#__PURE__*/_react2.default.createElement(_react.Button, {
    kind: "ghost",
    hasIconOnly: true,
    tooltipPosition: "bottom",
    renderIcon: _icons.Download,
    iconDescription: 'Download CSV',
    onClick: downloadCsv
  })), renderFilterFlyout(), CustomizeColumnsButton && /*#__PURE__*/_react2.default.createElement("div", {
    style: style
  }, /*#__PURE__*/_react2.default.createElement(CustomizeColumnsButton, null)), /*#__PURE__*/_react2.default.createElement(RowSizeDropdown, rowSizeDropdownProps), /*#__PURE__*/_react2.default.createElement("div", {
    style: style,
    className: "".concat(blockClass, "__toolbar-divider")
  }, /*#__PURE__*/_react2.default.createElement(_react.Button, {
    kind: "ghost",
    renderIcon: _icons.Add,
    iconDescription: 'Action'
  }, "Ghost button"))) : /*#__PURE__*/_react2.default.createElement(_react.OverflowMenu, {
    "aria-label": "Tools",
    size: "md",
    flipped: true
  }, /*#__PURE__*/_react2.default.createElement(_react.OverflowMenuItem, {
    itemText: "Filter",
    hasDivider: true,
    requireTitle: true,
    onClick: function onClick() {
      return setModalOpen(true);
    }
  }), /*#__PURE__*/_react2.default.createElement(_react.OverflowMenuItem, {
    itemText: "Export",
    hasDivider: true,
    requireTitle: true
  }), /*#__PURE__*/_react2.default.createElement(_react.OverflowMenuItem, {
    itemText: "Settings",
    hasDivider: true,
    requireTitle: true
  }), /*#__PURE__*/_react2.default.createElement(_react.OverflowMenuItem, {
    itemText: "Import items",
    hasDivider: true,
    requireTitle: true
  }), /*#__PURE__*/_react2.default.createElement(_react.OverflowMenuItem, {
    itemText: "Create",
    hasDivider: true,
    requireTitle: true
  }))) : !mobileToolbar ? /*#__PURE__*/_react2.default.createElement(_react.TableToolbarContent, null, renderFilterPanelButton(), /*#__PURE__*/_react2.default.createElement(_react.TableToolbarSearch, {
    size: "xl",
    id: "columnSearch",
    persistent: true,
    placeHolderText: searchForAColumn,
    onChange: function onChange(e) {
      return setGlobalFilter(e.target.value);
    }
  }), renderFilterFlyout(), /*#__PURE__*/_react2.default.createElement("div", {
    style: style
  }, /*#__PURE__*/_react2.default.createElement(_react.Button, {
    kind: "ghost",
    hasIconOnly: true,
    tooltipPosition: "bottom",
    renderIcon: _icons.Restart,
    iconDescription: 'Refresh',
    onClick: refreshColumns
  })), /*#__PURE__*/_react2.default.createElement("div", {
    style: style
  }, /*#__PURE__*/_react2.default.createElement(_react.Button, {
    kind: "ghost",
    hasIconOnly: true,
    tooltipPosition: "bottom",
    renderIcon: _icons.Download,
    iconDescription: 'Download CSV',
    onClick: downloadCsv
  })), CustomizeColumnsButton && /*#__PURE__*/_react2.default.createElement("div", {
    style: style
  }, /*#__PURE__*/_react2.default.createElement(CustomizeColumnsButton, null)), /*#__PURE__*/_react2.default.createElement(RowSizeDropdown, rowSizeDropdownProps), /*#__PURE__*/_react2.default.createElement(_ButtonMenu.ButtonMenu, {
    label: "Primary button",
    renderIcon: _icons.ChevronDown,
    menuOptionsClass: "".concat(blockClass, "__toolbar-options")
  }, /*#__PURE__*/_react2.default.createElement(_ButtonMenu.ButtonMenuItem, {
    itemText: "Option 1",
    onClick: (0, _addonActions.action)("Click on ButtonMenu Option 1")
  }), /*#__PURE__*/_react2.default.createElement(_ButtonMenu.ButtonMenuItem, {
    itemText: "Option 2",
    onClick: (0, _addonActions.action)("Click on ButtonMenu Option 2")
  }), /*#__PURE__*/_react2.default.createElement(_ButtonMenu.ButtonMenuItem, {
    itemText: "Option 3",
    onClick: (0, _addonActions.action)("Click on ButtonMenu Option 3")
  }))) : /*#__PURE__*/_react2.default.createElement(_react.TableToolbarContent, null, renderFilterPanelButton(), /*#__PURE__*/_react2.default.createElement(_react.TableToolbarSearch, {
    size: "xl",
    id: "columnSearch",
    persistent: true,
    placeHolderText: searchForAColumn,
    onChange: function onChange(e) {
      return setGlobalFilter(e.target.value);
    }
  }), renderFilterFlyout(), /*#__PURE__*/_react2.default.createElement(_react.OverflowMenu, {
    "aria-label": "Tools",
    size: "lg",
    flipped: true,
    renderIcon: _icons.ChevronDown,
    className: "".concat(blockClass, "__toolbar-menu__trigger"),
    menuOptionsClass: "".concat(blockClass, "__toolbar-options")
  }, /*#__PURE__*/_react2.default.createElement(_react.OverflowMenuItem, {
    itemText: "Filter",
    hasDivider: true,
    requireTitle: true,
    onClick: function onClick() {
      return setModalOpen(true);
    }
  }), /*#__PURE__*/_react2.default.createElement(_react.OverflowMenuItem, {
    itemText: "Export",
    hasDivider: true,
    requireTitle: true
  }), /*#__PURE__*/_react2.default.createElement(_react.OverflowMenuItem, {
    itemText: "Settings",
    hasDivider: true,
    requireTitle: true
  }), /*#__PURE__*/_react2.default.createElement(_react.OverflowMenuItem, {
    itemText: "Import items",
    hasDivider: true,
    requireTitle: true
  }), /*#__PURE__*/_react2.default.createElement(_react.OverflowMenuItem, {
    itemText: "Create",
    hasDivider: true,
    requireTitle: true
  })), modalOpen && /*#__PURE__*/_react2.default.createElement(_react.ComposedModal, {
    size: "lg",
    open: modalOpen && modalOpen,
    onClose: function onClose() {
      return setModalOpen(false);
    },
    className: "".concat(blockClass, "__mobile-toolbar-modal")
  }, /*#__PURE__*/_react2.default.createElement(_react.ModalHeader, null, /*#__PURE__*/_react2.default.createElement("h4", null, "Filters")), /*#__PURE__*/_react2.default.createElement(_react.ModalBody, null, /*#__PURE__*/_react2.default.createElement(_react.Dropdown, {
    initialSelectedItem: items[2],
    items: items,
    titleText: "Label",
    id: "filter1"
  }), /*#__PURE__*/_react2.default.createElement(_react.Dropdown, {
    initialSelectedItem: items[2],
    items: items,
    titleText: "Label",
    id: "filter2"
  }), /*#__PURE__*/_react2.default.createElement(_react.Dropdown, {
    initialSelectedItem: items[2],
    items: items,
    titleText: "Label",
    id: "filter3"
  })), /*#__PURE__*/_react2.default.createElement(_react.ModalFooter, {
    primaryButtonText: "Apply",
    secondaryButtonText: "Cancel"
  }))));
};
exports.DatagridActions = DatagridActions;