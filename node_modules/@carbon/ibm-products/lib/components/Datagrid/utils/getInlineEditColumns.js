"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.inlineEditSelectItems = exports.getInlineEditColumns = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireDefault(require("react"));
var _icons = require("@carbon/react/icons");
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

var inlineEditSelectItems = [{
  id: 'option-0',
  icon: function icon(props) {
    return /*#__PURE__*/_react.default.createElement(_icons.ChartColumnFloating, (0, _extends2.default)({
      size: 16
    }, props));
  },
  text: 'Column Chart'
}, {
  id: 'option-1',
  icon: function icon(props) {
    return /*#__PURE__*/_react.default.createElement(_icons.ChartBubble, (0, _extends2.default)({
      size: 16
    }, props));
  },
  text: 'Bubble Chart'
}, {
  id: 'option-2',
  icon: function icon(props) {
    return /*#__PURE__*/_react.default.createElement(_icons.ChartVennDiagram, (0, _extends2.default)({
      size: 16
    }, props));
  },
  text: 'Venn Diagram'
}];
exports.inlineEditSelectItems = inlineEditSelectItems;
var getInlineEditColumns = function getInlineEditColumns() {
  return [{
    Header: 'Row Index',
    accessor: function accessor(row, i) {
      return i;
    },
    id: 'rowIndex' // id is required when accessor is a function.
  }, {
    Header: 'First Name',
    accessor: 'firstName',
    inlineEdit: {
      type: 'text',
      // required for including validation, this is used to set the invalid prop internally
      validator: function validator(n) {
        return n.length > 40;
      },
      // These props are passed to the Carbon component used for inline editing
      inputProps: {
        invalidText: 'Invalid text, character count must be less than 40'
      }
    }
  }, {
    Header: 'Last Name',
    accessor: 'lastName',
    inlineEdit: {
      type: 'text',
      // required for including validation, this is used to set the invalid prop internally
      validator: function validator(n) {
        return n.length > 40;
      },
      // These props are passed to the Carbon component used for inline editing
      inputProps: {
        invalidText: 'Invalid text, character count must be less than 40'
      }
    }
  }, {
    Header: 'Age',
    accessor: 'age',
    width: 120,
    inlineEdit: {
      // required for including validation, this is used to set the invalid prop internally
      validator: function validator(n) {
        return n && n < 18;
      },
      type: 'number',
      // These props are passed to the Carbon component used for inline editing
      inputProps: {
        invalidText: 'Invalid number, must be 18 or greater'
      }
    }
  }, {
    Header: 'Visits',
    accessor: 'visits',
    width: 120,
    inlineEdit: {
      validator: function validator(n) {
        return n && n < 10;
      },
      type: 'number',
      inputProps: {
        invalidText: 'Invalid number, must be 10 or greater'
      } // These props are passed to the Carbon component used for inline editing
    }
  }, {
    Header: 'Active since',
    accessor: 'activeSince',
    inlineEdit: {
      type: 'date',
      inputProps: {
        // optionally pass props here to be passed through to Carbon's DatePicker component
        onChange: function onChange(newDateObj, cell) {
          console.log(newDateObj, cell);
        },
        dateFormat: 'd/m/Y',
        // optionally pass props here to be passed through to Carbon's DatePickerInput component
        datePickerInputProps: {
          labelText: 'Change active since date'
        }
      }
    }
  }, {
    Header: 'Chart type',
    accessor: 'chartType',
    inlineEdit: {
      type: 'selection',
      inputProps: {
        // These props are passed to the Carbon component used for inline editing
        items: inlineEditSelectItems,
        onChange: function onChange(item) {
          return console.log(item);
        }
      }
    }
  }, {
    Header: 'Someone 2',
    accessor: 'someone2'
  }, {
    Header: 'Someone 3',
    accessor: 'someone3'
  }, {
    Header: 'Someone 4',
    accessor: 'someone4'
  }, {
    Header: 'Someone 5',
    accessor: 'someone5'
  }, {
    Header: 'Someone 6',
    accessor: 'someone6'
  }, {
    Header: 'Someone 7',
    accessor: 'someone7'
  }, {
    Header: 'Someone 8',
    accessor: 'someone8'
  }, {
    Header: 'Someone 9',
    accessor: 'someone9'
  }, {
    Header: 'Someone 10',
    accessor: 'someone10'
  }];
};
exports.getInlineEditColumns = getInlineEditColumns;