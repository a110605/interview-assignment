"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.range = exports.newPersonWithTwoLines = exports.makeData = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _namor = _interopRequireDefault(require("namor"));
var _getInlineEditColumns = require("./getInlineEditColumns");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } /**
opyright IBM Corp. 2022, 2022

his source code is licensed under the Apache-2.0 license found in the
file in the root directory of this source tree.

var getRandomInteger = function getRandomInteger(min, max, decimalPlaces) {
  var roundedMin = Math.ceil(min);
  var roundedMax = Math.floor(max);
  var randomNumber = Math.random() * (max - min) + min;
  if (!decimalPlaces) {
    return Math.floor(Math.random() * (roundedMax - roundedMin + 1)) + roundedMin;
  }
  var power = Math.pow(10, decimalPlaces);
  return Math.floor(randomNumber * power) / power;
};
var makeData = function makeData() {
  for (var _len = arguments.length, lens = new Array(_len), _key = 0; _key < _len; _key++) {
    lens[_key] = arguments[_key];
  }
  var makeDataLevel = function makeDataLevel() {
    var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var len = lens[depth];
    return range(len).map(function () {
      return _objectSpread(_objectSpread({}, newPerson()), {}, {
        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined
      });
    });
  };
  return makeDataLevel();
};
exports.makeData = makeData;
var range = function range(len) {
  var arr = [];
  for (var i = 0; i < len; i++) {
    arr.push(i);
  }
  return arr;
};

/** This function is only to create a random data point when the person joined */
exports.range = range;
var getRandomDateJoined = function getRandomDateJoined() {
  return randomDate(new Date(2022, 0, 1), new Date());
};
var getPasswordStrength = function getPasswordStrength() {
  var chance = Math.random();
  return chance > 0.66 ? 'critical' : chance > 0.33 ? 'minor-warning' : 'normal';
};
var renderDocLink = function renderDocLink() {
  var chance = Math.random();
  var docLinkObj = {
    href: chance > 0.66 ? 'https://carbondesignsystem.com/' : chance > 0.33 ? 'https://pages.github.ibm.com/cdai-design/pal/' : 'https://ibm-products.carbondesignsystem.com/',
    text: chance > 0.66 ? 'Carbon Design System' : chance > 0.33 ? 'Carbon for IBM Products PAL' : 'Carbon for IBM Products storybook'
  };
  return docLinkObj;
};
var newPerson = function newPerson() {
  var statusChance = Math.random();
  var roleChance = Math.random();
  var activeChance = Math.random();
  var initialChartTypeIndex = getRandomInteger(0, 2);
  var activeSinceDate = new Date();
  var yesterdayDate = new Date();
  yesterdayDate.setDate(yesterdayDate.getDate() - 1);
  var twoDaysAgoDate = new Date();
  twoDaysAgoDate.setDate(twoDaysAgoDate.getDate() - 2);
  return {
    firstName: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    lastName: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    age: Math.floor(Math.random() * 30),
    visits: Math.floor(Math.random() * 100),
    progress: Math.floor(Math.random() * 100),
    status: statusChance > 0.66 ? 'relationship' : statusChance > 0.33 ? 'complicated' : 'single',
    role: roleChance > 0.66 ? 'developer' : roleChance > 0.33 ? 'designer' : 'researcher',
    joined: getRandomDateJoined(),
    someone1: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone2: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone3: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone4: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone5: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone6: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone7: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone8: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone9: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone10: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone11: _namor.default.generate({
      words: 4,
      numbers: 0
    }),
    someone12: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone13: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone14: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone15: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone16: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone17: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone18: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone19: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    someone20: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    chartType: initialChartTypeIndex === 0 ? _getInlineEditColumns.inlineEditSelectItems[0] : initialChartTypeIndex === 1 ? _getInlineEditColumns.inlineEditSelectItems[1] : _getInlineEditColumns.inlineEditSelectItems[2],
    activeSince: activeChance > 0.66 ? activeSinceDate : activeChance > 0.33 ? yesterdayDate : '23/05/2020',
    bonus: "$\r".concat(getRandomInteger(100, 500, 2)),
    passwordStrength: getPasswordStrength(),
    doc_link: renderDocLink()
  };
};
var newPersonWithTwoLines = function newPersonWithTwoLines() {
  return {
    firstName: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", null, _namor.default.generate({
      words: 1,
      numbers: 0
    })), /*#__PURE__*/_react.default.createElement("div", null, _namor.default.generate({
      words: 1,
      numbers: 0
    }))),
    lastName: _namor.default.generate({
      words: 1,
      numbers: 0
    }),
    age: Math.floor(Math.random() * 30)
  };
};
exports.newPersonWithTwoLines = newPersonWithTwoLines;
var randomDate = function randomDate(start, end) {
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
};