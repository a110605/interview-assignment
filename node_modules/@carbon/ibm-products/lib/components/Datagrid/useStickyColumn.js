"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _debounce = _interopRequireDefault(require("lodash/debounce"));
var _classnames = _interopRequireDefault(require("classnames"));
var _settings = require("../../settings");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } /*
icensed Materials - Property of IBM

c) Copyright IBM Corp. 2021
overnment Users Restricted Rights - Use, duplication or disclosure
restricted by GSA ADP Schedule Contract with IBM Corp.

var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var styleClassPrefix = "".concat(blockClass, "__right-sticky-column");
var leftStickyStyleClassPrefix = "".concat(blockClass, "__left-sticky-column");
var OFFSET_SCROLL_CLASS = "".concat(styleClassPrefix, "-offset-scroll");
var useStickyColumn = function useStickyColumn(hooks) {
  var tableBodyRef = (0, _react.useRef)();
  var stickyHeaderCellRef = (0, _react.useRef)();
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    windowSize = _useState2[0],
    setWindowSize = _useState2[1];
  (0, _react.useEffect)(function () {
    setWindowSize(window.innerWidth);
  }, []);
  (0, _react.useLayoutEffect)(function () {
    function updateSize() {
      setWindowSize(window.innerWidth);
    }
    window.addEventListener('resize', updateSize);
    return function () {
      return window.removeEventListener('resize', updateSize);
    };
  }, []);
  hooks.getCellProps.push(changeProps.bind(null, 'cell', null, windowSize));
  hooks.getHeaderProps.push(changeProps.bind(null, 'header', stickyHeaderCellRef, windowSize));
  hooks.getTableBodyProps.push(addTableBodyProps.bind(null, tableBodyRef));
  hooks.getHeaderGroupProps.push(function (props) {
    return [props, {
      style: _objectSpread(_objectSpread({}, props.style), {}, {
        minWidth: 'unset' // unset the min-width calculated by sum of all column min-width
      })
    }];
  });

  var useEventListener = function useEventListener(instance) {
    (0, _react.useEffect)(function () {
      var tableBodyElement = tableBodyRef.current;
      var headerCellElement = stickyHeaderCellRef.current;
      if (hasVertScroll(tableBodyElement) && headerCellElement) {
        headerCellElement.classList.add(OFFSET_SCROLL_CLASS);
      }
      var boundListener = (0, _debounce.default)(onBodyResize.bind(null, tableBodyElement, headerCellElement), 250);
      if (typeof window !== 'undefined') {
        window.addEventListener('resize', boundListener);
      }
      return function () {
        if (typeof window !== 'undefined') {
          window.removeEventListener('resize', boundListener);
        }
      };
    }, [instance.rows, instance.isFetching]);
    (0, _react.useEffect)(function () {
      var tableBodyElement = tableBodyRef.current;
      var headerCellElement = stickyHeaderCellRef.current;
      var listener = function listener(evt) {
        toggleStickyShadow(evt.target, headerCellElement);
      };
      toggleStickyShadow(tableBodyElement, headerCellElement);
      if (tableBodyElement) {
        tableBodyElement.addEventListener('scroll', listener);
      }
      return function () {
        if (tableBodyElement) {
          tableBodyElement.removeEventListener('scroll', listener);
        }
      };
    }, [instance.rows, instance.isFetching]);
  };
  var useCheckScroll = function useCheckScroll(instance) {
    var tableBodyElement = tableBodyRef.current;
    var headerCellElement = stickyHeaderCellRef.current;
    (0, _react.useEffect)(function () {
      onBodyResize(tableBodyElement, headerCellElement);
    }, [instance.rows, headerCellElement, tableBodyElement]);
  };
  hooks.useInstance.push(useEventListener);
  hooks.useInstance.push(useCheckScroll);
  hooks.useInstance.push(function (instance) {
    Object.assign(instance, {
      withStickyColumn: true
    });
  });
  hooks.useInstance.push(function (instance) {
    // sticky column is defined by consumer
    // it will always comes after the spacer which is defined by useFlexResize
    // swap them here to use the spacer to push
    // sticky column to the right when there are few
    // columns defined
    var newColumns = instance.visibleColumns;
    var spacerIdx = newColumns.findIndex(function (col) {
      return col.id === 'spacer';
    });
    var stickyIdx = newColumns.findIndex(function (col) {
      return col.sticky === 'right';
    });
    if (spacerIdx >= 0 && stickyIdx >= 0 && stickyIdx < spacerIdx) {
      var temp = newColumns[spacerIdx];
      newColumns[spacerIdx] = newColumns[stickyIdx];
      newColumns[stickyIdx] = temp;
    }
    var newHeaders = instance.headers;
    spacerIdx = newHeaders.findIndex(function (col) {
      return col.id === 'spacer';
    });
    stickyIdx = newHeaders.findIndex(function (col) {
      return col.sticky === 'right';
    });
    if (spacerIdx >= 0 && stickyIdx >= 0 && stickyIdx < spacerIdx) {
      var _temp = newHeaders[spacerIdx];
      newHeaders[spacerIdx] = newHeaders[stickyIdx];
      newHeaders[spacerIdx].canResize = false;
      newHeaders[spacerIdx].disableResizing = true;
      delete newHeaders[spacerIdx].getResizerProps;
      newHeaders[stickyIdx] = _temp;
    }
  });
};
var addTableBodyProps = function addTableBodyProps(tableBodyRef, props) {
  return [props, {
    ref: tableBodyRef
  }];
};
var changeProps = function changeProps(elementName, headerCellRef, windowSize, props, data) {
  var column = data.column || data.cell.column;
  if (column.sticky === 'right') {
    var _cx;
    return [props, _objectSpread({
      className: (0, _classnames.default)((_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(styleClassPrefix, "-").concat(elementName), true), (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__resizableColumn"), false), (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__sortableColumn"), false), _cx))
    }, headerCellRef && {
      ref: headerCellRef
    })];
  }
  if (column.sticky === 'left') {
    var _data$instance, _cx2;
    return [props, _objectSpread({
      className: (0, _classnames.default)((_cx2 = {}, (0, _defineProperty2.default)(_cx2, "".concat(leftStickyStyleClassPrefix, "-").concat(elementName), true && windowSize > 671), (0, _defineProperty2.default)(_cx2, "".concat(leftStickyStyleClassPrefix, "-").concat(elementName, "--with-extra-select-column"), (data === null || data === void 0 ? void 0 : (_data$instance = data.instance) === null || _data$instance === void 0 ? void 0 : _data$instance.withSelectRows) && windowSize > 671), _cx2))
    }, headerCellRef && {
      ref: headerCellRef
    })];
  }
  return [props];
};
var onBodyResize = function onBodyResize(tableBodyEle, headerCellEle) {
  if (headerCellEle) {
    if (hasVertScroll(tableBodyEle)) {
      headerCellEle.classList.add(OFFSET_SCROLL_CLASS);
    } else {
      headerCellEle.classList.remove(OFFSET_SCROLL_CLASS);
    }
    toggleStickyShadow(tableBodyEle, headerCellEle);
  }
};
var toggleStickyShadow = function toggleStickyShadow(tableBodyEle, headerCellEle) {
  if (tableBodyEle && headerCellEle) {
    var isScrolledToRight = tableBodyEle.scrollLeft + tableBodyEle.clientWidth === tableBodyEle.scrollWidth;
    if (isScrolledToRight) {
      headerCellEle.classList.add("".concat(blockClass, "__sticky-noShadow"));
      tableBodyEle.classList.add("".concat(blockClass, "__sticky-column-noShadow"));
    } else {
      headerCellEle.classList.remove("".concat(blockClass, "__sticky-noShadow"));
      tableBodyEle.classList.remove("".concat(blockClass, "__sticky-column-noShadow"));
    }
  }
};
var hasVertScroll = function hasVertScroll(element) {
  if (!element) {
    return false;
  }
  var scrollHeight = element.scrollHeight,
    clientHeight = element.clientHeight;
  return scrollHeight > clientHeight;
};
var _default = useStickyColumn;
exports.default = _default;