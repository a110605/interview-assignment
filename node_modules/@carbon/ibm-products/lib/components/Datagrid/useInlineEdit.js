"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _settings = require("../../settings");
var _classnames = _interopRequireDefault(require("classnames"));
var _InlineEditCell = require("./Datagrid/addons/InlineEdit/InlineEditCell");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * Copyright IBM Corp. 2022, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var useInlineEdit = function useInlineEdit(hooks, usingEditableCell) {
  (0, _react.useEffect)(function () {
    if (!usingEditableCell) {
      _settings.pkg.checkReportFeatureEnabled('Datagrid.useInlineEdit');
    }
    if (usingEditableCell) {
      _settings.pkg.checkReportFeatureEnabled('Datagrid.useEditableCell');
    }
  }, [usingEditableCell]);
  var addInlineEdit = function addInlineEdit(props, _ref) {
    var _cell$column, _cell$column$inlineEd, _instance$columns$fil;
    var cell = _ref.cell,
      instance = _ref.instance;
    var columnInlineEditConfig = cell.column.inlineEdit;
    var inlineEditType = (_cell$column = cell.column) === null || _cell$column === void 0 ? void 0 : (_cell$column$inlineEd = _cell$column.inlineEdit) === null || _cell$column$inlineEd === void 0 ? void 0 : _cell$column$inlineEd.type;
    var totalInlineEditColumns = (_instance$columns$fil = instance.columns.filter(function (item) {
      return item.inlineEdit;
    })) === null || _instance$columns$fil === void 0 ? void 0 : _instance$columns$fil.length;
    var renderInlineEditComponent = function renderInlineEditComponent(type) {
      return /*#__PURE__*/_react.default.createElement(_InlineEditCell.InlineEditCell, {
        config: columnInlineEditConfig,
        tabIndex: -1,
        value: cell.value,
        cell: cell,
        instance: instance,
        totalInlineEditColumns: totalInlineEditColumns,
        type: type
      });
    };
    if (cell.column.id === 'spacer') {
      return [props, {
        className: (0, _classnames.default)("".concat(blockClass, "__cell"), "".concat(blockClass, "__cell--spacer"))
      }];
    }
    return [props, {
      className: (0, _classnames.default)("".concat(blockClass, "__cell"), (0, _defineProperty2.default)({}, "".concat(blockClass, "__cell-inline-edit"), !!usingEditableCell || _settings.pkg.isFeatureEnabled('Datagrid.useInlineEdit') ? true : '')),
      role: 'gridcell',
      children: (!!usingEditableCell || _settings.pkg.isFeatureEnabled('Datagrid.useInlineEdit')) && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, inlineEditType === 'text' && renderInlineEditComponent(inlineEditType), inlineEditType === 'number' && renderInlineEditComponent(inlineEditType), inlineEditType === 'selection' && renderInlineEditComponent(inlineEditType), inlineEditType === 'date' && renderInlineEditComponent(inlineEditType), !inlineEditType && /*#__PURE__*/_react.default.createElement(_InlineEditCell.InlineEditCell, {
        config: columnInlineEditConfig,
        tabIndex: -1,
        value: cell.value,
        cell: cell,
        instance: instance,
        disabled: true,
        nonEditCell: true,
        totalInlineEditColumns: totalInlineEditColumns,
        type: "text"
      }))
    }];
  };
  hooks.getCellProps.push(addInlineEdit);
  hooks.useInstance.push(function (instance) {
    Object.assign(instance, {
      withInlineEdit: !!usingEditableCell || _settings.pkg.isFeatureEnabled('Datagrid.useInlineEdit') ? true : false
    });
  });
};
var _default = useInlineEdit;
exports.default = _default;