"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = require("react");
var _settings = require("../../settings");
var _classnames = _interopRequireDefault(require("classnames"));
var _useNestedRowExpander = _interopRequireDefault(require("./useNestedRowExpander"));
/**
 * Copyright IBM Corp. 2020, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var useNestedRows = function useNestedRows(hooks) {
  (0, _react.useEffect)(function () {
    _settings.pkg.checkReportFeatureEnabled('Datagrid.useNestedRows');
  }, []);
  (0, _useNestedRowExpander.default)(hooks);
  var marginLeft = 24;
  var getRowProps = function getRowProps(props, _ref) {
    var _cx;
    var row = _ref.row;
    return [props, {
      className: (0, _classnames.default)((_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__carbon-nested-row"), row.depth > 0), (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__carbon-row-expanded"), row.isExpanded), _cx))
    }];
  };
  var getRowStyles = function getRowStyles(props, _ref2) {
    var row = _ref2.row;
    return [props, {
      style: {
        paddingLeft: "".concat(row.depth > 1 ? marginLeft * 2 + (row.depth - 1) * (marginLeft + marginLeft / 3) : row.depth === 1 ? marginLeft * 2 : 0, "px")
      }
    }];
  };
  var getCellProps = function getCellProps(props, _ref3) {
    var cell = _ref3.cell,
      instance = _ref3.instance;
    // reduce the "first cell"s width to compensate added (left) margin
    var isFirstCell = instance.columns.findIndex(function (c) {
      return c.id === cell.column.id;
    }) === 0;
    return [props, {
      style: {
        marginRight: "".concat(isFirstCell && cell.row.depth > 0 ? "".concat(-32 * cell.row.depth - 18, "px") : '')
      }
    }];
  };
  var useInstance = function useInstance(instance) {
    Object.assign(instance, {
      withNestedRows: true
    });
  };
  hooks.getRowProps.push(getRowProps);
  hooks.getRowProps.push(getRowStyles);
  hooks.getCellProps.push(getCellProps);
  hooks.useInstance.push(useInstance);
};
var _default = useNestedRows;
exports.default = _default;