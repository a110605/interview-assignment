"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _react2 = require("@carbon/react");
var _icons = require("@carbon/react/icons");
var _settings = require("../../../settings");
var _excluded = ["onChange"];
/**
 * Copyright IBM Corp. 2020, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// cspell:words columnheader

var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var SELECT_ALL_PAGE_ROWS = 'pageRows';
var SELECT_ALL_ROWS = 'allRows';
var SelectAllWithToggle = function SelectAllWithToggle(_ref) {
  var _columns$;
  var tableId = _ref.tableId,
    isFetching = _ref.isFetching,
    isAllRowsSelected = _ref.isAllRowsSelected,
    selectAllToggle = _ref.selectAllToggle,
    getToggleAllPageRowsSelectedProps = _ref.getToggleAllPageRowsSelectedProps,
    getToggleAllRowsSelectedProps = _ref.getToggleAllRowsSelectedProps,
    _ref$allPageRowsLabel = _ref.allPageRowsLabel,
    allPageRowsLabel = _ref$allPageRowsLabel === void 0 ? 'Select all on page' : _ref$allPageRowsLabel,
    _ref$allRowsLabel = _ref.allRowsLabel,
    allRowsLabel = _ref$allRowsLabel === void 0 ? 'Select all' : _ref$allRowsLabel,
    columns = _ref.columns,
    withStickyColumn = _ref.withStickyColumn;
  var _ref2 = selectAllToggle || {},
    onSelectAllRows = _ref2.onSelectAllRows,
    labels = _ref2.labels;
  var _useState = (0, _react.useState)(SELECT_ALL_PAGE_ROWS),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    selectAllMode = _useState2[0],
    setSelectAllMode = _useState2[1];
  (0, _react.useEffect)(function () {
    if (onSelectAllRows) {
      onSelectAllRows(isAllRowsSelected && selectAllMode === SELECT_ALL_ROWS);
    }
  }, [isAllRowsSelected, selectAllMode, onSelectAllRows]);
  var _useState3 = (0, _react.useState)(window.innerWidth),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    windowSize = _useState4[0],
    setWindowSize = _useState4[1];
  (0, _react.useLayoutEffect)(function () {
    function updateSize() {
      setWindowSize(window.innerWidth);
    }
    window.addEventListener('resize', updateSize);
    return function () {
      return window.removeEventListener('resize', updateSize);
    };
  }, []);
  if (labels) {
    allPageRowsLabel = labels.allPageRows || allPageRowsLabel;
    allRowsLabel = labels.allRows || allRowsLabel;
  }
  var getProps = selectAllMode === SELECT_ALL_PAGE_ROWS ? getToggleAllPageRowsSelectedProps : getToggleAllRowsSelectedProps;
  var _getProps = getProps(),
    onChange = _getProps.onChange,
    selectProps = (0, _objectWithoutProperties2.default)(_getProps, _excluded);
  var disabled = isFetching || selectProps.disabled;
  var isFirstColumnStickyLeft = ((_columns$ = columns[0]) === null || _columns$ === void 0 ? void 0 : _columns$.sticky) === 'left' && withStickyColumn;
  return /*#__PURE__*/_react.default.createElement("th", {
    role: "columnheader",
    scope: "col",
    className: (0, _classnames.default)("".concat(blockClass, "__select-all-toggle-on"), (0, _defineProperty2.default)({}, "".concat(blockClass, "__select-all-sticky-left"), isFirstColumnStickyLeft && windowSize > 671))
  }, /*#__PURE__*/_react.default.createElement("span", null, /*#__PURE__*/_react.default.createElement(_react2.Checkbox, (0, _extends2.default)({}, selectProps, {
    name: "".concat(tableId, "-select-all-checkbox-name"),
    onClick: function onClick(e) {
      onChange(e);
    },
    disabled: disabled,
    id: "".concat(tableId, "-select-all-checkbox-id"),
    labelText: allRowsLabel,
    hideLabel: true
  }))), /*#__PURE__*/_react.default.createElement(_react2.OverflowMenu, {
    renderIcon: function renderIcon(props) {
      return /*#__PURE__*/_react.default.createElement(_icons.CaretDown, (0, _extends2.default)({
        size: 16
      }, props));
    },
    size: "sm",
    "aria-label": allRowsLabel,
    menuOptionsClass: "".concat(blockClass, "__select-all-toggle-overflow")
  }, /*#__PURE__*/_react.default.createElement(_react2.OverflowMenuItem, {
    itemText: allPageRowsLabel,
    requireTitle: true,
    disabled: disabled,
    onClick: function onClick() {
      setSelectAllMode(SELECT_ALL_PAGE_ROWS);
      // deselect all rows first
      getToggleAllRowsSelectedProps().onChange({
        target: {
          checked: false
        }
      });
      // select all row on current page
      getToggleAllPageRowsSelectedProps().onChange({
        target: {
          checked: true
        }
      });
    }
  }), /*#__PURE__*/_react.default.createElement(_react2.OverflowMenuItem, {
    itemText: allRowsLabel,
    requireTitle: true,
    disabled: disabled,
    onClick: function onClick() {
      setSelectAllMode(SELECT_ALL_ROWS);
      getToggleAllRowsSelectedProps().onChange({
        target: {
          checked: true
        }
      });
    }
  })));
};
SelectAllWithToggle.propTypes = {
  allPageRowsLabel: _propTypes.default.string,
  allRowsLabel: _propTypes.default.string,
  columns: _propTypes.default.arrayOf(_propTypes.default.object),
  getToggleAllPageRowsSelectedProps: _propTypes.default.func.isRequired,
  getToggleAllRowsSelectedProps: _propTypes.default.func.isRequired,
  isAllRowsSelected: _propTypes.default.bool.isRequired,
  isFetching: _propTypes.default.bool,
  selectAllToggle: _propTypes.default.object,
  tableId: _propTypes.default.string.isRequired,
  withStickyColumn: _propTypes.default.bool
};
var _default = SelectAllWithToggle;
exports.default = _default;