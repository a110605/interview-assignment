"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _CustomizeColumnsTearsheet = _interopRequireDefault(require("./CustomizeColumnsTearsheet"));
var _excluded = ["onSaveColumnPrefs", "isTearsheetOpen", "setIsTearsheetOpen", "labels"];
/* Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var TearsheetWrapper = function TearsheetWrapper(_ref) {
  var instance = _ref.instance;
  var _instance$customizeCo = instance.customizeColumnsProps,
    _onSaveColumnPrefs = _instance$customizeCo.onSaveColumnPrefs,
    isTearsheetOpen = _instance$customizeCo.isTearsheetOpen,
    setIsTearsheetOpen = _instance$customizeCo.setIsTearsheetOpen,
    labels = _instance$customizeCo.labels,
    rest = (0, _objectWithoutProperties2.default)(_instance$customizeCo, _excluded);
  return /*#__PURE__*/React.createElement(_CustomizeColumnsTearsheet.default, (0, _extends2.default)({}, rest, labels, {
    isOpen: isTearsheetOpen,
    isTableSortable: (instance === null || instance === void 0 ? void 0 : instance.isTableSortable) || false,
    setIsTearsheetOpen: setIsTearsheetOpen,
    columnDefinitions: instance.allColumns,
    originalColumnDefinitions: instance.columns,
    onSaveColumnPrefs: function onSaveColumnPrefs(updatedColDefs) {
      var hiddenIds = updatedColDefs.filter(function (colDef) {
        return !colDef.isVisible;
      }).map(function (colDef) {
        return colDef.id;
      });
      instance.setHiddenColumns(hiddenIds);
      if (typeof instance.setColumnOrder === 'function') {
        instance.setColumnOrder(updatedColDefs.map(function (colDef) {
          return colDef.id;
        }));
      } else {
        // eslint-disable-next-line no-console
        console.warn("Column order can not be updated. Did you forget to add 'useColumnOrder' in 'useDatagrid'");
      }
      if (typeof _onSaveColumnPrefs === 'function') {
        _onSaveColumnPrefs(updatedColDefs);
      }
    }
  }));
};
TearsheetWrapper.propTypes = {
  instance: _propTypes.default.object.isRequired
};
var _default = TearsheetWrapper;
exports.default = _default;