"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _icons = require("@carbon/react/icons");
var _react = require("@carbon/react");
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react2 = _interopRequireWildcard(require("react"));
var _hooks = require("../../../../../global/js/hooks");
var _settings = require("../../../../../settings");
var _ActionSet = require("../../../../ActionSet");
var _constants = require("./constants");
var _hooks2 = require("./hooks");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// @flow
/**
 * Copyright IBM Corp. 2022, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var componentClass = "".concat(blockClass, "-filter-flyout");
var FilterFlyout = function FilterFlyout(_ref) {
  var _cx2;
  var _ref$updateMethod = _ref.updateMethod,
    updateMethod = _ref$updateMethod === void 0 ? _constants.BATCH : _ref$updateMethod,
    _ref$flyoutIconDescri = _ref.flyoutIconDescription,
    flyoutIconDescription = _ref$flyoutIconDescri === void 0 ? 'Open filters' : _ref$flyoutIconDescri,
    _ref$filters = _ref.filters,
    filters = _ref$filters === void 0 ? [] : _ref$filters,
    _ref$title = _ref.title,
    title = _ref$title === void 0 ? 'Filter' : _ref$title,
    _ref$primaryActionLab = _ref.primaryActionLabel,
    primaryActionLabel = _ref$primaryActionLab === void 0 ? 'Apply' : _ref$primaryActionLab,
    _ref$onFlyoutOpen = _ref.onFlyoutOpen,
    onFlyoutOpen = _ref$onFlyoutOpen === void 0 ? function () {} : _ref$onFlyoutOpen,
    _ref$onFlyoutClose = _ref.onFlyoutClose,
    onFlyoutClose = _ref$onFlyoutClose === void 0 ? function () {} : _ref$onFlyoutClose,
    _ref$onApply = _ref.onApply,
    onApply = _ref$onApply === void 0 ? function () {} : _ref$onApply,
    _ref$onCancel = _ref.onCancel,
    onCancel = _ref$onCancel === void 0 ? function () {} : _ref$onCancel,
    _ref$secondaryActionL = _ref.secondaryActionLabel,
    secondaryActionLabel = _ref$secondaryActionL === void 0 ? 'Cancel' : _ref$secondaryActionL,
    setAllFilters = _ref.setAllFilters,
    _ref$data = _ref.data,
    data = _ref$data === void 0 ? [] : _ref$data,
    _ref$reactTableFilter = _ref.reactTableFiltersState,
    reactTableFiltersState = _ref$reactTableFilter === void 0 ? [] : _ref$reactTableFilter;
  /** State */
  var _useState = (0, _react2.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var _useFilters = (0, _hooks2.useFilters)({
      updateMethod: updateMethod,
      filters: filters,
      setAllFilters: setAllFilters,
      variation: _constants.FLYOUT,
      reactTableFiltersState: reactTableFiltersState,
      onCancel: onCancel
    }),
    filtersState = _useFilters.filtersState,
    prevFiltersObjectArrayRef = _useFilters.prevFiltersObjectArrayRef,
    prevFiltersRef = _useFilters.prevFiltersRef,
    cancel = _useFilters.cancel,
    reset = _useFilters.reset,
    renderFilter = _useFilters.renderFilter,
    filtersObjectArray = _useFilters.filtersObjectArray,
    lastAppliedFilters = _useFilters.lastAppliedFilters;

  /** Refs */
  var filterFlyoutRef = (0, _react2.useRef)(null);

  /** State from hooks */
  var _useShouldDisableButt = (0, _hooks2.useShouldDisableButtons)({
      initialValue: true,
      filtersState: filtersState,
      prevFiltersRef: prevFiltersRef
    }),
    _useShouldDisableButt2 = (0, _slicedToArray2.default)(_useShouldDisableButt, 2),
    shouldDisableButtons = _useShouldDisableButt2[0],
    setShouldDisableButtons = _useShouldDisableButt2[1];

  /** Memos */
  var showActionSet = updateMethod === _constants.BATCH;
  var carbonPrefix = (0, _react.usePrefix)();

  /** Methods */
  var openFlyout = function openFlyout() {
    setOpen(true);
    onFlyoutOpen();
  };
  var closeFlyout = function closeFlyout() {
    setOpen(false);
    onFlyoutClose();
  };
  var apply = function apply() {
    setAllFilters(filtersObjectArray);
    closeFlyout();
    // From the user
    onApply();
    // When the user clicks apply, the action set buttons should be disabled again
    setShouldDisableButtons(true);

    // updates the ref so next time the flyout opens we have records of the previous filters
    prevFiltersRef.current = JSON.stringify(filtersState);
    prevFiltersObjectArrayRef.current = JSON.stringify(filtersObjectArray);

    // Update the last applied filters
    lastAppliedFilters.current = JSON.stringify(filtersObjectArray);
  };

  /** Renders all filters */
  var renderFilters = function renderFilters() {
    return filters.map(renderFilter);
  };
  var renderActionSet = function renderActionSet() {
    return showActionSet && /*#__PURE__*/_react2.default.createElement(_ActionSet.ActionSet, {
      actions: [{
        key: 1,
        kind: 'primary',
        label: primaryActionLabel,
        onClick: apply,
        isExpressive: false,
        disabled: shouldDisableButtons
      }, {
        key: 3,
        kind: 'secondary',
        label: secondaryActionLabel,
        onClick: cancel,
        isExpressive: false,
        disabled: shouldDisableButtons
      }],
      size: "md",
      buttonSize: "md"
    });
  };

  /** Effects */
  (0, _hooks.useClickOutside)(filterFlyoutRef, function (target) {
    var hasClickedOnDatePicker = target.closest('.flatpickr-calendar');
    var hasClickedOnDropdown = target.className === "".concat(carbonPrefix, "--list-box__menu-item__option");
    if (!open || hasClickedOnDatePicker || hasClickedOnDropdown) {
      return;
    }
    closeFlyout();
    cancel();
  });
  (0, _hooks2.useSubscribeToEventEmitter)(_constants.CLEAR_FILTERS, reset);
  (0, _react2.useEffect)(function reflectLastAppliedFiltersWhenReactTableUpdates() {
    lastAppliedFilters.current = JSON.stringify(reactTableFiltersState);
  }, [reactTableFiltersState, lastAppliedFilters]);
  return /*#__PURE__*/_react2.default.createElement("div", {
    className: "".concat(componentClass, "__container")
  }, /*#__PURE__*/_react2.default.createElement(_react.IconButton, {
    label: flyoutIconDescription,
    kind: "ghost",
    align: "bottom",
    onClick: open ? closeFlyout : openFlyout,
    className: (0, _classnames.default)("".concat(componentClass, "__trigger"), (0, _defineProperty2.default)({}, "".concat(componentClass, "__trigger--open"), open)),
    disabled: data.length === 0
  }, /*#__PURE__*/_react2.default.createElement(_icons.Filter, null)), /*#__PURE__*/_react2.default.createElement("div", {
    ref: filterFlyoutRef,
    className: (0, _classnames.default)(componentClass, (_cx2 = {}, (0, _defineProperty2.default)(_cx2, "".concat(componentClass, "--open"), open), (0, _defineProperty2.default)(_cx2, "".concat(componentClass, "--batch"), showActionSet), (0, _defineProperty2.default)(_cx2, "".concat(componentClass, "--instant"), !showActionSet), _cx2))
  }, /*#__PURE__*/_react2.default.createElement("div", {
    className: "".concat(componentClass, "__inner-container")
  }, /*#__PURE__*/_react2.default.createElement("span", {
    className: "".concat(componentClass, "__title")
  }, title), /*#__PURE__*/_react2.default.createElement("div", {
    className: "".concat(componentClass, "__filters")
  }, renderFilters())), renderActionSet()));
};
FilterFlyout.propTypes = {
  /**
   * All data rows in the table
   */
  data: _propTypes.default.array.isRequired,
  /**
   * Array of filters to render
   */
  filters: _propTypes.default.arrayOf(_propTypes.default.shape({
    type: _propTypes.default.string.isRequired,
    column: _propTypes.default.string.isRequired,
    props: _propTypes.default.object.isRequired
  })).isRequired,
  /**
   * Icon description for the filter flyout button
   */
  flyoutIconDescription: _propTypes.default.string,
  /**
   * Callback when the apply button is clicked
   */
  onApply: _propTypes.default.func,
  /**
   * Callback when the cancel button is clicked
   */
  onCancel: _propTypes.default.func,
  /**
   * Callback when the flyout closes
   */
  onFlyoutClose: _propTypes.default.func,
  /**
   * Callback when the flyout opens
   */
  onFlyoutOpen: _propTypes.default.func,
  /**
   * Label text of the primary action in the flyout
   */
  primaryActionLabel: _propTypes.default.string,
  /**
   * Filters from react table's state
   */
  reactTableFiltersState: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string.isRequired,
    type: _propTypes.default.string.isRequired,
    value: _propTypes.default.any.isRequired
  })),
  /**
   * Label text of the secondary action in the flyout
   */
  secondaryActionLabel: _propTypes.default.string,
  /**
   * Function that sets all the filters, this comes from the datagridState
   */
  setAllFilters: _propTypes.default.func.isRequired,
  /**
   * Title of the filter flyout
   */
  title: _propTypes.default.string,
  /**
   * The update method used to apply the filters
   */
  updateMethod: _propTypes.default.oneOf([_constants.BATCH, _constants.INSTANT]).isRequired
};
var _default = FilterFlyout;
exports.default = _default;