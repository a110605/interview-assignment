"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineEditProvider = exports.InlineEditContext = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _returnUpdatedActiveCell = require("./returnUpdatedActiveCell");
var _getCellIdAsObject = require("./getCellIdAsObject");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } /**
opyright IBM Corp. 2022, 2022

his source code is licensed under the Apache-2.0 license found in the
file in the root directory of this source tree.

var InlineEditContext = /*#__PURE__*/(0, _react.createContext)();
exports.InlineEditContext = InlineEditContext;
var inlineEditReducer = function inlineEditReducer(state, action) {
  switch (action.type) {
    case 'ADD_GRID_ACTIVE_FOCUS':
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          gridActive: true,
          activeCellId: action.payload,
          // set default active cell when grid receives focus
          previousActiveCellId: null
        });
      }
    case 'REMOVE_GRID_ACTIVE_FOCUS':
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          gridActive: false,
          editId: null,
          activeCellId: null,
          previousActiveCellId: action.payload
        });
      }
    case 'ENTER_EDIT_MODE':
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          activeCellId: action.payload.activeCellId,
          editId: action.payload.editId
        });
      }
    case 'EXIT_EDIT_MODE':
      {
        return _objectSpread(_objectSpread({}, state), {}, {
          activeCellId: action.payload,
          editId: null
        });
      }
    case 'UPDATE_ACTIVE_CELL_ID':
      {
        var _action$payload = action.payload,
          direction = _action$payload.direction,
          oldId = _action$payload.oldId,
          instance = _action$payload.instance;
        if (!action.payload.direction) {
          return _objectSpread(_objectSpread({}, state), {}, {
            activeCellId: action.payload,
            editId: null
          });
        }
        if (direction && typeof direction === 'string') {
          var activeCellCoords = (0, _getCellIdAsObject.getCellIdAsObject)(oldId);
          var totalVisibleColumns = instance.visibleColumns.filter(function (item) {
            return item.id !== 'spacer';
          });
          return (0, _returnUpdatedActiveCell.returnUpdatedActiveCell)({
            activeCellCoords: activeCellCoords,
            direction: direction,
            totalVisibleColumns: totalVisibleColumns,
            state: state,
            instance: instance
          });
        }
        break;
      }
    default:
      return state;
  }
};
var InlineEditProvider = function InlineEditProvider(_ref) {
  var children = _ref.children;
  var initialState = {};
  var _useReducer = (0, _react.useReducer)(inlineEditReducer, initialState),
    _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),
    state = _useReducer2[0],
    dispatch = _useReducer2[1];
  return /*#__PURE__*/_react.default.createElement(InlineEditContext.Provider, {
    value: {
      state: state,
      dispatch: dispatch
    }
  }, children);
};
exports.InlineEditProvider = InlineEditProvider;
InlineEditProvider.propTypes = {
  children: _propTypes.default.element
};