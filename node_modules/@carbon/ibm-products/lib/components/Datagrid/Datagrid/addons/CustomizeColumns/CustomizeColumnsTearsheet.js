"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _common = require("./common");
var _Tearsheet = require("../../../../Tearsheet");
var _Columns = _interopRequireDefault(require("./Columns"));
var _Actions = _interopRequireDefault(require("./Actions"));
var _settings = require("../../../../../settings");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } /**
opyright IBM Corp. 2022, 2023

his source code is licensed under the Apache-2.0 license found in the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * LICENSE file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          */
var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var CustomizeColumnsTearsheet = function CustomizeColumnsTearsheet(_ref) {
  var isOpen = _ref.isOpen,
    setIsTearsheetOpen = _ref.setIsTearsheetOpen,
    onSaveColumnPrefs = _ref.onSaveColumnPrefs,
    columnDefinitions = _ref.columnDefinitions,
    originalColumnDefinitions = _ref.originalColumnDefinitions,
    _ref$customizeTearshe = _ref.customizeTearsheetHeadingLabel,
    customizeTearsheetHeadingLabel = _ref$customizeTearshe === void 0 ? 'Customize columns' : _ref$customizeTearshe,
    _ref$primaryButtonTex = _ref.primaryButtonTextLabel,
    primaryButtonTextLabel = _ref$primaryButtonTex === void 0 ? 'Save' : _ref$primaryButtonTex,
    _ref$secondaryButtonT = _ref.secondaryButtonTextLabel,
    secondaryButtonTextLabel = _ref$secondaryButtonT === void 0 ? 'Cancel' : _ref$secondaryButtonT,
    _ref$instructionsLabe = _ref.instructionsLabel,
    instructionsLabel = _ref$instructionsLabe === void 0 ? 'Select columns to display them. Click and drag the box to reorder the columns. These specifications will be saved and persist if you leave and return to the data table.' : _ref$instructionsLabe,
    _ref$findColumnPlaceh = _ref.findColumnPlaceholderLabel,
    findColumnPlaceholderLabel = _ref$findColumnPlaceh === void 0 ? 'Find column' : _ref$findColumnPlaceh,
    _ref$resetToDefaultLa = _ref.resetToDefaultLabel,
    resetToDefaultLabel = _ref$resetToDefaultLa === void 0 ? 'Reset to default' : _ref$resetToDefaultLa,
    _ref$assistiveTextIns = _ref.assistiveTextInstructionsLabel,
    assistiveTextInstructionsLabel = _ref$assistiveTextIns === void 0 ? 'Press space bar to toggle drag drop mode, use arrow keys to move selected elements.' : _ref$assistiveTextIns,
    _ref$assistiveTextDis = _ref.assistiveTextDisabledInstructionsLabel,
    assistiveTextDisabledInstructionsLabel = _ref$assistiveTextDis === void 0 ? 'Reordering columns are disabled because they are filtered currently.' : _ref$assistiveTextDis,
    _ref$selectAllLabel = _ref.selectAllLabel,
    selectAllLabel = _ref$selectAllLabel === void 0 ? 'Column name' : _ref$selectAllLabel,
    isTableSortable = _ref.isTableSortable;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    visibleColumnsCount = _useState2[0],
    setVisibleColumnsCount = _useState2[1];
  var _useState3 = (0, _react.useState)(''),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    totalColumns = _useState4[0],
    setTotalColumns = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    searchText = _useState6[0],
    setSearchText = _useState6[1];
  var _useState7 = (0, _react.useState)(columnDefinitions
    // only sort the hidden column to the end when modal reopen
    .sort(function (defA, defB) {
      var isVisibleA = (0, _common.isColumnVisible)(defA);
      var isVisibleB = (0, _common.isColumnVisible)(defB);
      if (isVisibleA && !isVisibleB) {
        return -1;
      }
      if (!isVisibleA && isVisibleB) {
        return 1;
      }
      return 0;
    })),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    columnObjects = _useState8[0],
    setColumnObjects = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    isDirty = _useState10[0],
    setIsDirty = _useState10[1];
  var onRequestClose = function onRequestClose() {
    setIsTearsheetOpen(false);
  };
  var onRequestSubmit = function onRequestSubmit() {
    setIsTearsheetOpen(false);
    var updatedColumns = columnObjects.map(function (colDef) {
      return {
        id: colDef.id,
        isVisible: colDef.isVisible
      };
    });
    onSaveColumnPrefs(updatedColumns);
  };
  var onCheckboxCheck = function onCheckboxCheck(col, value) {
    var changedDefinitions = columnObjects.map(function (definition) {
      if (Array.isArray(col) && col.indexOf(definition) != null || definition.id === col.id) {
        return _objectSpread(_objectSpread({}, definition), {}, {
          isVisible: value
        });
      }
      return definition;
    });
    setColumnObjects(changedDefinitions);
    setDirty();
  };
  var setDirty = function setDirty() {
    if (!isDirty) {
      setIsDirty(true);
    }
  };
  var getVisibleColumnsCount = (0, _react.useCallback)(function () {
    return columnObjects.filter(function (col) {
      return col.isVisible;
    }).length;
  }, [columnObjects]);
  var string = searchText.trim().toLowerCase();
  (0, _react.useEffect)(function () {
    setVisibleColumnsCount(getVisibleColumnsCount());
    setTotalColumns(columnObjects.length);
  }, [getVisibleColumnsCount, columnObjects.length]);
  return /*#__PURE__*/_react.default.createElement(_Tearsheet.TearsheetNarrow, {
    className: "".concat(blockClass, "__customize-columns-tearsheet"),
    open: isOpen,
    title: "".concat(customizeTearsheetHeadingLabel, " (").concat(visibleColumnsCount, "/").concat(totalColumns, ")"),
    description: instructionsLabel,
    actions: [{
      kind: 'secondary',
      label: secondaryButtonTextLabel,
      onClick: onRequestClose
    }, {
      kind: 'primary',
      label: primaryButtonTextLabel,
      onClick: onRequestSubmit,
      disabled: !isDirty
    }]
  }, /*#__PURE__*/_react.default.createElement(_Actions.default, {
    columns: columnObjects,
    originalColumnDefinitions: originalColumnDefinitions,
    searchText: searchText,
    setColumnsObject: function setColumnsObject(cols) {
      setColumnObjects(cols);
      setDirty();
    },
    setSearchText: setSearchText,
    findColumnPlaceholderLabel: findColumnPlaceholderLabel,
    resetToDefaultLabel: resetToDefaultLabel
  }), isOpen && /*#__PURE__*/_react.default.createElement(_Columns.default, {
    assistiveTextInstructionsLabel: assistiveTextInstructionsLabel,
    assistiveTextDisabledInstructionsLabel: assistiveTextDisabledInstructionsLabel,
    getVisibleColumnsCount: getVisibleColumnsCount,
    columns: columnObjects,
    filterString: string,
    onSelectColumn: onCheckboxCheck,
    setColumnsObject: function setColumnsObject(cols) {
      setColumnObjects(cols);
      setDirty();
    },
    selectAllLabel: selectAllLabel,
    isTableSortable: isTableSortable
  }));
};
CustomizeColumnsTearsheet.propTypes = {
  assistiveTextDisabledInstructionsLabel: _propTypes.default.string,
  assistiveTextInstructionsLabel: _propTypes.default.string,
  columnDefinitions: _propTypes.default.array.isRequired,
  customizeTearsheetHeadingLabel: _propTypes.default.string,
  findColumnPlaceholderLabel: _propTypes.default.string,
  instructionsLabel: _propTypes.default.string,
  isOpen: _propTypes.default.bool.isRequired,
  isTableSortable: _propTypes.default.bool.isRequired,
  onSaveColumnPrefs: _propTypes.default.func.isRequired,
  originalColumnDefinitions: _propTypes.default.array.isRequired,
  primaryButtonTextLabel: _propTypes.default.string,
  resetToDefaultLabel: _propTypes.default.string,
  secondaryButtonTextLabel: _propTypes.default.string,
  selectAllLabel: _propTypes.default.string,
  setIsTearsheetOpen: _propTypes.default.func.isRequired
};
var _default = CustomizeColumnsTearsheet;
exports.default = _default;