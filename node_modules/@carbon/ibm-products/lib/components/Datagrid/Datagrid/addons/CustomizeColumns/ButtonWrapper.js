"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _icons = require("@carbon/react/icons");
var _react2 = require("@carbon/react");
var _settings = require("../../../../../settings");
var _excluded = ["onClick", "setIsTearsheetOpen", "isTearsheetOpen", "iconTooltipLabel"];
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var ButtonWrapper = function ButtonWrapper(_ref) {
  var _onClick = _ref.onClick,
    setIsTearsheetOpen = _ref.setIsTearsheetOpen,
    isTearsheetOpen = _ref.isTearsheetOpen,
    _ref$iconTooltipLabel = _ref.iconTooltipLabel,
    iconTooltipLabel = _ref$iconTooltipLabel === void 0 ? 'Customize columns' : _ref$iconTooltipLabel,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return /*#__PURE__*/React.createElement(_react2.Button, (0, _extends2.default)({}, rest, {
    renderIcon: function renderIcon(props) {
      return /*#__PURE__*/React.createElement(_icons.Column, (0, _extends2.default)({
        size: 16
      }, props));
    },
    iconDescription: iconTooltipLabel,
    tooltipPosition: "left",
    kind: "ghost",
    hasIconOnly: true,
    "test-id": "".concat(blockClass, "__customize-columns-trigger"),
    onClick: function onClick() {
      setIsTearsheetOpen(!isTearsheetOpen);
      if (typeof _onClick === 'function') {
        _onClick();
      }
    }
  }));
};
ButtonWrapper.defaultProps = {
  onClick: function onClick() {}
};
ButtonWrapper.propTypes = {
  iconTooltipLabel: _propTypes.default.string,
  isTearsheetOpen: _propTypes.default.bool.isRequired,
  onClick: _propTypes.default.func.isRequired,
  setIsTearsheetOpen: _propTypes.default.func.isRequired
};
var _default = ButtonWrapper;
exports.default = _default;