"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _icons = require("@carbon/react/icons");
var _react2 = require("@carbon/react");
var _classnames = _interopRequireDefault(require("classnames"));
var _RowSizeRadioGroup = _interopRequireDefault(require("./RowSizeRadioGroup"));
var _settings = require("../../../../../settings");
var _excluded = ["align", "legendText"];
/**
 * Copyright IBM Corp. 2021, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var RowSizeDropdown = function RowSizeDropdown(_ref) {
  var _ref$align = _ref.align,
    align = _ref$align === void 0 ? 'bottom' : _ref$align,
    _ref$legendText = _ref.legendText,
    legendText = _ref$legendText === void 0 ? 'Row height' : _ref$legendText,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _React$useState = React.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    isOpen = _React$useState2[0],
    setIsOpen = _React$useState2[1];
  return /*#__PURE__*/React.createElement(React.Fragment, null, !isOpen && /*#__PURE__*/React.createElement(_react2.IconButton, {
    kind: "ghost",
    align: align,
    onClick: function onClick() {
      return setIsOpen(function (prevOpen) {
        return !prevOpen;
      });
    },
    label: legendText,
    className: (0, _classnames.default)("".concat(blockClass, "__row-size-button"))
  }, /*#__PURE__*/React.createElement(_icons.Settings, {
    size: 16
  })), isOpen && /*#__PURE__*/React.createElement(_react2.Toggletip, {
    defaultOpen: true,
    className: "".concat(blockClass, "__row-size-toggle-tip")
  }, /*#__PURE__*/React.createElement(_react2.ToggletipButton, {
    className: (0, _classnames.default)("".concat(blockClass, "__row-size-toggle-tip-button"), "".concat(blockClass, "__row-size-button--open")),
    label: legendText
  }, /*#__PURE__*/React.createElement(_icons.Settings, {
    size: 16
  })), /*#__PURE__*/React.createElement(_react2.ToggletipContent, {
    className: "".concat(blockClass, "__row-size-toggle-tip-content")
  }, /*#__PURE__*/React.createElement(_RowSizeRadioGroup.default, (0, _extends2.default)({}, props, {
    legendText: legendText,
    hideRadioGroup: function hideRadioGroup() {
      setIsOpen(false);
    }
  })))));
};
RowSizeDropdown.propTypes = {
  align: _react2.IconButton.propTypes.align,
  datagridName: _propTypes.default.string,
  legendText: _propTypes.default.string,
  light: _propTypes.default.bool,
  onChange: _propTypes.default.func.isRequired,
  selectedOption: _propTypes.default.string
};
var _default = RowSizeDropdown;
exports.default = _default;