"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineEditButton = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _settings = require("../../../../../../settings");
/*
 * Licensed Materials - Property of IBM
 * 5724-Q36
 * (c) Copyright IBM Corp. 2022
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var InlineEditButton = function InlineEditButton(_ref) {
  var _cx, _cx2;
  var label = _ref.label,
    Icon = _ref.renderIcon,
    disabled = _ref.disabled,
    LabelIcon = _ref.labelIcon,
    placeholder = _ref.placeholder,
    nonEditCell = _ref.nonEditCell,
    isActiveCell = _ref.isActiveCell,
    columnConfig = _ref.columnConfig,
    totalInlineEditColumns = _ref.totalInlineEditColumns,
    totalColumns = _ref.totalColumns,
    type = _ref.type;
  var inlineEditColsLessThanHalfOfTotal = totalInlineEditColumns < totalColumns / 2;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)("".concat(blockClass, "__inline-edit-button"), (_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__inline-edit-button--disabled"), disabled || nonEditCell), (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__inline-edit-button--with-label-icon"), LabelIcon), (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__inline-edit-button--non-edit"), nonEditCell), (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__inline-edit-button--active"), isActiveCell), (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__inline-edit-button--edit-less-than-half-of-total-cols"), inlineEditColsLessThanHalfOfTotal), (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__inline-edit-button--").concat(type), type === 'date' || type === 'selection'), _cx)),
    tabIndex: isActiveCell ? 0 : -1,
    "data-disabled": disabled || nonEditCell,
    "aria-disabled": disabled || nonEditCell,
    role: "button",
    title: label
  }, LabelIcon && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__label-icon")
  }, /*#__PURE__*/_react.default.createElement(LabelIcon, null)), label !== '' ? /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)("".concat(blockClass, "__inline-edit-button-label"), (_cx2 = {}, (0, _defineProperty2.default)(_cx2, "".concat(blockClass, "__inline-edit-button-label-with-icon"), !nonEditCell), (0, _defineProperty2.default)(_cx2, "".concat(blockClass, "__defaultStringRenderer--multiline"), columnConfig === null || columnConfig === void 0 ? void 0 : columnConfig.multiLineWrap), _cx2))
  }, label) : /*#__PURE__*/_react.default.createElement("span", {
    className: "".concat(blockClass, "__placeholder")
  }, placeholder), !nonEditCell && Icon && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__inline-edit-button-icon")
  }, /*#__PURE__*/_react.default.createElement(Icon, null)));
};
exports.InlineEditButton = InlineEditButton;
InlineEditButton.propTypes = {
  columnConfig: _propTypes.default.object,
  disabled: _propTypes.default.bool,
  isActiveCell: _propTypes.default.bool,
  label: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),
  labelIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  nonEditCell: _propTypes.default.bool,
  placeholder: _propTypes.default.string,
  renderIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  totalColumns: _propTypes.default.number,
  totalInlineEditColumns: _propTypes.default.number,
  type: _propTypes.default.oneOf(['text', 'number', 'selection', 'date']),
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node])
};