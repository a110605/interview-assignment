"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react2 = require("@carbon/react");
var _isArray = _interopRequireDefault(require("lodash/isArray"));
var _settings = require("../../../../../settings");
var _hooks = require("../../../../../global/js/hooks");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/* eslint-disable react/default-props-match-prop-types */
// @flow
/*
 * Licensed Materials - Property of IBM
 * 5724-Q36
 * (c) Copyright IBM Corp. 2021
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */

var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var RowSizeRadioGroup = function RowSizeRadioGroup(_ref) {
  var rowSizes = _ref.rowSizes,
    selectedOption = _ref.selectedOption,
    datagridName = _ref.datagridName,
    onChange = _ref.onChange,
    hideRadioGroup = _ref.hideRadioGroup,
    legendText = _ref.legendText,
    _ref$rowSizeLabels = _ref.rowSizeLabels,
    rowSizeLabels = _ref$rowSizeLabels === void 0 ? {
      xl: 'Extra large',
      lg: 'Large (default)',
      md: 'Medium',
      sm: 'Small',
      xs: 'Extra small'
    } : _ref$rowSizeLabels;
  var popoverContentRef = (0, _react.useRef)();
  (0, _hooks.useClickOutside)(popoverContentRef, function (target) {
    if (target.closest(".".concat(blockClass, "__row-size-button"))) {
      return;
    }
    hideRadioGroup();
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: popoverContentRef,
    className: "".concat(blockClass, "__row-size-dropdown"),
    role: "presentation",
    onClick: function onClick(e) {
      e.stopPropagation();
    }
  }, /*#__PURE__*/_react.default.createElement(_react2.RadioButtonGroup, {
    legendText: legendText,
    name: "row-height-group",
    orientation: "vertical",
    defaultSelected: getBackwardCompatibleRowSize(selectedOption),
    onChange: onChange
  }, rowSizes && (0, _isArray.default)(rowSizes) && rowSizes.map(function (option) {
    var labelText;
    try {
      labelText = option.labelText || rowSizeLabels[option.value];
    } catch (e) {
      labelText = option.value;
    }
    return /*#__PURE__*/_react.default.createElement(_react2.RadioButton, {
      className: "".concat(blockClass, "__row-size-radio-button"),
      key: option.value,
      labelText: labelText,
      value: option.value,
      id: "".concat(datagridName || 'datagrid', "--row-density--").concat(option.value)
    });
  })));
};
var getBackwardCompatibleRowSize = function getBackwardCompatibleRowSize(rowSize) {
  // TODO: deprecate this function in next major release (v8) on carbon-components-react
  var rowSizeMap = {
    tall: 'xl',
    normal: 'lg',
    short: 'sm',
    compact: 'xs'
    // md is a new value
  };

  return rowSizeMap[rowSize] || rowSize;
};
RowSizeRadioGroup.defaultProps = {
  rowSizes: [{
    value: 'xl' // 64
  }, {
    value: 'lg' // 48
  }, {
    value: 'md' // 40
  }, {
    value: 'sm' // 32
  }, {
    value: 'xs' // 24
  }],

  selectedOption: 'lg'
};
RowSizeRadioGroup.propTypes = {
  datagridName: _propTypes.default.string,
  hideRadioGroup: _propTypes.default.func.isRequired,
  legendText: _propTypes.default.string,
  onChange: _propTypes.default.func.isRequired,
  rowSizeLabels: _propTypes.default.object,
  rowSizes: _propTypes.default.array.isRequired,
  selectedOption: _propTypes.default.string.isRequired
};
var _default = RowSizeRadioGroup;
exports.default = _default;