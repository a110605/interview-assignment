"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react2 = require("@carbon/react");
var _layout = require("@carbon/layout");
var _settings = require("../../../../../settings");
var _constants = require("./constants");
var _classnames = _interopRequireDefault(require("classnames"));
var _framerMotion = require("framer-motion");
var _variants = require("./motion/variants");
var _icons = require("@carbon/react/icons");
var _ActionSet = require("../../../../ActionSet");
var _ = require(".");
var _hooks = require("./hooks");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * Copyright IBM Corp. 2022, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

/* eslint-disable react/jsx-key */

var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var componentClass = "".concat(blockClass, "-filter-panel");
var MotionActionSet = (0, _framerMotion.motion)(_ActionSet.ActionSet);
var FilterPanel = function FilterPanel(_ref) {
  var _cx;
  var _ref$title = _ref.title,
    title = _ref$title === void 0 ? 'Filter' : _ref$title,
    _ref$closeIconDescrip = _ref.closeIconDescription,
    closeIconDescription = _ref$closeIconDescrip === void 0 ? 'Close filter panel' : _ref$closeIconDescrip,
    _ref$updateMethod = _ref.updateMethod,
    updateMethod = _ref$updateMethod === void 0 ? _constants.BATCH : _ref$updateMethod,
    filterSections = _ref.filterSections,
    setAllFilters = _ref.setAllFilters,
    _ref$onApply = _ref.onApply,
    onApply = _ref$onApply === void 0 ? function () {} : _ref$onApply,
    _ref$onCancel = _ref.onCancel,
    onCancel = _ref$onCancel === void 0 ? function () {} : _ref$onCancel,
    _ref$onPanelOpen = _ref.onPanelOpen,
    onPanelOpen = _ref$onPanelOpen === void 0 ? function () {} : _ref$onPanelOpen,
    _ref$onPanelClose = _ref.onPanelClose,
    onPanelClose = _ref$onPanelClose === void 0 ? function () {} : _ref$onPanelClose,
    _ref$showFilterSearch = _ref.showFilterSearch,
    showFilterSearch = _ref$showFilterSearch === void 0 ? false : _ref$showFilterSearch,
    _ref$filterPanelMinHe = _ref.filterPanelMinHeight,
    filterPanelMinHeight = _ref$filterPanelMinHe === void 0 ? 600 : _ref$filterPanelMinHe,
    _ref$primaryActionLab = _ref.primaryActionLabel,
    primaryActionLabel = _ref$primaryActionLab === void 0 ? 'Apply' : _ref$primaryActionLab,
    _ref$secondaryActionL = _ref.secondaryActionLabel,
    secondaryActionLabel = _ref$secondaryActionL === void 0 ? 'Cancel' : _ref$secondaryActionL,
    _ref$searchLabelText = _ref.searchLabelText,
    searchLabelText = _ref$searchLabelText === void 0 ? 'Filter search' : _ref$searchLabelText,
    _ref$searchPlaceholde = _ref.searchPlaceholder,
    searchPlaceholder = _ref$searchPlaceholde === void 0 ? 'Find filters' : _ref$searchPlaceholde,
    _ref$reactTableFilter = _ref.reactTableFiltersState,
    reactTableFiltersState = _ref$reactTableFilter === void 0 ? [] : _ref$reactTableFilter;
  /** State */
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    showDividerLine = _useState2[0],
    setShowDividerLine = _useState2[1];
  var _useFilters = (0, _hooks.useFilters)({
      updateMethod: updateMethod,
      filters: filterSections,
      setAllFilters: setAllFilters,
      variation: _constants.PANEL,
      reactTableFiltersState: reactTableFiltersState,
      onCancel: onCancel
    }),
    filtersState = _useFilters.filtersState,
    prevFiltersObjectArrayRef = _useFilters.prevFiltersObjectArrayRef,
    prevFiltersRef = _useFilters.prevFiltersRef,
    cancel = _useFilters.cancel,
    reset = _useFilters.reset,
    renderFilter = _useFilters.renderFilter,
    filtersObjectArray = _useFilters.filtersObjectArray,
    lastAppliedFilters = _useFilters.lastAppliedFilters;

  /** Refs */
  var filterPanelRef = (0, _react.useRef)();
  var filterHeadingRef = (0, _react.useRef)();
  var filterSearchRef = (0, _react.useRef)();
  var actionSetRef = (0, _react.useRef)();

  /** State from hooks */
  var _useShouldDisableButt = (0, _hooks.useShouldDisableButtons)({
      initialValue: true,
      filtersState: filtersState,
      prevFiltersRef: prevFiltersRef
    }),
    _useShouldDisableButt2 = (0, _slicedToArray2.default)(_useShouldDisableButt, 2),
    shouldDisableButtons = _useShouldDisableButt2[0],
    setShouldDisableButtons = _useShouldDisableButt2[1];

  /** Memos */
  var showActionSet = (0, _react.useMemo)(function () {
    return updateMethod === _constants.BATCH;
  }, [updateMethod]);

  /** Context */
  var _useContext = (0, _react.useContext)(_.FilterContext),
    panelOpen = _useContext.panelOpen,
    setPanelOpen = _useContext.setPanelOpen;

  /** Methods */
  var closePanel = function closePanel() {
    cancel();
    setPanelOpen(false);
  };
  var apply = function apply() {
    setAllFilters(filtersObjectArray);
    // From the user
    onApply();
    // When the user clicks apply, the action set buttons should be disabled again
    setShouldDisableButtons(true);

    // updates the ref so next time the flyout opens we have records of the previous filters
    prevFiltersRef.current = JSON.stringify(filtersState);
    prevFiltersObjectArrayRef.current = JSON.stringify(filtersObjectArray);

    // Update the last applied filters
    lastAppliedFilters.current = JSON.stringify(filtersObjectArray);
  };
  var renderActionSet = function renderActionSet() {
    return showActionSet && /*#__PURE__*/_react.default.createElement(MotionActionSet, {
      actions: [{
        key: 1,
        kind: 'primary',
        label: primaryActionLabel,
        onClick: apply,
        disabled: shouldDisableButtons
      }, {
        key: 2,
        kind: 'secondary',
        label: secondaryActionLabel,
        onClick: cancel,
        disabled: shouldDisableButtons
      }],
      className: "".concat(componentClass, "__action-set"),
      ref: actionSetRef,
      variants: _variants.actionSetVariants
    });
  };
  var onInnerContainerScroll = function onInnerContainerScroll(event) {
    if (event.target.scrollTop > 0) {
      setShowDividerLine(true);
    } else {
      setShowDividerLine(false);
    }
  };

  /** Effects */
  (0, _react.useEffect)(function liftOpenStateToParent() {
    if (panelOpen) {
      onPanelOpen(panelOpen);
    } else {
      onPanelClose(panelOpen);
    }
  }, [panelOpen, onPanelClose, onPanelOpen]);
  (0, _react.useEffect)(function setPanelMinimumHeight() {
    var _filterPanelRef$curre;
    (_filterPanelRef$curre = filterPanelRef.current) === null || _filterPanelRef$curre === void 0 ? void 0 : _filterPanelRef$curre.style.setProperty('--filter-panel-min-height', (0, _layout.rem)(filterPanelMinHeight));
  }, [filterPanelMinHeight]);
  (0, _hooks.useSubscribeToEventEmitter)(_constants.CLEAR_FILTERS, reset);
  var getScrollableContainerHeight = function getScrollableContainerHeight() {
    var _filterHeadingRef$cur, _filterSearchRef$curr, _actionSetRef$current;
    var filterHeadingHeight = (_filterHeadingRef$cur = filterHeadingRef.current) === null || _filterHeadingRef$cur === void 0 ? void 0 : _filterHeadingRef$cur.getBoundingClientRect().height;
    var filterSearchHeight = (_filterSearchRef$curr = filterSearchRef.current) === null || _filterSearchRef$curr === void 0 ? void 0 : _filterSearchRef$curr.getBoundingClientRect().height;
    var actionSetHeight = (_actionSetRef$current = actionSetRef.current) === null || _actionSetRef$current === void 0 ? void 0 : _actionSetRef$current.getBoundingClientRect().height;
    var height = "calc(100vh - ".concat(filterHeadingHeight, "px - ").concat(showFilterSearch ? filterSearchHeight : 0, "px - ").concat(updateMethod === _constants.BATCH ? actionSetHeight : 0, "px)");
    return height;
  };
  return /*#__PURE__*/_react.default.createElement(_framerMotion.motion.div, {
    ref: filterPanelRef,
    className: (0, _classnames.default)(componentClass, "".concat(componentClass, "__container"), (_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(componentClass, "--open"), panelOpen), (0, _defineProperty2.default)(_cx, "".concat(componentClass, "--batch"), showActionSet), (0, _defineProperty2.default)(_cx, "".concat(componentClass, "--instant"), !showActionSet), _cx)),
    initial: false,
    animate: panelOpen ? 'visible' : 'hidden',
    variants: _variants.panelVariants
  }, /*#__PURE__*/_react.default.createElement(_framerMotion.motion.div, {
    variants: _variants.innerContainerVariants
  }, /*#__PURE__*/_react.default.createElement("header", {
    ref: filterHeadingRef,
    className: (0, _classnames.default)("".concat(componentClass, "__heading"), (0, _defineProperty2.default)({}, "".concat(componentClass, "__heading--with-divider"), showDividerLine))
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(componentClass, "__title")
  }, title), /*#__PURE__*/_react.default.createElement(_react2.Button, {
    hasIconOnly: true,
    renderIcon: function renderIcon(props) {
      return /*#__PURE__*/_react.default.createElement(_icons.Close, (0, _extends2.default)({
        size: 16
      }, props));
    },
    iconDescription: closeIconDescription,
    kind: "ghost",
    tooltipPosition: "bottom",
    tooltipAlignment: "end",
    onClick: closePanel
  }), showFilterSearch && /*#__PURE__*/_react.default.createElement("div", {
    ref: filterSearchRef,
    className: "".concat(componentClass, "__search")
  }, /*#__PURE__*/_react.default.createElement(_react2.Layer, null, /*#__PURE__*/_react.default.createElement(_react2.Search, {
    labelText: searchLabelText,
    placeholder: searchPlaceholder,
    size: "sm"
  })))), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(componentClass, "__inner-container"),
    style: {
      height: getScrollableContainerHeight()
    },
    onScroll: onInnerContainerScroll
  }, filterSections.map(function (_ref2, index) {
    var _ref2$categoryTitle = _ref2.categoryTitle,
      categoryTitle = _ref2$categoryTitle === void 0 ? null : _ref2$categoryTitle,
      _ref2$filters = _ref2.filters,
      filters = _ref2$filters === void 0 ? [] : _ref2$filters,
      hasAccordion = _ref2.hasAccordion;
    return /*#__PURE__*/_react.default.createElement("div", {
      key: index,
      className: "".concat(componentClass, "__category")
    }, categoryTitle && /*#__PURE__*/_react.default.createElement("div", {
      className: "".concat(componentClass, "__category-title")
    }, categoryTitle), hasAccordion ? /*#__PURE__*/_react.default.createElement(_react2.Accordion, null, filters.map(function (_ref3) {
      var filterLabel = _ref3.filterLabel,
        filter = _ref3.filter;
      return /*#__PURE__*/_react.default.createElement(_react2.AccordionItem, {
        title: filterLabel,
        key: filterLabel
      }, renderFilter(filter));
    })) : filters.map(function (_ref4) {
      var filter = _ref4.filter;
      return renderFilter(filter);
    }));
  })), renderActionSet()));
};
FilterPanel.propTypes = {
  closeIconDescription: _propTypes.default.string,
  filterPanelMinHeight: _propTypes.default.number,
  filterSections: _propTypes.default.array,
  onApply: _propTypes.default.func,
  onCancel: _propTypes.default.func,
  onPanelClose: _propTypes.default.func,
  onPanelOpen: _propTypes.default.func,
  open: _propTypes.default.bool,
  primaryActionLabel: _propTypes.default.string,
  /**
   * Filters from react table's state
   */
  reactTableFiltersState: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string.isRequired,
    type: _propTypes.default.string.isRequired,
    value: _propTypes.default.any.isRequired
  })),
  searchLabelText: _propTypes.default.string,
  searchPlaceholder: _propTypes.default.string,
  secondaryActionLabel: _propTypes.default.string,
  setAllFilters: _propTypes.default.func.isRequired,
  showFilterSearch: _propTypes.default.bool,
  title: _propTypes.default.string,
  updateMethod: _propTypes.default.oneOf([_constants.BATCH, _constants.INSTANT])
};
var _default = FilterPanel;
exports.default = _default;