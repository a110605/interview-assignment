"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DatagridContent = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react2 = require("@carbon/react");
var _layout = require("@carbon/layout");
var _DatagridHead = _interopRequireDefault(require("./DatagridHead"));
var _DatagridBody = _interopRequireDefault(require("./DatagridBody"));
var _DatagridToolbar = _interopRequireDefault(require("./DatagridToolbar"));
var _handleGridKeyPress = require("./addons/InlineEdit/handleGridKeyPress");
var _settings = require("../../../settings");
var _InlineEditContext = require("./addons/InlineEdit/InlineEditContext");
var _Filtering = require("./addons/Filtering");
var _handleGridFocus = require("./addons/InlineEdit/handleGridFocus");
var _hooks = require("../../../global/js/hooks");
var _hooks2 = require("../../DataSpreadsheet/hooks");
var _FilterSummary = require("../../FilterSummary");
var _constants = require("./addons/Filtering/constants");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var DatagridContent = function DatagridContent(_ref) {
  var _cx4;
  var datagridState = _ref.datagridState;
  var _useContext = (0, _react.useContext)(_InlineEditContext.InlineEditContext),
    inlineEditState = _useContext.state,
    dispatch = _useContext.dispatch;
  var _useContext2 = (0, _react.useContext)(_Filtering.FilterContext),
    filterTags = _useContext2.filterTags,
    EventEmitter = _useContext2.EventEmitter,
    panelOpen = _useContext2.panelOpen;
  var activeCellId = inlineEditState.activeCellId,
    gridActive = inlineEditState.gridActive,
    editId = inlineEditState.editId;
  var _datagridState$getTab = datagridState.getTableProps,
    getTableProps = _datagridState$getTab === void 0 ? function () {} : _datagridState$getTab,
    getFilterFlyoutProps = datagridState.getFilterFlyoutProps,
    withVirtualScroll = datagridState.withVirtualScroll,
    DatagridPagination = datagridState.DatagridPagination,
    isFetching = datagridState.isFetching,
    CustomizeColumnsTearsheet = datagridState.CustomizeColumnsTearsheet,
    filterProps = datagridState.filterProps,
    fullHeightDatagrid = datagridState.fullHeightDatagrid,
    _datagridState$vertic = datagridState.verticalAlign,
    verticalAlign = _datagridState$vertic === void 0 ? 'center' : _datagridState$vertic,
    variableRowHeight = datagridState.variableRowHeight,
    gridTitle = datagridState.gridTitle,
    gridDescription = datagridState.gridDescription,
    useDenseHeader = datagridState.useDenseHeader,
    withInlineEdit = datagridState.withInlineEdit,
    tableId = datagridState.tableId,
    DatagridActions = datagridState.DatagridActions,
    totalColumnsWidth = datagridState.totalColumnsWidth,
    gridRef = datagridState.gridRef,
    state = datagridState.state;
  var rows = DatagridPagination && datagridState.page || datagridState.rows;
  var gridAreaRef = (0, _react.useRef)();
  var multiKeyTrackingRef = (0, _react.useRef)();
  (0, _hooks.useClickOutside)(gridAreaRef, function (target) {
    if (!withInlineEdit) {
      return;
    }
    // We return from here if we find a parent element with the selector below
    // because that element was initially part of the grid area but was removed
    // and swapped out with an input, i.e. text, number, selection, or date picker
    if (target.closest(".".concat(blockClass, "__inline-edit-button")) || target.closest(".".concat(blockClass, "__inline-edit--select"))) {
      return;
    }
    dispatch({
      type: 'REMOVE_GRID_ACTIVE_FOCUS',
      payload: activeCellId
    });
  });
  var renderTable = function renderTable() {
    var _getTableProps;
    return /*#__PURE__*/_react.default.createElement(_react2.Table, (0, _extends2.default)({}, getTableProps(), {
      className: (0, _classnames.default)(withVirtualScroll ? '' : "".concat(blockClass, "__table-simple"), "".concat(blockClass, "__vertical-align-").concat(verticalAlign), (0, _defineProperty2.default)({}, "".concat(blockClass, "__variable-row-height"), variableRowHeight), (0, _defineProperty2.default)({}, "".concat(blockClass, "__table-with-inline-edit"), withInlineEdit), (0, _defineProperty2.default)({}, "".concat(blockClass, "__table-grid-active"), gridActive), (_getTableProps = getTableProps()) === null || _getTableProps === void 0 ? void 0 : _getTableProps.className),
      role: withInlineEdit && 'grid',
      tabIndex: withInlineEdit ? 0 : -1,
      onKeyDown: withInlineEdit ? function (event) {
        return (0, _handleGridKeyPress.handleGridKeyPress)({
          event: event,
          dispatch: dispatch,
          instance: datagridState,
          keysPressedList: keysPressedList,
          state: inlineEditState,
          usingMac: usingMac
        });
      } : null,
      onFocus: withInlineEdit ? function () {
        return (0, _handleGridFocus.handleGridFocus)(inlineEditState, dispatch);
      } : null
    }), !withVirtualScroll ? /*#__PURE__*/_react.default.createElement(_DatagridHead.default, datagridState) : null, /*#__PURE__*/_react.default.createElement(_DatagridBody.default, (0, _extends2.default)({}, datagridState, {
      rows: rows
    })));
  };
  var _useMultipleKeyTracki = (0, _hooks2.useMultipleKeyTracking)({
      ref: withInlineEdit ? multiKeyTrackingRef : null,
      containerHasFocus: gridActive,
      isEditing: !!editId
    }),
    keysPressedList = _useMultipleKeyTracki.keysPressedList,
    usingMac = _useMultipleKeyTracki.usingMac;

  // Provides a width for the region outline for useInlineEdit
  (0, _react.useEffect)(function () {
    if (!withInlineEdit) {
      return;
    }
    var gridElement = document.querySelector("#".concat(tableId));
    var tableHeader = gridElement === null || gridElement === void 0 ? void 0 : gridElement.querySelector(".".concat(_settings.carbon.prefix, "--data-table-header"));
    gridElement.style.setProperty("--".concat(blockClass, "--grid-width"), (0, _layout.px)(totalColumnsWidth + 32));
    if (gridActive) {
      gridElement.style.setProperty("--".concat(blockClass, "--grid-header-height"), (0, _layout.px)((tableHeader === null || tableHeader === void 0 ? void 0 : tableHeader.clientHeight) || 0));
    }
  }, [withInlineEdit, tableId, totalColumnsWidth, datagridState, gridActive]);
  var renderFilterSummary = function renderFilterSummary() {
    return state.filters.length > 0 && /*#__PURE__*/_react.default.createElement(_FilterSummary.FilterSummary, {
      className: "".concat(blockClass, "__filter-summary"),
      filters: filterTags,
      clearFilters: function clearFilters() {
        return EventEmitter.dispatch(_constants.CLEAR_FILTERS);
      }
    });
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_react2.TableContainer, {
    className: (0, _classnames.default)("".concat(blockClass, "__grid-container"), withVirtualScroll || fullHeightDatagrid ? "".concat(blockClass, "__full-height") : '', DatagridPagination ? "".concat(blockClass, "__with-pagination") : '', useDenseHeader ? "".concat(blockClass, "__dense-header") : '', (_cx4 = {}, (0, _defineProperty2.default)(_cx4, "".concat(blockClass, "__grid-container-grid-active"), gridActive), (0, _defineProperty2.default)(_cx4, "".concat(blockClass, "__grid-container-inline-edit"), withInlineEdit), (0, _defineProperty2.default)(_cx4, "".concat(blockClass, "__grid-container-grid-active--without-toolbar"), withInlineEdit && !DatagridActions), _cx4)),
    title: gridTitle,
    description: gridDescription
  }, /*#__PURE__*/_react.default.createElement(_DatagridToolbar.default, datagridState), /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)("".concat(blockClass, "__table-container"), (0, _defineProperty2.default)({}, "".concat(blockClass, "__table-container--filter-open"), panelOpen)),
    ref: gridAreaRef
  }, (filterProps === null || filterProps === void 0 ? void 0 : filterProps.variation) === 'panel' && /*#__PURE__*/_react.default.createElement(_Filtering.FilterPanel, (0, _extends2.default)({
    updateMethod: "batch"
  }, getFilterFlyoutProps(), {
    title: filterProps.panelTitle,
    filterSections: filterProps.sections
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__table-container-inner")
  }, renderFilterSummary(), withInlineEdit ? /*#__PURE__*/_react.default.createElement("div", {
    ref: multiKeyTrackingRef
  }, renderTable()) : withVirtualScroll ? /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__virtualScrollContainer"),
    ref: gridRef
  }, renderTable()) : renderTable()))), (rows === null || rows === void 0 ? void 0 : rows.length) > 0 && !isFetching && DatagridPagination && /*#__PURE__*/_react.default.createElement(DatagridPagination, datagridState), CustomizeColumnsTearsheet && /*#__PURE__*/_react.default.createElement(CustomizeColumnsTearsheet, {
    instance: datagridState
  }));
};
exports.DatagridContent = DatagridContent;
DatagridContent.propTypes = {
  datagridState: _propTypes.default.shape({
    getTableProps: _propTypes.default.func,
    getFilterFlyoutProps: _propTypes.default.func,
    withVirtualScroll: _propTypes.default.bool,
    DatagridActions: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),
    DatagridPagination: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),
    CustomizeColumnsTearsheet: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func]),
    isFetching: _propTypes.default.bool,
    fullHeightDatagrid: _propTypes.default.bool,
    filterProps: _propTypes.default.object,
    variableRowHeight: _propTypes.default.bool,
    useDenseHeader: _propTypes.default.bool,
    withInlineEdit: _propTypes.default.bool,
    verticalAlign: _propTypes.default.string,
    gridTitle: _propTypes.default.node,
    gridDescription: _propTypes.default.node,
    page: _propTypes.default.arrayOf(_propTypes.default.object),
    rows: _propTypes.default.arrayOf(_propTypes.default.object),
    tableId: _propTypes.default.string,
    totalColumnsWidth: _propTypes.default.number,
    gridRef: _propTypes.default.object,
    setAllFilters: _propTypes.default.func,
    getFilterProps: _propTypes.default.func,
    state: _propTypes.default.object
  })
};