"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@carbon/react");
var _layout = require("@carbon/layout");
var _commonColumnIds = require("../common-column-ids");
var _classnames = _interopRequireDefault(require("classnames"));
var _settings = require("../../../settings");
var _excluded = ["children"];
/*
 * Licensed Materials - Property of IBM
 * 5724-Q36
 * (c) Copyright IBM Corp. 2020
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */
// @flow
var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var rowHeights = {
  xs: 24,
  sm: 32,
  md: 40,
  lg: 48,
  xl: 64
};

// eslint-disable-next-line react/prop-types
var DatagridRow = function DatagridRow(datagridState) {
  var _cx;
  var row = datagridState.row,
    rowSize = datagridState.rowSize,
    withNestedRows = datagridState.withNestedRows;
  var getVisibleNestedRowCount = function getVisibleNestedRowCount(_ref) {
    var isExpanded = _ref.isExpanded,
      subRows = _ref.subRows;
    var size = 0;
    if (isExpanded && subRows) {
      size += subRows.length;
      subRows.forEach(function (child) {
        size += getVisibleNestedRowCount(child);
      });
    }
    return size;
  };
  var hoverHandler = function hoverHandler(event) {
    var _hoverRow$style, _hoverRow$style2, _hoverRow$style3;
    var subRowCount = getVisibleNestedRowCount(row);
    var totalNestedRowIndicatorHeight = (0, _layout.px)(subRowCount * rowHeights[rowSize]);
    var hoverRow = event.target.closest(".".concat(blockClass, "__carbon-row-expanded"));
    hoverRow === null || hoverRow === void 0 ? void 0 : hoverRow.classList.add("".concat(blockClass, "__carbon-row-expanded-hover-active"));
    var rowExpanderButton = hoverRow === null || hoverRow === void 0 ? void 0 : hoverRow.querySelector(".".concat(blockClass, "__row-expander"));
    var rowSizeValue = rowSize || 'lg';
    hoverRow === null || hoverRow === void 0 ? void 0 : (_hoverRow$style = hoverRow.style) === null || _hoverRow$style === void 0 ? void 0 : _hoverRow$style.setProperty("--".concat(blockClass, "--indicator-height"), totalNestedRowIndicatorHeight);
    hoverRow === null || hoverRow === void 0 ? void 0 : (_hoverRow$style2 = hoverRow.style) === null || _hoverRow$style2 === void 0 ? void 0 : _hoverRow$style2.setProperty("--".concat(blockClass, "--row-height"), (0, _layout.px)(rowHeights[rowSizeValue]));
    hoverRow === null || hoverRow === void 0 ? void 0 : (_hoverRow$style3 = hoverRow.style) === null || _hoverRow$style3 === void 0 ? void 0 : _hoverRow$style3.setProperty("--".concat(blockClass, "--indicator-offset-amount"), (0, _layout.px)((rowExpanderButton === null || rowExpanderButton === void 0 ? void 0 : rowExpanderButton.offsetLeft) || 0));
  };
  var focusRemover = function focusRemover() {
    var elements = document.querySelectorAll(".".concat(blockClass, "__carbon-row-expanded"));
    elements.forEach(function (el) {
      el.classList.remove("".concat(blockClass, "__carbon-row-expanded-hover-active"));
    });
  };
  return /*#__PURE__*/_react.default.createElement(_react2.TableRow, (0, _extends2.default)({
    className: (0, _classnames.default)("".concat(blockClass, "__carbon-row"), (_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__carbon-row-expanded"), row.isExpanded), (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__carbon-row-expandable"), row.canExpand), (0, _defineProperty2.default)(_cx, "".concat(_settings.carbon.prefix, "--data-table--selected"), row.isSelected), _cx))
  }, row.getRowProps({
    role: false
  }), {
    key: row.id,
    onMouseEnter: function onMouseEnter(event) {
      if (!withNestedRows) {
        return;
      }
      hoverHandler(event);
    },
    onMouseLeave: function onMouseLeave(event) {
      var hoverRow = event.target.closest(".".concat(blockClass, "__carbon-row-expanded"));
      hoverRow === null || hoverRow === void 0 ? void 0 : hoverRow.classList.remove("".concat(blockClass, "__carbon-row-expanded-hover-active"));
    },
    onFocus: function onFocus(event) {
      if (!withNestedRows) {
        return;
      }
      hoverHandler(event);
    },
    onBlur: function onBlur() {
      focusRemover();
    },
    onKeyUp: function onKeyUp(event) {
      if (!withNestedRows) {
        return;
      }
      if (event.key === 'Enter' || event.key === 'Space') {
        focusRemover();
        hoverHandler(event);
      }
    }
  }), row.cells.map(function (cell, index) {
    var cellProps = cell.getCellProps({
      role: false
    });
    var children = cellProps.children,
      restProps = (0, _objectWithoutProperties2.default)(cellProps, _excluded);
    var content = children || /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !row.isSkeleton && cell.render('Cell'), row.isSkeleton && /*#__PURE__*/_react.default.createElement(_react2.SkeletonText, null));
    if (cell && cell.column && cell.column.id === _commonColumnIds.selectionColumnId) {
      // directly render component without the wrapping TableCell
      return cell.render('Cell', {
        key: cell.column.id
      });
    }
    return /*#__PURE__*/_react.default.createElement(_react2.TableCell, (0, _extends2.default)({
      className: (0, _classnames.default)("".concat(blockClass, "__cell"), (0, _defineProperty2.default)({}, "".concat(blockClass, "__expandable-row-cell"), row.canExpand && index === 0))
    }, restProps, {
      key: cell.column.id
    }), content);
  }));
};
var _default = DatagridRow;
exports.default = _default;