"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var React = _interopRequireWildcard(require("react"));
var _settings = require("../../settings");
var _CustomizeColumns = require("./Datagrid/addons/CustomizeColumns");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } /**
opyright IBM Corp. 2021, 2023

his source code is licensed under the Apache-2.0 license found in the
file in the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          */
var useCustomizeColumns = function useCustomizeColumns(hooks) {
  React.useEffect(function () {
    _settings.pkg.checkReportFeatureEnabled('Datagrid.useCustomizeColumns');
  }, []);
  var _React$useState = React.useState(false),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    isTearsheetOpen = _React$useState2[0],
    setIsTearsheetOpen = _React$useState2[1];
  hooks.useInstance.push(function (instance) {
    var customizeColumnsProps = instance.customizeColumnsProps;
    var _ref = customizeColumnsProps || {},
      labels = _ref.labels;
    Object.assign(instance, {
      customizeColumnsProps: _objectSpread(_objectSpread({}, customizeColumnsProps), {}, {
        isTearsheetOpen: isTearsheetOpen,
        setIsTearsheetOpen: setIsTearsheetOpen
      }),
      CustomizeColumnsButton: function CustomizeColumnsButton(props) {
        return /*#__PURE__*/React.createElement(_CustomizeColumns.ToggleButtonWrapper, (0, _extends2.default)({
          iconTooltipLabel: labels === null || labels === void 0 ? void 0 : labels.iconTooltipLabel,
          isTearsheetOpen: isTearsheetOpen,
          setIsTearsheetOpen: setIsTearsheetOpen
        }, props));
      },
      CustomizeColumnsTearsheet: _CustomizeColumns.CustomizeColumnsTearsheetWrapper
    });
  });
};
var _default = useCustomizeColumns;
exports.default = _default;