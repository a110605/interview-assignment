"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _react2 = require("@carbon/react");
var _DatagridSelectAll = require("./Datagrid/DatagridSelectAll");
var _commonColumnIds = require("./common-column-ids");
var _settings = require("../../settings");
var _excluded = ["onChange"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } /*
icensed Materials - Property of IBM
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * 5724-Q36
c) Copyright IBM Corp. 2020
overnment Users Restricted Rights - Use, duplication or disclosure
restricted by GSA ADP Schedule Contract with IBM Corp.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          */ // @flow
var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var useSelectRows = function useSelectRows(hooks) {
  useHighlightSelection(hooks);
  var useInstance = function useInstance(instance) {
    var rows = instance.rows;
    var rowsWithSelect = rows.map(function (row) {
      return _objectSpread(_objectSpread({}, row), {}, {
        isSelectable: true
      });
    });
    Object.assign(instance, {
      rows: rowsWithSelect
    });
  };
  hooks.useInstance.push(useInstance);
  hooks.useInstance.push(function (instance) {
    Object.assign(instance, {
      withSelectRows: true
    });
  });
  hooks.visibleColumns.push(function (columns) {
    return [{
      id: _commonColumnIds.selectionColumnId,
      Header: function Header(gridState) {
        return /*#__PURE__*/_react.default.createElement(_DatagridSelectAll.SelectAll, gridState);
      },
      Cell: function Cell(gridState) {
        return /*#__PURE__*/_react.default.createElement(SelectRow, gridState);
      }
    }].concat((0, _toConsumableArray2.default)(columns));
  });
};
var useHighlightSelection = function useHighlightSelection(hooks) {
  var getRowProps = function getRowProps(props, _ref) {
    var row = _ref.row;
    return [props, {
      className: (0, _classnames.default)("".concat(blockClass, "__carbon-row"), row.getToggleRowSelectedProps().checked ? "".concat(_settings.carbon.prefix, "--data-table--selected ").concat(blockClass, "__active-row") : '')
    }];
  };
  hooks.getRowProps.push(getRowProps);
};
var SelectRow = function SelectRow(datagridState) {
  var _columns$;
  var _datagridState$isFetc = datagridState.isFetching,
    isFetching = _datagridState$isFetc === void 0 ? false : _datagridState$isFetc,
    tableId = datagridState.tableId,
    row = datagridState.row,
    cell = datagridState.cell,
    radio = datagridState.radio,
    toggleAllRowsSelected = datagridState.toggleAllRowsSelected,
    onRadioSelect = datagridState.onRadioSelect,
    onRowSelect = datagridState.onRowSelect,
    columns = datagridState.columns,
    withStickyColumn = datagridState.withStickyColumn;
  var _useState = (0, _react.useState)(window.innerWidth),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    windowSize = _useState2[0],
    setWindowSize = _useState2[1];
  (0, _react.useLayoutEffect)(function () {
    function updateSize() {
      setWindowSize(window.innerWidth);
    }
    window.addEventListener('resize', updateSize);
    return function () {
      return window.removeEventListener('resize', updateSize);
    };
  }, []);
  var selectDisabled = isFetching || row.getRowProps().selectDisabled;
  var _row$getToggleRowSele = row.getToggleRowSelectedProps(),
    onChange = _row$getToggleRowSele.onChange,
    selectProps = (0, _objectWithoutProperties2.default)(_row$getToggleRowSele, _excluded);
  var cellProps = cell.getCellProps();
  var isFirstColumnStickyLeft = ((_columns$ = columns[0]) === null || _columns$ === void 0 ? void 0 : _columns$.sticky) === 'left' && withStickyColumn;
  return /*#__PURE__*/_react.default.createElement(_react2.TableSelectRow, (0, _extends2.default)({}, cellProps, selectProps, {
    radio: radio,
    onSelect: function onSelect(e) {
      e.stopPropagation(); // avoid triggering onRowClick
      if (radio) {
        toggleAllRowsSelected(false);
        if (onRadioSelect) {
          onRadioSelect(row);
        }
      }
      onChange(e);
      onRowSelect === null || onRowSelect === void 0 ? void 0 : onRowSelect(row, e);
    },
    id: "".concat(tableId, "-").concat(row.index),
    name: "".concat(tableId, "-").concat(row.index, "-name"),
    className: (0, _classnames.default)("".concat(blockClass, "__checkbox-cell"), cellProps.className, (0, _defineProperty2.default)({}, "".concat(blockClass, "__checkbox-cell-sticky-left"), isFirstColumnStickyLeft && windowSize > 671)),
    ariaLabel: "".concat(tableId, "-row-").concat(row.index) // TODO: aria label should be i18n'ed
    ,
    disabled: selectDisabled
  }));
};
var _default = useSelectRows;
exports.default = _default;