"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _commonColumnIds = require("./common-column-ids");
var _DatagridSelectAllWithToggle = _interopRequireDefault(require("./Datagrid/DatagridSelectAllWithToggle"));
var _settings = require("../../settings");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Licensed Materials - Property of IBM
 * 5724-Q36
 * (c) Copyright IBM Corp. 2021
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 */
// @flow

var blockClass = "".concat(_settings.pkg.prefix, "--datagrid");
var useSelectAllToggle = function useSelectAllToggle(hooks) {
  useSelectAllWithToggleComponent(hooks);
  useAddClassNameToSelectRow(hooks);
};
var useSelectAllWithToggleComponent = function useSelectAllWithToggleComponent(hooks) {
  var useInstance = function useInstance(instance) {
    var headers = instance.headers,
      DatagridPagination = instance.DatagridPagination;
    var headersWithSelectAllToggle = headers.map(function (header) {
      if (header.id === _commonColumnIds.selectionColumnId && DatagridPagination) {
        Object.assign(header, {
          Header: Header
        });
      }
      return header;
    });
    Object.assign(instance, {
      headers: headersWithSelectAllToggle
    });
  };
  hooks.useInstance.push(useInstance);
};
var useAddClassNameToSelectRow = function useAddClassNameToSelectRow(hooks) {
  var _useState = (0, _react.useState)(window.innerWidth),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    windowSize = _useState2[0],
    setWindowSize = _useState2[1];
  (0, _react.useLayoutEffect)(function () {
    function updateSize() {
      setWindowSize(window.innerWidth);
    }
    window.addEventListener('resize', updateSize);
    return function () {
      return window.removeEventListener('resize', updateSize);
    };
  }, []);
  hooks.getCellProps.push(function (props, data) {
    var _columns$;
    var column = data.cell.column;
    var _data$instance = data.instance,
      DatagridPagination = _data$instance.DatagridPagination,
      columns = _data$instance.columns,
      withStickyColumn = _data$instance.withStickyColumn;
    var isFirstColumnStickyLeft = ((_columns$ = columns[0]) === null || _columns$ === void 0 ? void 0 : _columns$.sticky) === 'left' && withStickyColumn;
    if (column.id === _commonColumnIds.selectionColumnId && DatagridPagination) {
      return [props, {
        className: (0, _classnames.default)("".concat(blockClass, "__select-all-toggle-on"), (0, _defineProperty2.default)({}, "".concat(blockClass, "__select-all-sticky-left"), isFirstColumnStickyLeft && windowSize > 671))
      }];
    }
    return [props];
  });
};
var Header = function Header(gridState) {
  var tableId = gridState.tableId,
    isFetching = gridState.isFetching,
    selectAllToggle = gridState.selectAllToggle,
    getToggleAllPageRowsSelectedProps = gridState.getToggleAllPageRowsSelectedProps,
    getToggleAllRowsSelectedProps = gridState.getToggleAllRowsSelectedProps,
    isAllRowsSelected = gridState.isAllRowsSelected,
    withStickyColumn = gridState.withStickyColumn,
    columns = gridState.columns;
  var props = {
    tableId: tableId,
    isFetching: isFetching,
    selectAllToggle: selectAllToggle,
    getToggleAllPageRowsSelectedProps: getToggleAllPageRowsSelectedProps,
    getToggleAllRowsSelectedProps: getToggleAllRowsSelectedProps,
    isAllRowsSelected: isAllRowsSelected,
    withStickyColumn: withStickyColumn,
    columns: columns
  };
  return /*#__PURE__*/_react.default.createElement(_DatagridSelectAllWithToggle.default, props);
};
var _default = useSelectAllToggle;
exports.default = _default;