"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _settings = require("../../settings");
/**
 * Copyright IBM Corp. 2020, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

var useExample = function useExample(initialTime) {
  // NOTE: hooks cannot be called conditionally.
  //
  // ** If the hook uses other hooks then they must be called,
  // ** this could lead to unexpected behavior.
  // ** As some hooks may still be called even if the condition is false.

  var _useState = (0, _react.useState)(
    // Disable hook in a safe way if possible, else use despite feature disabled.
    // Either a console error or warning will be logged.
    initialTime),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    time = _useState2[0],
    setTime = _useState2[1];

  // Use of the feature flag to
  var feature = 'ExampleComponent.useExample';
  var tryFeature = initialTime !== undefined;
  var featureEnabled = tryFeature && _settings.pkg.checkReportFeatureEnabled(feature);
  if (tryFeature && !featureEnabled) {
    // Output a useful message if the feature is disabled.
    console.warn("Disabled feature \"".concat(feature, "\" does not change the initialTime."));
  }

  // Actual hook is code is below
  (0, _react.useEffect)(function () {
    if (!featureEnabled) {
      return;
    }

    // turn off all or part of the feature
    if (time > 0) {
      setTimeout(function () {
        setTime(Math.max(0, time - 0.1));
      }, 100);
    }
  }, [featureEnabled, time]);
  return [time];
};
var _default = useExample;
exports.default = _default;