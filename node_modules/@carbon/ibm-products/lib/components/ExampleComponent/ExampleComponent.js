"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExampleComponent = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _settings = require("../../settings");
var _react2 = require("@carbon/react");
var _useExample3 = _interopRequireDefault(require("./useExample"));
var _excluded = ["borderColor", "boxedBorder", "className", "disabled", "usesExampleHook", "onPrimaryClick", "onSecondaryClick", "primaryButtonLabel", "primaryKind", "secondaryButtonLabel", "secondaryKind", "secondaryIcon", "size", "style"];
/**
 * Copyright IBM Corp. 2020, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
// Import portions of React that are needed.
// Other standard imports.
// Carbon and package components we use.
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
// The block part of our conventional BEM class names (blockClass__E--M).
var blockClass = "".concat(_settings.pkg.prefix, "--example-component");
var componentName = 'ExampleComponent';

// NOTE: the component SCSS is not imported here: it is rolled up separately.

// Default values for props
var defaults = {
  primaryKind: 'primary',
  secondaryKind: 'secondary',
  secondaryIcon: null,
  size: 'lg'
};

/**
 * This is an example component to show relevant conventions and usage.
 */
var ExampleComponent = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var borderColor = _ref.borderColor,
    boxedBorder = _ref.boxedBorder,
    className = _ref.className,
    disabled = _ref.disabled,
    usesExampleHook = _ref.usesExampleHook,
    onPrimaryClick = _ref.onPrimaryClick,
    onSecondaryClick = _ref.onSecondaryClick,
    primaryButtonLabel = _ref.primaryButtonLabel,
    _ref$primaryKind = _ref.primaryKind,
    primaryKind = _ref$primaryKind === void 0 ? defaults.primaryKind : _ref$primaryKind,
    secondaryButtonLabel = _ref.secondaryButtonLabel,
    _ref$secondaryKind = _ref.secondaryKind,
    secondaryKind = _ref$secondaryKind === void 0 ? defaults.secondaryKind : _ref$secondaryKind,
    _ref$secondaryIcon = _ref.secondaryIcon,
    secondaryIcon = _ref$secondaryIcon === void 0 ? defaults.secondaryIcon : _ref$secondaryIcon,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? defaults.size : _ref$size,
    style = _ref.style,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _useState = (0, _react.useState)(primaryButtonLabel),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    thePrimaryButtonLabel = _useState2[0],
    setThePrimaryButtonLabel = _useState2[1];
  var _useExample = (0, _useExample3.default)(usesExampleHook),
    _useExample2 = (0, _slicedToArray2.default)(_useExample, 1),
    exampleUse = _useExample2[0];
  var modeClass = boxedBorder ? "".concat(blockClass, "--boxed-set") : "".concat(blockClass, "--shadow-set");
  var handlePrimaryClick = function handlePrimaryClick(e) {
    if (onPrimaryClick) {
      onPrimaryClick(e);
    }
  };
  var handleSecondaryClick = function handleSecondaryClick(e) {
    if (onSecondaryClick) {
      onSecondaryClick(e);
    }
  };
  var theSecondaryIcon = (0, _react.useRef)(secondaryIcon && _settings.pkg.checkReportFeatureEnabled('ExampleComponent.secondaryIcon') ? secondaryIcon : null);
  (0, _react.useEffect)(function () {
    if (usesExampleHook !== undefined && _settings.pkg.checkReportFeatureEnabled('ExampleComponent.useExample')) {
      setThePrimaryButtonLabel("".concat(primaryButtonLabel, " ").concat(exampleUse.toFixed(1), "s"));
    } else {
      setThePrimaryButtonLabel(primaryButtonLabel);
    }
  }, [primaryButtonLabel, usesExampleHook, exampleUse]);
  return /*#__PURE__*/_react.default.createElement(_react2.ButtonSet, (0, _extends2.default)({}, rest, {
    className: (0, _classnames.default)(blockClass,
    // Apply the block class to the main HTML element
    className, // Apply any supplied class names to the main HTML element.
    "".concat(blockClass, "--").concat(size), modeClass),
    ref: ref,
    role: "main",
    style: _objectSpread(_objectSpread({}, style), {}, (0, _defineProperty2.default)({}, "--".concat(blockClass, "--border-color"), borderColor))
  }), /*#__PURE__*/_react.default.createElement(_react2.Button, {
    className: "".concat(blockClass, "__secondary-button"),
    kind: secondaryKind,
    onClick: handleSecondaryClick,
    renderIcon: theSecondaryIcon.current,
    disabled: disabled,
    size: size
  }, secondaryButtonLabel), /*#__PURE__*/_react.default.createElement(_react2.Button, {
    className: "".concat(blockClass, "__primary-button"),
    kind: primaryKind,
    onClick: handlePrimaryClick,
    disabled: disabled,
    size: size
  }, thePrimaryButtonLabel));
});

// Return a placeholder if not released and not enabled by feature flag.
exports.ExampleComponent = ExampleComponent;
exports.ExampleComponent = ExampleComponent = _settings.pkg.checkComponentEnabled(ExampleComponent, componentName);

// The display name of the component, used by React. Note that displayName
// is used in preference to relying on function.name.
ExampleComponent.displayName = componentName;

// The types and DocGen commentary for the component props,
// in alphabetical order (for consistency).
// See https://www.npmjs.com/package/prop-types#usage.
ExampleComponent.propTypes = {
  /**
   * What border color (HTML color value) to use.
   */
  borderColor: _propTypes.default.string,
  /**
   * If true, the border is a box, otherwise it is a shadow.
   */
  boxedBorder: _propTypes.default.bool,
  /**
   * Provide an optional class to be applied to the containing node.
   */
  className: _propTypes.default.string,
  /**
   * If true, the buttons are disabled, otherwise they can be used.
   */
  disabled: _propTypes.default.bool,
  /**
   * An optional primary button click handler.
   */
  onPrimaryClick: _propTypes.default.func,
  /**
   * An optional secondary button click handler.
   */
  onSecondaryClick: _propTypes.default.func,
  /**
   * The primary button label.
   */
  primaryButtonLabel: _propTypes.default.string.isRequired,
  /**
   * The kind of button for the primary button ('primary' or 'danger').
   */
  primaryKind: _propTypes.default.oneOf(['primary', 'danger']),
  /**
   * The secondary button label.
   */
  secondaryButtonLabel: _propTypes.default.string.isRequired,
  /**
   * The icon to use for the secondary button.
   */
  secondaryIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  /**
   * The kind of button for the secondary button ('secondary' or 'tertiary').
   */
  secondaryKind: _propTypes.default.oneOf(['secondary', 'tertiary']),
  /**
   * The size for the buttons
   */
  size: _propTypes.default.oneOf(['sm', 'md', 'lg', 'xl', '2xl']),
  /**
   * Optional style settings for the containing node.
   */
  style: _propTypes.default.object,
  /**
   * Hook example timeout (in seconds) or undefined
   */
  usesExampleHook: _propTypes.default.number
};