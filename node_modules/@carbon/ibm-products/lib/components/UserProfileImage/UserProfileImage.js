"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserProfileImage = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _devtools = require("../../global/js/utils/devtools");
require("../../global/js/utils/props-helper");
var _settings = require("../../settings");
var _icons = require("@carbon/react/icons");
var _react2 = require("@carbon/react");
var _excluded = ["backgroundColor", "className", "kind", "icon", "initials", "image", "imageDescription", "size", "theme", "tooltipText", "tooltipAlignment"];
/**
 * Copyright IBM Corp. 2021, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
// Import portions of React that are needed.
// Other standard imports.
// Carbon and package components we use.
// The block part of our conventional BEM class names (blockClass__E--M).
var blockClass = "".concat(_settings.pkg.prefix, "--user-profile-image");
var componentName = 'UserProfileImage';

// NOTE: the component SCSS is not imported here: it is rolled up separately.

// Default values for props
var defaults = {
  tooltipAlignment: 'bottom'
};
/**
 * The user profile avatar allows for an image of the user to be displayed by passing in the image prop. By default the component will display a user icon on a blue background.
 */
var UserProfileImage = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var backgroundColor = _ref.backgroundColor,
    className = _ref.className,
    kind = _ref.kind,
    icon = _ref.icon,
    initials = _ref.initials,
    image = _ref.image,
    imageDescription = _ref.imageDescription,
    size = _ref.size,
    theme = _ref.theme,
    tooltipText = _ref.tooltipText,
    _ref$tooltipAlignment = _ref.tooltipAlignment,
    tooltipAlignment = _ref$tooltipAlignment === void 0 ? defaults.tooltipAlignment : _ref$tooltipAlignment,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var icons = {
    user: {
      md: function md(props) {
        return /*#__PURE__*/_react.default.createElement(_icons.User, (0, _extends2.default)({
          size: 20
        }, props));
      },
      lg: function lg(props) {
        return /*#__PURE__*/_react.default.createElement(_icons.User, (0, _extends2.default)({
          size: 24
        }, props));
      },
      xl: function xl(props) {
        return /*#__PURE__*/_react.default.createElement(_icons.User, (0, _extends2.default)({
          size: 32
        }, props));
      }
    },
    group: {
      md: function md(props) {
        return /*#__PURE__*/_react.default.createElement(_icons.Group, (0, _extends2.default)({
          size: 20
        }, props));
      },
      lg: function lg(props) {
        return /*#__PURE__*/_react.default.createElement(_icons.Group, (0, _extends2.default)({
          size: 24
        }, props));
      },
      xl: function xl(props) {
        return /*#__PURE__*/_react.default.createElement(_icons.Group, (0, _extends2.default)({
          size: 32
        }, props));
      }
    }
  };
  var formatInitials = function formatInitials() {
    if (initials.length === 2) {
      return initials;
    }
    // RegEx takes in the display name and returns the first and last initials. Thomas Watson and Thomas J. Watson
    // both return JW.
    return initials.match(/(^\S\S?|\b\S)?/g).join('').match(/(^\S|\S$)?/g).join('').toUpperCase();
  };
  var getFillItem = function getFillItem() {
    if (image) {
      return function () {
        return /*#__PURE__*/_react.default.createElement("img", {
          alt: imageDescription,
          src: image,
          className: "".concat(blockClass, "__photo ").concat(blockClass, "__photo--").concat(size)
        });
      };
    }
    if (initials) {
      return formatInitials;
    }
    if (kind && size) {
      return icons[kind][size];
    }
    return icon;
  };

  // if user doesn't provide a color just generate a random one
  var getRandomColor = function getRandomColor() {
    var colors = ['light-cyan', 'dark-cyan', 'light-gray', 'dark-gray', 'light-green', 'dark-green', 'light-magenta', 'dark-magenta', 'light-purple', 'dark-purple', 'light-teal', 'dark-teal'];
    return colors[Math.floor(Math.random() * colors.length)];
  };
  var FillItem = getFillItem();
  var renderUserProfileImage = function renderUserProfileImage() {
    return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, rest, {
      ref: ref,
      className: (0, _classnames.default)([blockClass, className, "".concat(blockClass, "--").concat(size), "".concat(blockClass, "--").concat(theme), "".concat(blockClass, "--").concat(backgroundColor || getRandomColor())])
    }, (0, _devtools.getDevtoolsProps)(componentName)), /*#__PURE__*/_react.default.createElement(FillItem, null));
  };
  return FillItem && (tooltipText ? /*#__PURE__*/_react.default.createElement(_react2.IconButton, {
    label: tooltipText,
    className: "".concat(blockClass, "__tooltip"),
    kind: "ghost",
    align: tooltipAlignment
  }, renderUserProfileImage()) : renderUserProfileImage());
});

// Return a placeholder if not released and not enabled by feature flag
exports.UserProfileImage = UserProfileImage;
exports.UserProfileImage = UserProfileImage = _settings.pkg.checkComponentEnabled(UserProfileImage, componentName);
UserProfileImage.displayName = componentName;
UserProfileImage.propTypes = {
  /**
   * The background color passed should match one of the background colors in the library documentation:
   * https://pages.github.ibm.com/cdai-design/pal/patterns/user-profile-images/
   */
  backgroundColor: _propTypes.default.oneOf(['light-cyan', 'dark-cyan', 'light-gray', 'dark-gray', 'light-green', 'dark-green', 'light-magenta', 'dark-magenta', 'light-purple', 'dark-purple', 'light-teal', 'dark-teal']),
  /**
   * Provide an optional class to be applied to the containing node.
   */
  className: _propTypes.default.string,
  /**
   * Provide a custom icon to use if you need to use an icon other than the included ones
   */
  icon: _propTypes.default.func,
  /**
   * When passing the image prop, supply a full path to the image to be displayed.
   */
  image: _propTypes.default.string,
  /**
   * When passing the image prop use the imageDescription prop to describe the image for screen reader.
   */
  imageDescription: _propTypes.default.string.isRequired.if(function (_ref2) {
    var image = _ref2.image;
    return !!image;
  }),
  /**
   * When passing the initials prop, either send the initials to be used or the user's display name. The first two capital letters of the display name will be used as the initials.
   */
  initials: _propTypes.default.string,
  /**
   * When passing the kind prop, use either "user" or "group". The values match up to the Carbon Library icons.
   */
  kind: _propTypes.default.oneOf(['user', 'group']),
  /**
   * Set the size of the avatar circle
   */
  size: _propTypes.default.oneOf(['xl', 'lg', 'md']).isRequired,
  /**
   * Set theme in which the component will be rendered
   */
  theme: _propTypes.default.oneOf(['light', 'dark']).isRequired,
  /**
   * Specify how the trigger should align with the tooltip
   */
  tooltipAlignment: _propTypes.default.oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'right']),
  /**
   * Pass in the display name to have it shown on hover
   */
  tooltipText: _propTypes.default.string
};