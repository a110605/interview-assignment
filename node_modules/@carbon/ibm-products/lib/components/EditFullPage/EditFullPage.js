"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditFullPage = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _devtools = require("../../global/js/utils/devtools");
var _settings = require("../../settings");
var _excluded = ["children", "className"];
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
// Import portions of React that are needed.
// Other standard imports.
// Carbon and package components we use.
/* TODO: @import(s) of carbon components and other package components. */ // The block part of our conventional BEM class names (blockClass__E--M).
var blockClass = "".concat(_settings.pkg.prefix, "--edit-full-page");
var componentName = 'EditFullPage';

// NOTE: the component SCSS is not imported here: it is rolled up separately.

// Default values can be included here and then assigned to the prop params,
// e.g. prop = defaults.prop,
// This gathers default values together neatly and ensures non-primitive
// values are initialized early to avoid react making unnecessary re-renders.
// Note that default values are not required for props that are 'required',
// nor for props where the component can apply undefined values reasonably.
// Default values should be provided when the component needs to make a choice
// or assumption when a prop is not supplied.

// Default values for props
// const defaults = {
//   /* TODO: add defaults for relevant props if needed */
// };

/**
 * Use when settings on a page need to always be shown in edit mode, or when the context of the page is needed to make several changes.
 * See usage guidance for further details.
 */
var EditFullPage = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var children = _ref.children,
    className = _ref.className,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, rest, {
    className: (0, _classnames.default)(blockClass,
    // Apply the block class to the main HTML element
    className,
    // Apply any supplied class names to the main HTML element.
    // example: `${blockClass}__template-string-class-${kind}-n-${size}`,
    {
      // switched classes dependant on props or state
      // example: [`${blockClass}__here-if-small`]: size === 'sm',
    }),
    ref: ref,
    role: "main"
  }, (0, _devtools.getDevtoolsProps)(componentName)), children);
});

// Return a placeholder if not released and not enabled by feature flag
exports.EditFullPage = EditFullPage;
exports.EditFullPage = EditFullPage = _settings.pkg.checkComponentEnabled(EditFullPage, componentName);

// The display name of the component, used by React. Note that displayName
// is used in preference to relying on function.name.
EditFullPage.displayName = componentName;

// The types and DocGen commentary for the component props,
// in alphabetical order (for consistency).
// See https://www.npmjs.com/package/prop-types#usage.
EditFullPage.propTypes = {
  /**
   * Provide the contents of the EditFullPage.
   */
  children: _propTypes.default.node.isRequired,
  /**
   * Provide an optional class to be applied to the containing node.
   */
  className: _propTypes.default.string

  /* TODO: add types and DocGen for all props. */
};