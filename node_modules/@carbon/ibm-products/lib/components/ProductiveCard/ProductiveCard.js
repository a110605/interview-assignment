"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProductiveCard = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _Card = require("../Card");
var _devtools = require("../../global/js/utils/devtools");
var _propsHelper = require("../../global/js/utils/props-helper");
var _settings = require("../../settings");
var _excluded = ["actionsPlacement"]; //
// Copyright IBM Corp. 2020, 2021
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var componentName = 'ProductiveCard';

// Default values for props
var defaults = {
  actionsPlacement: 'top'
};
var ProductiveCard = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var _ref$actionsPlacement = _ref.actionsPlacement,
    actionsPlacement = _ref$actionsPlacement === void 0 ? defaults.actionsPlacement : _ref$actionsPlacement,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var validProps = (0, _propsHelper.prepareProps)(rest, ['media', 'mediaPosition', 'onSecondaryButtonClick', 'pictogram', 'primaryButtonClick', 'productive', 'secondaryButtonKind', 'secondaryButtonText']);
  return /*#__PURE__*/_react.default.createElement(_Card.Card, (0, _extends2.default)({}, _objectSpread(_objectSpread({}, validProps), {}, {
    actionsPlacement: actionsPlacement,
    ref: ref
  }), {
    productive: true
  }, (0, _devtools.getDevtoolsProps)(componentName)));
});

// Return a placeholder if not released and not enabled by feature flag
exports.ProductiveCard = ProductiveCard;
exports.ProductiveCard = ProductiveCard = _settings.pkg.checkComponentEnabled(ProductiveCard, componentName);
ProductiveCard.propTypes = {
  /**
   * Icons that are displayed on card. Refer to design documentation for implementation guidelines
   */
  actionIcons: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string,
    icon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    onKeyDown: _propTypes.default.func,
    onClick: _propTypes.default.func,
    iconDescription: _propTypes.default.string,
    href: _propTypes.default.string
  })),
  /**
   * Determines if the action icons are on the top or bottom of the card
   */
  actionsPlacement: _propTypes.default.oneOf(['top', 'bottom']),
  /**
   * Content that shows in the body of the card
   */
  children: _propTypes.default.node,
  /**
   * Optional user provided class
   */
  className: _propTypes.default.string,
  /**
   * Designates which zones of the card are clickable. Refer to design documentation for implementation guidelines
   */
  clickZone: _propTypes.default.oneOf(['one', 'two', 'three']),
  /**
   * Optional header description
   */
  description: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.node]),
  /**
   * Optional label for the top of the card
   */
  label: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.node]),
  /**
   * Provides the callback for a clickable card
   */
  onClick: _propTypes.default.func,
  /**
   * Function that's called from the primary button or action icon
   */
  onPrimaryButtonClick: _propTypes.default.func,
  /**
   * Use an overflow menu instead of action icons. Refer to design documentation for implementation guidelines
   */
  overflowActions: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string,
    itemText: _propTypes.default.string,
    onClick: _propTypes.default.func,
    onKeyDown: _propTypes.default.func
  })),
  /**
   * Aria label prop required for OverflowMenu
   */
  overflowAriaLabel: _propTypes.default.string,
  /**
   * Optionally specify an href for your Button to become an <a> element
   */
  primaryButtonHref: _propTypes.default.string,
  /**
   * Optional prop to allow overriding the icon rendering. Can be a React component class
   */
  primaryButtonIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
  /**
   * Determines if the primary button is on the top or bottom of the card
   */
  primaryButtonPlacement: _propTypes.default.oneOf(['top', 'bottom']),
  /**
   * The text that's displayed in the primary button
   */
  primaryButtonText: _propTypes.default.node,
  /**
   * Title that's displayed at the top of the card
   */
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object, _propTypes.default.node]),
  /**
   * Determines title size
   */
  titleSize: _propTypes.default.oneOf(['default', 'large'])
};
ProductiveCard.displayName = componentName;