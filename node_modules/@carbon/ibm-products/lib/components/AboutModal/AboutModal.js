"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AboutModal = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _useResizeObserver = require("../../global/js/hooks/useResizeObserver");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _settings = require("../../settings");
var _uuidv = _interopRequireDefault(require("../../global/js/utils/uuidv4"));
var _devtools = require("../../global/js/utils/devtools");
var _react2 = require("@carbon/react");
var _excluded = ["additionalInfo", "className", "closeIconDescription", "copyrightText", "content", "links", "logo", "modalAriaLabel", "onClose", "open", "title", "version"];
/**
 * Copyright IBM Corp. 2020, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
// Import portions of React that are needed.
// Other standard imports.
// Carbon and package components we use.
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
// The block part of our conventional BEM class names (blockClass__E--M).
var blockClass = "".concat(_settings.pkg.prefix, "--about-modal");
var componentName = 'AboutModal';

// NOTE: the component SCSS is not imported here: it is rolled up separately.

/**
 * The `AboutModal` component provides a way to communicate product information
 * to users. It is triggered by a userâ€™s action, appears on top of the main
 * page content, and is persistent until dismissed. The purpose of this modal
 * should be immediately apparent to the user, with a clear and obvious path
 * to completion.
 */
var AboutModal = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var additionalInfo = _ref.additionalInfo,
    className = _ref.className,
    closeIconDescription = _ref.closeIconDescription,
    copyrightText = _ref.copyrightText,
    content = _ref.content,
    links = _ref.links,
    logo = _ref.logo,
    modalAriaLabel = _ref.modalAriaLabel,
    onClose = _ref.onClose,
    open = _ref.open,
    title = _ref.title,
    version = _ref.version,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _useState = (0, _react.useState)(true),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    hasScrollingContent = _useState2[0],
    setHasScrollingContent = _useState2[1];
  var bodyRef = (0, _react.useRef)();
  var contentRef = (0, _react.useRef)();
  var contentId = (0, _uuidv.default)();
  var handleResize = function handleResize() {
    setHasScrollingContent(
    // if our scroll height exceeds the client height enable scrolling
    bodyRef.current.clientHeight < (hasScrollingContent ?
    // Carbon modal adds 32px bottom margin when scrolling content is enabled
    bodyRef.current.scrollHeight - 32 : bodyRef.current.scrollHeight));
  };

  // We can't add a ref directly to the ModalBody, so track it in a ref
  // as the parent of the current bodyRef element
  (0, _react.useEffect)(function () {
    bodyRef.current = contentRef.current.parentElement;
  }, [bodyRef]);

  // Detect resize of the ModalBody to recalculate whether scrolling is enabled
  (0, _useResizeObserver.useResizeObserver)(bodyRef, handleResize);
  return /*#__PURE__*/_react.default.createElement(_react2.ComposedModal, (0, _extends2.default)({}, rest, {
    className: (0, _classnames.default)(blockClass,
    // Apply the block class to the main HTML element
    className // Apply any supplied class names to the main HTML element.
    ),

    "aria-label": modalAriaLabel
  }, _objectSpread({
    onClose: onClose,
    open: open,
    ref: ref
  }, (0, _devtools.getDevtoolsProps)(componentName))), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__logo")
  }, logo), /*#__PURE__*/_react.default.createElement(_react2.ModalHeader, {
    className: "".concat(blockClass, "__header"),
    closeModal: onClose,
    iconDescription: closeIconDescription,
    label: title,
    labelClassName: "".concat(blockClass, "__title")
  }), /*#__PURE__*/_react.default.createElement(_react2.ModalBody, {
    "aria-label": hasScrollingContent ? '' : null,
    "aria-labelledby": hasScrollingContent ? contentId : null,
    className: "".concat(blockClass, "__body"),
    hasScrollingContent: hasScrollingContent
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__body-content"),
    ref: contentRef,
    id: contentId
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__version")
  }, version), links && links.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__links-container")
  }, links.map(function (link, i) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
      key: i
    }, link);
  })), content && /*#__PURE__*/_react.default.createElement("p", {
    className: "".concat(blockClass, "__content")
  }, content), copyrightText && /*#__PURE__*/_react.default.createElement("p", {
    className: "".concat(blockClass, "__copyright-text")
  }, copyrightText))), additionalInfo && /*#__PURE__*/_react.default.createElement(_react2.Theme, {
    theme: "g100"
  }, /*#__PURE__*/_react.default.createElement(_react2.ModalFooter, {
    className: "".concat(blockClass, "__footer")
  }, additionalInfo)));
});

// Return a placeholder if not released and not enabled by feature flag
exports.AboutModal = AboutModal;
exports.AboutModal = AboutModal = _settings.pkg.checkComponentEnabled(AboutModal, componentName);
AboutModal.displayName = componentName;

// The types and DocGen commentary for the component props,
// in alphabetical order (for consistency).
// See https://www.npmjs.com/package/prop-types#usage.
AboutModal.propTypes = {
  /**
   * If you are legally required to display logos of technologies used
   * to build your product you can provide this in the additionalInfo.
   * Additional information will be displayed in the footer.
   */
  additionalInfo: _propTypes.default.node,
  /**
   * Provide an optional class to be applied to the modal root node.
   */
  className: _propTypes.default.string,
  /**
   * The accessibility title for the close icon.
   */
  closeIconDescription: _propTypes.default.string.isRequired,
  /**
   * Subhead text providing any relevant product disclaimers including
   * legal information (optional)
   */
  content: _propTypes.default.node,
  /**
   * Trademark and copyright information. Displays first year of
   * product release to current year.
   */
  copyrightText: _propTypes.default.string.isRequired,
  /**
   * An array of Carbon `Link` component if there are additional information
   * to call out within the card. The about modal should be used to display
   * the product information and not where users go to find help (optional)
   */
  links: _propTypes.default.arrayOf(_propTypes.default.element),
  /**
   * A visual symbol used to represent the product.
   */
  logo: _propTypes.default.node.isRequired,
  /**
   * Specifies aria label for AboutModal
   */
  modalAriaLabel: _propTypes.default.string,
  /**
   * Specifies an optional handler which is called when the AboutModal
   * is closed. Returning `false` prevents the AboutModal from closing.
   */
  onClose: _propTypes.default.func,
  /**
   * Specifies whether the AboutModal is open or not.
   */
  open: _propTypes.default.bool,
  /**
   * Header text that provides the product name. The IBM Services logo
   * consists of two discrete, but required, elements: the iconic
   * IBM 8-bar logo represented alongside the IBM Services logotype.
   * Please follow these guidelines to ensure proper execution.
   */
  title: _propTypes.default.node.isRequired,
  /**
   * Text that provides information on the version number of your product.
   */
  version: _propTypes.default.string.isRequired
};