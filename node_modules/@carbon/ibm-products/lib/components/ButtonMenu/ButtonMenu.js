"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonMenu = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _settings = require("../../settings");
var _react2 = require("@carbon/react");
var _excluded = ["children", "className", "iconDescription", "kind", "label", "menuAriaLabel", "menuOptionsClass", "renderIcon", "size"];
/**
 * Copyright IBM Corp. 2021, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
// Import portions of React that are needed.
// Other standard imports.
// Carbon and package components we use.
// The block part of our conventional BEM class names (blockClass__E--M).
var blockClass = "".concat(_settings.pkg.prefix, "--button-menu");
var componentName = 'ButtonMenu';

// NOTE: the component SCSS is not imported here: it is rolled up separately.

// Default values for props
var defaults = {
  size: 'lg',
  kind: 'primary'
};

/**
 * Combining a standard button with an overflow menu, this component appears
 * as a button and has all the usual carbon Button props and rendering, but
 * acts as an overflow menu when clicked. The ButtonMenu component can contain
 * zero to many ButtonMenuItem, which is identical to the carbon
 * OverflowMenuItem component.
 */
var ButtonMenu = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var children = _ref.children,
    className = _ref.className,
    iconDescription = _ref.iconDescription,
    _ref$kind = _ref.kind,
    kind = _ref$kind === void 0 ? defaults.kind : _ref$kind,
    label = _ref.label,
    menuAriaLabel = _ref.menuAriaLabel,
    menuOptionsClass = _ref.menuOptionsClass,
    Icon = _ref.renderIcon,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? defaults.size : _ref$size,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var carbonPrefix = (0, _react2.usePrefix)();
  return /*#__PURE__*/_react.default.createElement(_react2.OverflowMenu, (0, _extends2.default)({}, rest, {
    className: (0, _classnames.default)(blockClass,
    // Apply the block class to the main HTML element
    className, // Apply any supplied class names to the main HTML element.
    "".concat(carbonPrefix, "--btn--").concat(size), (0, _defineProperty2.default)({}, "".concat(blockClass, "__wrapper--").concat(kind), kind)),
    "aria-label": menuAriaLabel,
    menuOptionsClass: (0, _classnames.default)("".concat(blockClass, "__options"), menuOptionsClass),
    size: size,
    renderIcon: function renderIcon() {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: (0, _classnames.default)("".concat(blockClass, "__trigger"))
      }, label, Icon && /*#__PURE__*/_react.default.createElement(Icon, {
        "aria-hidden": "true",
        "aria-label": iconDescription,
        className: "".concat(carbonPrefix, "--btn__icon")
      }));
    },
    innerRef: ref
  }), children);
});

// Return a placeholder if not released and not enabled by feature flag
exports.ButtonMenu = ButtonMenu;
exports.ButtonMenu = ButtonMenu = _settings.pkg.checkComponentEnabled(ButtonMenu, componentName);

// The display name of the component, used by React. Note that displayName
// is used in preference to relying on function.name.
ButtonMenu.displayName = componentName;

// The types and DocGen commentary for the component props,
// in alphabetical order (for consistency).
// See https://www.npmjs.com/package/prop-types#usage.
ButtonMenu.propTypes = {
  /**
   * Provide the contents of the ButtonMenu. This should be one or more
   * ButtonMenuItem components.
   */
  children: _propTypes.default.arrayOf(_propTypes.default.element).isRequired,
  /**
   * Provide an optional class to be applied to the containing node.
   */
  className: _propTypes.default.string,
  /**
   * If specifying the `renderIcon` prop, provide a description for that icon that can
   * be read by screen readers
   */
  iconDescription: _react2.Button.propTypes.iconDescription,
  /**
   * The three types the menu button supports: primary, tertiary and ghost.
   */
  kind: _propTypes.default.oneOf(['primary', 'tertiary', 'ghost']),
  /**
   * The button label for the menu trigger.
   */
  label: _propTypes.default.node,
  /**
   * Provide the ariaLabel prop to be passed to the OverflowMenu. This is distinctly
   * separate from `label` to support icon only ButtonMenus
   */
  menuAriaLabel: _propTypes.default.string.isRequired,
  /**
   * class name applied to the overflow options
   */
  menuOptionsClass: _propTypes.default.string,
  /**
   * Optional prop to allow overriding the icon rendering.
   * Can be a React component class
   */
  renderIcon: _react2.Button.propTypes.renderIcon,
  /**
   * The size of the button for the menu trigger.
   * The menu button supports: sm, md, lg
   */
  size: _propTypes.default.oneOf(['sm', 'md', 'lg'])
};