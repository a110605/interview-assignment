"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionBarItem = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _settings = require("../../settings");
var _react2 = require("@carbon/react");
var _excluded = ["label", "className", "renderIcon"]; //
// Copyright IBM Corp. 2020, 2021
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//
// Import portions of React that are needed.
// Other standard imports.
// Carbon and package components we use.
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
// The block part of our conventional BEM class names (blockClass__E--M).
var componentName = 'ActionBarItem';
var blockClass = "".concat(_settings.pkg.prefix, "--action-bar-item");

// NOTE: the component SCSS is not imported here: it is rolled up separately.

/**
 * The ActionBarItem is used in the page header to populate the action bar
 */
var ActionBarItem = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var label = _ref.label,
    className = _ref.className,
    renderIcon = _ref.renderIcon,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var Icon = renderIcon;
  return /*#__PURE__*/_react.default.createElement(_react2.IconButton, _objectSpread(_objectSpread({}, rest), {}, {
    ref: ref,
    className: (0, _classnames.default)(blockClass, className),
    kind: 'ghost',
    size: 'md',
    align: 'bottom-right',
    type: 'button',
    label: label
  }), Icon ? /*#__PURE__*/_react.default.createElement(Icon, null) : null);
});

// Return a placeholder if not released and not enabled by feature flag
exports.ActionBarItem = ActionBarItem;
exports.ActionBarItem = ActionBarItem = _settings.pkg.checkComponentEnabled(ActionBarItem, componentName);

// Props the user cannot change
var reservedProps = ['kind', 'size', 'align', 'type'];
// Base props on Carbon Button
var propTypes = _objectSpread({}, _react2.IconButton.propTypes);

// Remove reserved props
reservedProps.forEach(function (prop) {
  delete propTypes[prop];
});
ActionBarItem.displayName = componentName;
ActionBarItem.propTypes = _objectSpread(_objectSpread({}, propTypes), {}, {
  /* ***************************************
  /
  /  The declarations below allow storybook & DocGen to produce documentation.
  /  Some or all of them may be inherited from the underlying Carbon component.
  /
  / ****************************************/
  /**
   * Specify an optional className to be added to your Button
   *
   * (inherited from Carbon Button)
   */
  className: _propTypes.default.string,
  /**
   * If specifying the `renderIcon` prop, provide a description for that icon that can
   * be read by screen readers
   *
   * (inherited from Carbon Button)
   */
  label: _propTypes.default.string,
  /**
   * Optional click handler
   *
   * (inherited from Carbon Button)
   */
  onClick: _propTypes.default.func,
  /**
   * Optional prop to allow overriding the icon rendering.
   * Can be a React component class
   *
   * (inherited from Carbon Button)
   */
  renderIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object])
});