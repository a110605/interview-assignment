"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.editInPlaceRequired = exports.PageHeaderTitle = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _react2 = require("@carbon/react");
var _ = require("../");
var _excluded = ["text", "content", "loading", "icon", "asText", "onChange", "onSave", "editDescription", "editableLabel", "cancelDescription", "saveDescription"];
/**
 *
 * Utility component used by Page Header
 */
// eslint-disable-next-line react/prop-types
var PageHeaderTitle = function PageHeaderTitle(_ref) {
  var blockClass = _ref.blockClass,
    hasBreadcrumbRow = _ref.hasBreadcrumbRow,
    title = _ref.title;
  var titleInnards;
  // eslint-disable-next-line
  // debugger;

  var text = title.text,
    content = title.content,
    loading = title.loading,
    icon = title.icon,
    asText = title.asText,
    onChange = title.onChange,
    onSave = title.onSave,
    editDescription = title.editDescription,
    editableLabel = title.editableLabel,
    cancelDescription = title.cancelDescription,
    saveDescription = title.saveDescription,
    rest = (0, _objectWithoutProperties2.default)(title, _excluded);
  var titleText;
  var isEditable = !!onSave;
  if (text || !content) {
    if (text === undefined && typeof title === 'string') {
      text = title;
      asText = title;
    }
    var TitleIcon = icon;
    titleInnards = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, icon && !loading ? /*#__PURE__*/_react.default.createElement(TitleIcon, {
      className: "".concat(blockClass, "__title-icon")
    }) : null, loading ? /*#__PURE__*/_react.default.createElement(_react2.SkeletonText, {
      className: "".concat(blockClass, "__title-skeleton")
    }) : isEditable ? /*#__PURE__*/_react.default.createElement(_.EditInPlace, (0, _extends2.default)({
      tooltipAlignment: "bottom",
      value: text,
      cancelLabel: cancelDescription,
      editLabel: editDescription,
      saveLabel: saveDescription,
      labelText: editableLabel,
      onChange: onChange,
      onSave: onSave,
      size: "md",
      inheritTypography: true
    }, rest)) : /*#__PURE__*/_react.default.createElement("span", {
      title: !loading ? asText : null
    }, text));
  } else {
    titleInnards = content;
    titleText = asText;
  }
  return /*#__PURE__*/_react.default.createElement("h1", {
    className: (0, _classnames.default)("".concat(blockClass, "__title"), (0, _defineProperty2.default)({}, "".concat(blockClass, "__title--editable"), isEditable), (0, _defineProperty2.default)({}, "".concat(blockClass, "__title--fades"), hasBreadcrumbRow)),
    title: titleText
  }, titleInnards);
};
exports.PageHeaderTitle = PageHeaderTitle;
var editInPlaceRequired = function editInPlaceRequired(_ref2) {
  var onSave = _ref2.onSave;
  return !!onSave;
};
exports.editInPlaceRequired = editInPlaceRequired;
PageHeaderTitle.propTypes = {
  // passed from page header
  blockClass: _propTypes.default.string.isRequired,
  /**
   * controlled from within page header
   */
  hasBreadcrumbRow: _propTypes.default.bool,
  /**
   * An optional page title supplied as a string or object with the following attributes: text, icon, loading
   *
   * Can be supplied either as:
   * - String
   * - Object containing
   *    - text: title string
   *    - icon: optional icon
   *    - loading: boolean shows loading indicator if true
   *    - onChange: function to process the live value (React change === HTML Input)
   *    - onSave: function to process a confirmed change
   *    - editDescription: description for edit button
   *    - editableLabel: label for edit required if onSave supplied
   *    - cancelDescription: description for edit cancel button
   *    - saveDescription: description for edit save button
   * - Object containing user defined contents. These must fit within the area defined for the title in both main part of the header and the breadcrumb.
   *    - content: title or name of current location shown in main part of page header
   *    - breadcrumbContent: version of content used in the breadcrumb on scroll. If not supplied
   *    - asText: String based representation of the title
   */
  title: _propTypes.default.oneOfType([_propTypes.default.shape({
    // Update docgen if changed
    text: _propTypes.default.string.isRequired,
    icon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    loading: _propTypes.default.bool,
    // inline edit version properties
    editDescription: _propTypes.default.string.isRequired.if(editInPlaceRequired),
    editableLabel: _propTypes.default.string.isRequired.if(editInPlaceRequired),
    id: _propTypes.default.string.isRequired.if(editInPlaceRequired),
    onChange: _propTypes.default.func,
    onSave: _propTypes.default.func,
    cancelDescription: _propTypes.default.string.isRequired.if(editInPlaceRequired),
    saveDescription: _propTypes.default.string.isRequired.if(editInPlaceRequired)
    // Update docgen if changed
  }), _propTypes.default.string, _propTypes.default.shape({
    content: _propTypes.default.node.isRequired,
    breadcrumbContent: _propTypes.default.node,
    asText: _propTypes.default.string.isRequired
  })])
};