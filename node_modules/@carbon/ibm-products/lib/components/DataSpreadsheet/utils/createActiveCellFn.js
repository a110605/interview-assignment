"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createActiveCellFn = void 0;
var _layout = require("@carbon/layout");
var _settings = require("../../../settings");
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

var createActiveCellFn = function createActiveCellFn(_ref) {
  var placementElement = _ref.placementElement,
    coords = _ref.coords,
    _ref$addToHeader = _ref.addToHeader,
    addToHeader = _ref$addToHeader === void 0 ? false : _ref$addToHeader,
    contextRef = _ref.contextRef,
    _ref$blockClass = _ref.blockClass,
    blockClass = _ref$blockClass === void 0 ? "".concat(_settings.pkg.prefix, "--data-spreadsheet") : _ref$blockClass,
    onActiveCellChange = _ref.onActiveCellChange,
    activeCellValue = _ref.activeCellValue,
    activeCellRef = _ref.activeCellRef,
    cellEditorRef = _ref.cellEditorRef,
    defaultColumn = _ref.defaultColumn;
  if (!coords) {
    return;
  }
  // If the active cell is in the column header row (very first), we need to append this element
  // to `.${blockClass}__header--container`, otherwise it should be appended to `.${blockClass}__listContainer` firstElementChild
  var point1Element = document.querySelector("[data-row-index=\"".concat(coords.row, "\"][data-column-index=\"").concat(coords.column, "\"]")) || document.querySelector(".".concat(blockClass, "__body--td")); // if we can't find the point1 element (this can happen in the case where a virtualized row is not present anymore in the DOM), we get the default height/width of the first body cell we find
  var selectionAreaCellWidth = point1Element.offsetWidth;
  var selectionAreaCellHeight = point1Element.offsetHeight;
  var activeElementContainer = addToHeader ? contextRef === null || contextRef === void 0 ? void 0 : contextRef.current.querySelector(".".concat(blockClass, "__header--container")) : contextRef === null || contextRef === void 0 ? void 0 : contextRef.current.querySelector(".".concat(blockClass, "__list--container")).firstElementChild;
  var relativePosition = {
    top: placementElement ? placementElement.getBoundingClientRect().top - activeElementContainer.getBoundingClientRect().top : coords.row === 0 ? 0 : selectionAreaCellHeight * coords.row,
    // calculate top value here if virtualized row is not in DOM
    left: placementElement ? placementElement.getBoundingClientRect().left - activeElementContainer.getBoundingClientRect().left : coords.column === 0 ? 0 + (defaultColumn.rowHeaderWidth - 4) : selectionAreaCellWidth * coords.column + (defaultColumn.rowHeaderWidth - 4) // calculate left value here if virtualized row is not in DOM, accounting for row header cell width (including borders)
  };

  var activeCellButton = activeCellRef === null || activeCellRef === void 0 ? void 0 : activeCellRef.current;
  activeCellButton.style.width = (0, _layout.px)(placementElement ? placementElement === null || placementElement === void 0 ? void 0 : placementElement.offsetWidth : selectionAreaCellWidth);
  activeCellButton.style.height = (0, _layout.px)(placementElement ? placementElement === null || placementElement === void 0 ? void 0 : placementElement.offsetHeight : selectionAreaCellHeight);
  activeCellButton.style.left = (0, _layout.px)(relativePosition.left);
  activeCellButton.style.top = (0, _layout.px)(relativePosition.top);
  activeCellButton.style.display = 'block';
  activeCellButton.setAttribute('data-active-row-index', typeof (coords === null || coords === void 0 ? void 0 : coords.row) === 'number' ? coords.row : 'header');
  activeCellButton.setAttribute('data-active-column-index', typeof (coords === null || coords === void 0 ? void 0 : coords.column) === 'number' ? coords.column : 'header');
  activeElementContainer.appendChild(activeCellButton);
  activeCellButton.focus();
  if (!addToHeader) {
    activeElementContainer.appendChild(cellEditorRef.current);
  }
  if (typeof (coords === null || coords === void 0 ? void 0 : coords.column) === 'number' && typeof (coords === null || coords === void 0 ? void 0 : coords.row) === 'number') {
    onActiveCellChange === null || onActiveCellChange === void 0 ? void 0 : onActiveCellChange(activeCellValue);
  }
};
exports.createActiveCellFn = createActiveCellFn;