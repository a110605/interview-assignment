"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.moveColumnIndicatorLine = void 0;
var _layout = require("@carbon/layout");
var _settings = require("../../../settings");
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

var moveColumnIndicatorLine = function moveColumnIndicatorLine(_ref) {
  var _ref$blockClass = _ref.blockClass,
    blockClass = _ref$blockClass === void 0 ? "".concat(_settings.pkg.prefix, "--data-spreadsheet") : _ref$blockClass,
    clonedSelectionElement = _ref.clonedSelectionElement,
    ref = _ref.ref,
    spreadsheetCoords = _ref.spreadsheetCoords,
    leftScrollAmount = _ref.leftScrollAmount;
  var closestCell = event.target.closest(".".concat(blockClass, "--interactive-cell-element"));
  var newColumnIndex = closestCell === null || closestCell === void 0 ? void 0 : closestCell.getAttribute('data-column-index');
  var originalColumnIndex = clonedSelectionElement === null || clonedSelectionElement === void 0 ? void 0 : clonedSelectionElement.getAttribute('data-column-index-original');
  var closestCellCoords = closestCell.getBoundingClientRect();
  var indicatorLineElement = ref.current.querySelector(".".concat(blockClass, "__reorder-indicator-line"));
  var matcherId = clonedSelectionElement === null || clonedSelectionElement === void 0 ? void 0 : clonedSelectionElement.getAttribute('data-matcher-id');
  var selectionAreaOrigin = ref.current.querySelector("[data-matcher-id=\"".concat(matcherId, "\"]"));
  if (Number(newColumnIndex) > Number(originalColumnIndex)) {
    indicatorLineElement.style.left = (0, _layout.px)(closestCellCoords.left - spreadsheetCoords.left + closestCell.offsetWidth - 2 + leftScrollAmount);
  }
  if (Number(newColumnIndex) < Number(originalColumnIndex)) {
    indicatorLineElement.style.left = (0, _layout.px)(closestCellCoords.left - spreadsheetCoords.left + leftScrollAmount);
  }
  if (Number(newColumnIndex) === Number(originalColumnIndex)) {
    indicatorLineElement.style.left = selectionAreaOrigin.style.left;
  }
};
exports.moveColumnIndicatorLine = moveColumnIndicatorLine;