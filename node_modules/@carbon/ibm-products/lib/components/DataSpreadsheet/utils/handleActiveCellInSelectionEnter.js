"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleActiveCellInSelectionEnter = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _getSelectionAreaPoints = require("./getSelectionAreaPoints");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } /**
opyright IBM Corp. 2022, 2022

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * This source code is licensed under the Apache-2.0 license found in the
file in the root directory of this source tree.

var handleActiveCellInSelectionEnter = function handleActiveCellInSelectionEnter(_ref) {
  var activeCellInsideSelectionArea = _ref.activeCellInsideSelectionArea,
    activeCellCoordinates = _ref.activeCellCoordinates,
    activeCellRef = _ref.activeCellRef,
    selectionAreas = _ref.selectionAreas,
    updateActiveCellCoordinates = _ref.updateActiveCellCoordinates;
  if (!activeCellInsideSelectionArea) {
    return;
  }
  var activeCellSelectionId = activeCellRef.current.getAttribute('data-selection-id');
  var activeCellIndexInSelectionAreas = selectionAreas.findIndex(function (item) {
    return item.matcher === activeCellSelectionId;
  });
  var selectionAreaToNavigate = selectionAreas[activeCellIndexInSelectionAreas];
  var _getSelectionAreaPoin = (0, _getSelectionAreaPoints.getSelectionAreaPoints)(selectionAreaToNavigate),
    lowestColumnIndex = _getSelectionAreaPoin.lowestColumnIndex,
    lowestRowIndex = _getSelectionAreaPoin.lowestRowIndex,
    greatestColumnIndex = _getSelectionAreaPoin.greatestColumnIndex,
    greatestRowIndex = _getSelectionAreaPoin.greatestRowIndex;
  // Move active cell down one row if possible
  var coordinatesClone = _objectSpread({}, activeCellCoordinates);
  if ((activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row) < greatestRowIndex) {
    updateActiveCellCoordinates({
      coords: coordinatesClone,
      updatedValue: {
        row: (coordinatesClone === null || coordinatesClone === void 0 ? void 0 : coordinatesClone.row) + 1
      },
      optOutOfSelectionAreaUpdate: true
    });
  }
  // Move active cell to next column of selection area if it exists
  // If not, find the next selection area and update active cell to
  // be the first cell in that selection
  if ((activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row) === greatestRowIndex) {
    if ((activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column) < greatestColumnIndex) {
      updateActiveCellCoordinates({
        coords: coordinatesClone,
        updatedValue: {
          column: (coordinatesClone === null || coordinatesClone === void 0 ? void 0 : coordinatesClone.column) + 1,
          row: lowestRowIndex
        },
        optOutOfSelectionAreaUpdate: true
      });
    }
    // Move to next selection area if there is one, or back to
    // the beginning of the current selection
    if ((activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column) === greatestColumnIndex) {
      if (selectionAreas.length > 1) {
        if (selectionAreas[activeCellIndexInSelectionAreas + 1]) {
          // Update activeCellRef data-selection-id attribute to the matcher of the next selection area
          activeCellRef.current.setAttribute('data-selection-id', selectionAreas[activeCellIndexInSelectionAreas + 1].matcher);
          var nextSelectionArea = selectionAreas[activeCellIndexInSelectionAreas + 1];
          var _getSelectionAreaPoin2 = (0, _getSelectionAreaPoints.getSelectionAreaPoints)(nextSelectionArea),
            _lowestColumnIndex = _getSelectionAreaPoin2.lowestColumnIndex,
            _lowestRowIndex = _getSelectionAreaPoin2.lowestRowIndex;
          updateActiveCellCoordinates({
            coords: coordinatesClone,
            updatedValue: {
              column: _lowestColumnIndex,
              row: _lowestRowIndex
            },
            optOutOfSelectionAreaUpdate: true
          });
          return;
        } else {
          // There are multiple selection areas and the active cell is in the last one
          // So we need to move the active cell to the first cell in the first selection area
          activeCellRef.current.setAttribute('data-selection-id', selectionAreas[0].matcher);
          var firstSelectionArea = selectionAreas[0];
          var _getSelectionAreaPoin3 = (0, _getSelectionAreaPoints.getSelectionAreaPoints)(firstSelectionArea),
            _lowestColumnIndex2 = _getSelectionAreaPoin3.lowestColumnIndex,
            _lowestRowIndex2 = _getSelectionAreaPoin3.lowestRowIndex;
          updateActiveCellCoordinates({
            coords: coordinatesClone,
            updatedValue: {
              column: _lowestColumnIndex2,
              row: _lowestRowIndex2
            },
            optOutOfSelectionAreaUpdate: true
          });
        }
      }
      // Only one selection area, go back to first cell in the selection
      if (selectionAreas.length === 1) {
        return updateActiveCellCoordinates({
          coords: coordinatesClone,
          updatedValue: {
            column: lowestColumnIndex,
            row: lowestRowIndex
          },
          optOutOfSelectionAreaUpdate: true
        });
      }
    }
  }
};
exports.handleActiveCellInSelectionEnter = handleActiveCellInSelectionEnter;