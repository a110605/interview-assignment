"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCellSelectionArea = void 0;
var _layout = require("@carbon/layout");
var _deepCloneObject = require("../../../global/js/utils/deepCloneObject");
var _getSelectionAreaPoints = require("./getSelectionAreaPoints");
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

var createCellSelectionArea = function createCellSelectionArea(_ref) {
  var ref = _ref.ref,
    area = _ref.area,
    blockClass = _ref.blockClass,
    defaultColumn = _ref.defaultColumn,
    selectionAreas = _ref.selectionAreas,
    setSelectionAreas = _ref.setSelectionAreas,
    setActiveCellInsideSelectionArea = _ref.setActiveCellInsideSelectionArea,
    visibleColumns = _ref.visibleColumns;
  var _getSelectionAreaPoin = (0, _getSelectionAreaPoints.getSelectionAreaPoints)(area),
    lowestColumnIndex = _getSelectionAreaPoin.lowestColumnIndex,
    lowestRowIndex = _getSelectionAreaPoin.lowestRowIndex,
    greatestColumnIndex = _getSelectionAreaPoin.greatestColumnIndex,
    greatestRowIndex = _getSelectionAreaPoin.greatestRowIndex;
  if (greatestRowIndex - lowestRowIndex > 0 || greatestColumnIndex - lowestColumnIndex > 0) {
    setActiveCellInsideSelectionArea(true);
    var activeCellElement = ref.current.querySelector(".".concat(blockClass, "__active-cell--highlight"));
    activeCellElement.setAttribute('data-selection-id', area.matcher);
  }
  var selectionAreaVariableWidth = 0;
  visibleColumns.forEach(function (item, index) {
    if (index >= lowestColumnIndex && index <= greatestColumnIndex) {
      selectionAreaVariableWidth += (item === null || item === void 0 ? void 0 : item.width) || (defaultColumn === null || defaultColumn === void 0 ? void 0 : defaultColumn.width);
    }
  });
  var point1Element = document.querySelector("[data-row-index=\"".concat(area.point1.row, "\"][data-column-index=\"").concat(area.point1.column, "\"]")) || document.querySelector(".".concat(blockClass, "__body--td")); // if we can't find the point1 element (this can happen in the case where a virtualized row is not present anymore in the DOM), we get the default height of the first body cell we find

  var selectionAreaCellHeight = point1Element.offsetHeight;
  var selectionAreaTotalHeight = selectionAreaCellHeight * (greatestRowIndex - lowestRowIndex + 1);
  var bodyContainer = document.querySelector(".".concat(blockClass, "__list--container")).firstElementChild;
  var placementElement = bodyContainer.querySelector("[data-row-index=\"".concat(lowestRowIndex, "\"][data-column-index=\"").concat(lowestColumnIndex, "\"]"));
  var relativePosition = {
    top: placementElement ? placementElement.getBoundingClientRect().top - bodyContainer.getBoundingClientRect().top : lowestRowIndex === 0 ? 0 : selectionAreaCellHeight * lowestRowIndex,
    // calculate top value here if virtualized row is not in DOM
    left: placementElement ? placementElement.getBoundingClientRect().left - bodyContainer.getBoundingClientRect().left : lowestColumnIndex === 0 ? 0 + (defaultColumn.rowHeaderWidth - 4) : defaultColumn.width * lowestColumnIndex + (defaultColumn.rowHeaderWidth - 4) // calculate left value here if virtualized row is not in DOM, accounting for row header cell width (including borders)
  };

  var selectionAreaElement = document.querySelector("[data-matcher-id=\"".concat(area.matcher, "\"]")) || document.createElement('div');
  selectionAreaElement.classList.add("".concat(blockClass, "__selection-area--element"));
  selectionAreaElement.setAttribute('data-matcher-id', area.matcher);
  selectionAreaElement.style.width = (0, _layout.px)(selectionAreaVariableWidth);
  selectionAreaElement.style.height = (0, _layout.px)(selectionAreaTotalHeight);
  selectionAreaElement.style.left = (0, _layout.px)(relativePosition.left);
  selectionAreaElement.style.top = (0, _layout.px)(relativePosition.top);
  bodyContainer.appendChild(selectionAreaElement);
  var selectionAreasClone = (0, _deepCloneObject.deepCloneObject)(selectionAreas);
  var indexOfCurrentArea = selectionAreasClone.findIndex(function (item) {
    return item.matcher === area.matcher;
  });
  // We need to add another property to the selectionAreas object array to
  // let us know if an area has been created for each item already, ie createdArea: true
  selectionAreasClone[indexOfCurrentArea].areaCreated = true;
  setSelectionAreas(selectionAreasClone);
};
exports.createCellSelectionArea = createCellSelectionArea;