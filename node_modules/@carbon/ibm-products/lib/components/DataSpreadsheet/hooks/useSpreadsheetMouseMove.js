"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSpreadsheetMouseMove = void 0;
var _react = require("react");
var _layout = require("@carbon/layout");
var _settings = require("../../../settings");
var _moveColumnIndicatorLine = require("../utils/moveColumnIndicatorLine");
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Used specifically for reordering columns, will move the position of the
// cloned selection area to follow the position of the cursor
var useSpreadsheetMouseMove = function useSpreadsheetMouseMove(_ref) {
  var ref = _ref.ref,
    _ref$blockClass = _ref.blockClass,
    blockClass = _ref$blockClass === void 0 ? "".concat(_settings.pkg.prefix, "--data-spreadsheet") : _ref$blockClass,
    headerCellHoldActive = _ref.headerCellHoldActive,
    defaultColumn = _ref.defaultColumn;
  (0, _react.useEffect)(function () {
    var handleMouseMove = function handleMouseMove(event) {
      var clonedSelectionElement = ref.current.querySelector(".".concat(blockClass, "__selection-area--element-cloned"));
      if (clonedSelectionElement) {
        ref.current.addEventListener('mousemove', handleMouseMove);
      }
      var spreadsheetCoords = ref.current.getBoundingClientRect();
      var listContainer = ref.current.querySelector(".".concat(blockClass, "__list--container"));
      var scrollAmount = listContainer.scrollLeft;
      (0, _moveColumnIndicatorLine.moveColumnIndicatorLine)({
        clonedSelectionElement: clonedSelectionElement,
        ref: ref,
        spreadsheetCoords: spreadsheetCoords,
        leftScrollAmount: scrollAmount
      });
      var spreadsheetWrapperElement = ref.current;
      spreadsheetWrapperElement.getBoundingClientRect();
      var xPositionRelativeToSpreadsheet = event.clientX - spreadsheetCoords.left;
      var offsetXValue = clonedSelectionElement === null || clonedSelectionElement === void 0 ? void 0 : clonedSelectionElement.getAttribute('data-clone-offset-x');
      var totalSpreadsheetScrollingWidth = listContainer.scrollWidth;
      var clonedSelectionWidth = clonedSelectionElement.offsetWidth;
      var clonePlacement = Math.max(xPositionRelativeToSpreadsheet - offsetXValue, defaultColumn === null || defaultColumn === void 0 ? void 0 : defaultColumn.rowHeaderWidth);
      // Moves the position of the cloned selection area to follow mouse, and
      // add the amount horizontally scrolled
      clonedSelectionElement.style.left = (0, _layout.px)(totalSpreadsheetScrollingWidth - clonedSelectionWidth >= clonePlacement ? clonePlacement + scrollAmount : totalSpreadsheetScrollingWidth - clonedSelectionWidth);
    };
    if (headerCellHoldActive) {
      ref.current.addEventListener('mousemove', handleMouseMove);
    }
    var spreadsheetRef = ref.current;
    if (!headerCellHoldActive) {
      spreadsheetRef === null || spreadsheetRef === void 0 ? void 0 : spreadsheetRef.removeEventListener('mousemove', handleMouseMove);
    }
    return function () {
      spreadsheetRef === null || spreadsheetRef === void 0 ? void 0 : spreadsheetRef.removeEventListener('mousemove', handleMouseMove);
    };
  });
};
exports.useSpreadsheetMouseMove = useSpreadsheetMouseMove;