"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useMultipleKeyTracking = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _hooks = require("../../../global/js/hooks");
var _handleMultipleKeys = require("../utils/handleMultipleKeys");
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasFocus = function hasFocus() {
  return typeof document !== 'undefined' && document.hasFocus();
};
var useMultipleKeyTracking = function useMultipleKeyTracking(_ref) {
  var ref = _ref.ref,
    containerHasFocus = _ref.containerHasFocus,
    isEditing = _ref.isEditing;
  var _useState = (0, _react.useState)(''),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    usingMac = _useState2[0],
    setUsingMac = _useState2[1];
  var _useState3 = (0, _react.useState)(hasFocus),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    windowFocused = _useState4[0],
    setWindowFocused = _useState4[1];
  var _useState5 = (0, _react.useState)([]),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    keysPressedList = _useState6[0],
    setKeysPressedList = _useState6[1];
  var previousState = (0, _hooks.usePreviousValue)({
    isEditing: isEditing,
    windowFocused: windowFocused,
    containerHasFocus: containerHasFocus
  });

  // useEffect to check for window focus, if window loses focus
  // we need to clear out the keysPressedList
  (0, _react.useEffect)(function () {
    var userAgentString = window.navigator.userAgent;
    if (userAgentString.includes('Macintosh')) {
      setUsingMac(true);
    } else {
      setUsingMac(false);
    }
    setWindowFocused(hasFocus());
    var onWindowFocus = function onWindowFocus() {
      return setWindowFocused(true);
    };
    var onWindowBlur = function onWindowBlur() {
      return setWindowFocused(false);
    };
    window.addEventListener('focus', onWindowFocus);
    window.addEventListener('blur', onWindowBlur);
    return function () {
      window.removeEventListener('focus', onWindowFocus);
      window.removeEventListener('blur', onWindowBlur);
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (ref && containerHasFocus && !isEditing) {
      ref.current.onkeydown = ref.current.onkeyup = function (event) {
        // If keydown, we will add the new key to the keysPressedList array
        if (event.type === 'keydown') {
          // Prevent multiple keys of the same type being added to our keysPressedList array
          if (keysPressedList.includes(event.code)) {
            return;
          }
          // Because keyup events are lost when using the Command key
          // we need to remove the previously pressed keys so that we
          // do not have keys in the pressed list that should not be
          if ((0, _handleMultipleKeys.includesResourceKey)(keysPressedList, usingMac) && keysPressedList.length > 1) {
            var clonedKeys = (0, _toConsumableArray2.default)(keysPressedList);
            var filteredClonedKeys = clonedKeys.filter(function (item) {
              return item === 'MetaLeft' || item === 'MetaRight';
            });
            filteredClonedKeys.push(event.code);
            return setKeysPressedList((0, _toConsumableArray2.default)(new Set(filteredClonedKeys)));
          }
          var tempKeys = (0, _toConsumableArray2.default)(keysPressedList);
          tempKeys.push(event.code);
          setKeysPressedList((0, _toConsumableArray2.default)(new Set(tempKeys)));
        }
        // If keyup, we will remove the key from the keysPressedList array
        if (event.type === 'keyup') {
          var _tempKeys = (0, _toConsumableArray2.default)(keysPressedList);
          var filteredClone = _tempKeys.filter(function (item) {
            return item !== event.code;
          });
          // Keyup events are lost on all other keys if a Meta key is used
          // so to work around this behavior, we empty out all other keys
          // from the keysPressedList array if we detect a Meta keyup event
          if (event.code === 'MetaLeft' || event.code === 'MetaRight') {
            return setKeysPressedList([]);
          }
          setKeysPressedList((0, _toConsumableArray2.default)(new Set(filteredClone)));
        }
      };
    }
    if (previousState !== null && previousState !== void 0 && previousState.windowFocused && !windowFocused) {
      setKeysPressedList([]);
    }
    // Remove handlers if the spreadsheet container loses focus
    // or is currently in edit mode
    if (ref && !containerHasFocus || isEditing) {
      ref.current.onkeydown = undefined;
      ref.current.onkeyup = undefined;
      if (!(previousState !== null && previousState !== void 0 && previousState.isEditing) && isEditing || previousState !== null && previousState !== void 0 && previousState.containerHasFocus && !containerHasFocus) {
        setKeysPressedList([]);
      }
    }
  }, [keysPressedList, containerHasFocus, ref, isEditing, previousState === null || previousState === void 0 ? void 0 : previousState.isEditing, previousState === null || previousState === void 0 ? void 0 : previousState.containerHasFocus, windowFocused, previousState === null || previousState === void 0 ? void 0 : previousState.windowFocused, usingMac]);
  return {
    keysPressedList: keysPressedList,
    windowFocused: windowFocused,
    usingMac: usingMac
  };
};
exports.useMultipleKeyTracking = useMultipleKeyTracking;