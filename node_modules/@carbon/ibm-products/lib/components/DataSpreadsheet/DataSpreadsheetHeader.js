"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataSpreadsheetHeader = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _layout = require("@carbon/layout");
var _settings = require("../../settings");
var _hooks = require("../../global/js/hooks");
var _checkActiveHeaderCell = require("./utils/checkActiveHeaderCell");
var _checkSelectedHeaderCell = require("./utils/checkSelectedHeaderCell");
var _handleHeaderCellSelection = require("./utils/handleHeaderCellSelection");
var _selectAllCells = require("./utils/selectAllCells");
var _getSpreadsheetWidth = require("./utils/getSpreadsheetWidth");
var _hooks2 = require("./hooks");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } /**
opyright IBM Corp. 2022, 2022

his source code is licensed under the Apache-2.0 license found in the
file in the root directory of this source tree.

var blockClass = "".concat(_settings.pkg.prefix, "--data-spreadsheet");
var DataSpreadsheetHeader = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var activeCellCoordinates = _ref.activeCellCoordinates,
    cellSize = _ref.cellSize,
    columns = _ref.columns,
    currentMatcher = _ref.currentMatcher,
    defaultColumn = _ref.defaultColumn,
    headerGroups = _ref.headerGroups,
    scrollBarSize = _ref.scrollBarSize,
    selectionAreas = _ref.selectionAreas,
    setActiveCellCoordinates = _ref.setActiveCellCoordinates,
    setCurrentMatcher = _ref.setCurrentMatcher,
    setSelectionAreas = _ref.setSelectionAreas,
    setSelectionAreaData = _ref.setSelectionAreaData,
    rows = _ref.rows,
    totalVisibleColumns = _ref.totalVisibleColumns,
    updateActiveCellCoordinates = _ref.updateActiveCellCoordinates,
    setHeaderCellHoldActive = _ref.setHeaderCellHoldActive,
    headerCellHoldActive = _ref.headerCellHoldActive,
    selectAllAriaLabel = _ref.selectAllAriaLabel,
    visibleColumns = _ref.visibleColumns;
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    scrollBarSizeValue = _useState2[0],
    setScrollBarSizeValue = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    selectedHeaderReorderActive = _useState4[0],
    setSelectedHeaderReorderActive = _useState4[1];
  var previousState = (0, _hooks.usePreviousValue)({
    cellSize: cellSize
  });
  (0, _react.useEffect)(function () {
    if ((previousState === null || previousState === void 0 ? void 0 : previousState.cellSize) !== cellSize) {
      var _ref$current;
      var scrollContainer = ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.querySelector(".".concat(blockClass, "__list--container"));
      var hasScrollBar = (scrollContainer === null || scrollContainer === void 0 ? void 0 : scrollContainer.scrollHeight) > (scrollContainer === null || scrollContainer === void 0 ? void 0 : scrollContainer.clientHeight);
      var scrollBarValue = hasScrollBar ? 0 : scrollBarSize;
      setScrollBarSizeValue(scrollBarValue);
    }
  }, [cellSize, ref, scrollBarSize, previousState === null || previousState === void 0 ? void 0 : previousState.cellSize]);
  var handleColumnHeaderClick = function handleColumnHeaderClick(index) {
    return function (event) {
      var isHoldingCommandKey = event.metaKey || event.ctrlKey;
      var isHoldingShiftKey = event.shiftKey;
      (0, _handleHeaderCellSelection.handleHeaderCellSelection)({
        type: 'column',
        activeCellCoordinates: activeCellCoordinates,
        rows: rows,
        columns: columns,
        setActiveCellCoordinates: setActiveCellCoordinates,
        setCurrentMatcher: setCurrentMatcher,
        setSelectionAreas: setSelectionAreas,
        spreadsheetRef: ref,
        index: index,
        setSelectionAreaData: setSelectionAreaData,
        isHoldingCommandKey: isHoldingCommandKey,
        isHoldingShiftKey: isHoldingShiftKey,
        currentMatcher: currentMatcher
      });
    };
  };
  var handleSelectAllClick = function handleSelectAllClick() {
    (0, _selectAllCells.selectAllCells)({
      ref: ref,
      setCurrentMatcher: setCurrentMatcher,
      setSelectionAreas: setSelectionAreas,
      rows: rows,
      columns: columns,
      activeCellCoordinates: activeCellCoordinates,
      updateActiveCellCoordinates: updateActiveCellCoordinates
    });
  };
  var handleHeaderMouseDown = function handleHeaderMouseDown(index) {
    return function (event) {
      var _selectionAreaToClone;
      if (event.shiftKey) {
        // Remove columns, need to call handleHeaderCellSelection
        return;
      }
      setSelectedHeaderReorderActive(true);
      var selectionAreaToClone = selectionAreas.filter(function (item) {
        return (item === null || item === void 0 ? void 0 : item.matcher) === currentMatcher;
      });
      var selectionAreaElement = ref.current.querySelector("[data-matcher-id=\"".concat((_selectionAreaToClone = selectionAreaToClone[0]) === null || _selectionAreaToClone === void 0 ? void 0 : _selectionAreaToClone.matcher, "\"]"));
      var clickXPosition = event.clientX;
      var headerButtonCoords = event.target.getBoundingClientRect();
      var headerIndex = event.target.getAttribute('data-column-index');
      var offsetXValue = clickXPosition - headerButtonCoords.left;
      var lowestColumnIndexFromSelectionArea = Math.min(selectionAreaToClone[0].point1.column, selectionAreaToClone[0].point2.column);
      var selectionAreaCoords = selectionAreaElement.getBoundingClientRect();
      var updatedOffsetDifference = lowestColumnIndexFromSelectionArea < parseInt(headerIndex) ? offsetXValue + (headerButtonCoords.left - selectionAreaCoords.left) : offsetXValue;
      var bodyContainer = document.querySelector(".".concat(blockClass, "__list--container")).firstElementChild;
      var selectionAreaClonedElement = selectionAreaElement.cloneNode();
      var reorderIndicatorLine = selectionAreaElement.cloneNode();
      reorderIndicatorLine.className = "".concat(blockClass, "__reorder-indicator-line");
      reorderIndicatorLine.style.width = (0, _layout.px)(2);
      selectionAreaClonedElement.classList.add("".concat(blockClass, "__selection-area--element-cloned"));
      selectionAreaClonedElement.setAttribute('data-clone-offset-x', updatedOffsetDifference);
      selectionAreaClonedElement.setAttribute('data-column-index-original', index);
      bodyContainer.appendChild(selectionAreaClonedElement);
      bodyContainer.appendChild(reorderIndicatorLine);
      setHeaderCellHoldActive(true);
    };
  };
  (0, _hooks2.useSpreadsheetMouseMove)({
    ref: ref,
    headerCellHoldActive: headerCellHoldActive,
    defaultColumn: defaultColumn
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)("".concat(blockClass, "__header--container")),
    role: "rowgroup"
  }, headerGroups.map(function (headerGroup, index) {
    return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
      key: "header_".concat(index)
    }, headerGroup.getHeaderGroupProps(), {
      style: _objectSpread(_objectSpread({}, headerGroup.getHeaderGroupProps().style), {}, {
        width: (0, _getSpreadsheetWidth.getSpreadsheetWidth)({
          type: 'header',
          headerGroup: headerGroup,
          scrollBarSizeValue: scrollBarSizeValue,
          totalVisibleColumns: totalVisibleColumns,
          defaultColumn: defaultColumn,
          visibleColumns: visibleColumns
        }),
        overflow: 'hidden'
      }),
      className: "".concat(blockClass, "__tr")
    }), /*#__PURE__*/_react.default.createElement("div", {
      role: "columnheader",
      className: "".concat(blockClass, "__select-all-cell-container"),
      style: {
        width: defaultColumn === null || defaultColumn === void 0 ? void 0 : defaultColumn.rowHeaderWidth,
        height: defaultColumn === null || defaultColumn === void 0 ? void 0 : defaultColumn.rowHeight
      }
    }, /*#__PURE__*/_react.default.createElement("button", {
      id: "".concat(blockClass, "__cell--header--header"),
      "data-row-index": "header",
      "data-column-index": "header",
      type: "button",
      tabIndex: -1,
      "aria-label": selectAllAriaLabel,
      onClick: handleSelectAllClick,
      className: (0, _classnames.default)("".concat(blockClass, "__th"), "".concat(blockClass, "--interactive-cell-element"), "".concat(blockClass, "__th--select-all"), (0, _defineProperty2.default)({}, "".concat(blockClass, "__th--active-header"), (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column) === 'header' && (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.row) === 'header'))
    }, "\xA0")), headerGroup.headers.map(function (column, index) {
      var _cx2;
      var selectedHeader = (0, _checkSelectedHeaderCell.checkSelectedHeaderCell)(index, selectionAreas, 'column', rows);
      return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
        key: "column_".concat(index),
        role: "columnheader",
        className: "".concat(blockClass, "__columnheader")
      }, column.getHeaderProps()), /*#__PURE__*/_react.default.createElement("button", {
        id: "".concat(blockClass, "__cell--header--").concat(index),
        "data-row-index": "header",
        "data-column-index": index,
        tabIndex: -1,
        onMouseDown: selectedHeader ? handleHeaderMouseDown(index) : null,
        onMouseUp: selectedHeader ? function () {
          return setSelectedHeaderReorderActive(false);
        } : null,
        onClick: !selectedHeader ? handleColumnHeaderClick(index) : null,
        style: {
          height: defaultColumn === null || defaultColumn === void 0 ? void 0 : defaultColumn.rowHeight,
          width: (column === null || column === void 0 ? void 0 : column.width) || (defaultColumn === null || defaultColumn === void 0 ? void 0 : defaultColumn.width)
        },
        className: (0, _classnames.default)("".concat(blockClass, "__th"), "".concat(blockClass, "--interactive-cell-element"), (_cx2 = {}, (0, _defineProperty2.default)(_cx2, "".concat(blockClass, "__th--active-header"), (activeCellCoordinates === null || activeCellCoordinates === void 0 ? void 0 : activeCellCoordinates.column) === index || (0, _checkActiveHeaderCell.checkActiveHeaderCell)(index, selectionAreas, 'column')), (0, _defineProperty2.default)(_cx2, "".concat(blockClass, "__th--selected-header"), selectedHeader), (0, _defineProperty2.default)(_cx2, "".concat(blockClass, "__th--selected-header-reorder-active"), selectedHeaderReorderActive), _cx2)),
        type: "button"
      }, column.render('Header')));
    }));
  }));
});
exports.DataSpreadsheetHeader = DataSpreadsheetHeader;
DataSpreadsheetHeader.propTypes = {
  /**
   * Object containing the active cell coordinates
   */
  activeCellCoordinates: _propTypes.default.shape({
    row: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
    column: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
  }),
  /**
   * Specifies the cell height
   */
  cellSize: _propTypes.default.oneOf(['xs', 'sm', 'md', 'lg']),
  /**
   * All of the spreadsheet columns
   */
  columns: _propTypes.default.array,
  /**
   * uuid that corresponds to the current selection area
   */
  currentMatcher: _propTypes.default.string,
  /**
   * Default spreadsheet sizing values
   */
  defaultColumn: _propTypes.default.shape({
    rowHeight: _propTypes.default.number,
    rowHeaderWidth: _propTypes.default.number,
    width: _propTypes.default.number
  }),
  /**
   * Whether or not a click/hold is active on a header cell
   */
  headerCellHoldActive: _propTypes.default.bool,
  /**
   * Headers provided from useTable hook
   */
  headerGroups: _propTypes.default.arrayOf(_propTypes.default.object),
  /**
   * All of the spreadsheet row data
   */
  rows: _propTypes.default.arrayOf(_propTypes.default.object),
  /**
   * The scrollbar width
   */
  scrollBarSize: _propTypes.default.number,
  /**
   * The aria label applied to the Select all button
   */
  selectAllAriaLabel: _propTypes.default.string.isRequired,
  /**
   * All of the cell selection area items
   */
  selectionAreas: _propTypes.default.arrayOf(_propTypes.default.object),
  /**
   * Setter fn for activeCellCoordinates value
   */
  setActiveCellCoordinates: _propTypes.default.func,
  /**
   * Setter fn for currentMatcher value
   */
  setCurrentMatcher: _propTypes.default.func,
  /**
   * Setter fn for header cell hold active value
   */
  setHeaderCellHoldActive: _propTypes.default.func,
  /**
   * Setter fn for selectionAreaData state value
   */
  setSelectionAreaData: _propTypes.default.func,
  /**
   * Setter fn for selectionAreas value
   */
  setSelectionAreas: _propTypes.default.func,
  /**
   * The total number of columns to be initially visible, additional columns will be rendered and
   * visible via horizontal scrollbar
   */
  totalVisibleColumns: _propTypes.default.number,
  /**
   * Function used to update the active cell coordinates
   */
  updateActiveCellCoordinates: _propTypes.default.func,
  /**
   * Array of visible columns provided by react-table useTable hook
   */
  visibleColumns: _propTypes.default.array
};