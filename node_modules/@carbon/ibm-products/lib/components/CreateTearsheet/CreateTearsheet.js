"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StepsContext = exports.StepNumberContext = exports.CreateTearsheet = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _react2 = require("@carbon/react");
var _wrapFocus = _interopRequireDefault(require("../../global/js/utils/wrapFocus"));
var _TearsheetShell = require("../Tearsheet/TearsheetShell");
var _CreateInfluencer = require("../CreateInfluencer");
var _settings = require("../../settings");
var _hooks = require("../../global/js/hooks");
var _devtools = require("../../global/js/utils/devtools");
var _lastIndexInArray = require("../../global/js/utils/lastIndexInArray");
var _getNumberOfHiddenSteps = require("../../global/js/utils/getNumberOfHiddenSteps");
var _excluded = ["backButtonText", "cancelButtonText", "children", "className", "description", "influencerWidth", "initialStep", "label", "nextButtonText", "onClose", "onRequestSubmit", "open", "firstFocusElement", "submitButtonText", "title", "verticalPosition"];
/**
 * Copyright IBM Corp. 2021, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var componentName = 'CreateTearsheet';
var blockClass = "".concat(_settings.pkg.prefix, "--tearsheet-create");

// This is a general context for the steps container
// containing information about the state of the container
// and providing some callback methods for steps to use
var StepsContext = /*#__PURE__*/(0, _react.createContext)(null);

// This is a context supplied separately to each step in the container
// to let it know what number it is in the sequence of steps
exports.StepsContext = StepsContext;
var StepNumberContext = /*#__PURE__*/(0, _react.createContext)(-1);

// Default values for props
exports.StepNumberContext = StepNumberContext;
var defaults = {
  verticalPosition: 'normal',
  influencerWidth: 'narrow'
};
var CreateTearsheet = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var backButtonText = _ref.backButtonText,
    cancelButtonText = _ref.cancelButtonText,
    children = _ref.children,
    className = _ref.className,
    description = _ref.description,
    _ref$influencerWidth = _ref.influencerWidth,
    influencerWidth = _ref$influencerWidth === void 0 ? defaults.influencerWidth : _ref$influencerWidth,
    initialStep = _ref.initialStep,
    label = _ref.label,
    nextButtonText = _ref.nextButtonText,
    onClose = _ref.onClose,
    onRequestSubmit = _ref.onRequestSubmit,
    open = _ref.open,
    firstFocusElement = _ref.firstFocusElement,
    submitButtonText = _ref.submitButtonText,
    title = _ref.title,
    _ref$verticalPosition = _ref.verticalPosition,
    verticalPosition = _ref$verticalPosition === void 0 ? defaults.verticalPosition : _ref$verticalPosition,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    createTearsheetActions = _useState2[0],
    setCreateTearsheetActions = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    shouldViewAll = _useState4[0],
    setShouldViewAll = _useState4[1];
  var _useState5 = (0, _react.useState)(0),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    currentStep = _useState6[0],
    setCurrentStep = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isSubmitting = _useState8[0],
    setIsSubmitting = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    isDisabled = _useState10[0],
    setIsDisabled = _useState10[1];
  var _useState11 = (0, _react.useState)(),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    onNext = _useState12[0],
    _setOnNext = _useState12[1];
  var _useState13 = (0, _react.useState)(),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    onMount = _useState14[0],
    _setOnMount = _useState14[1];
  var _useState15 = (0, _react.useState)([]),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    stepData = _useState16[0],
    setStepData = _useState16[1];
  var _useState17 = (0, _react.useState)(1),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    firstIncludedStep = _useState18[0],
    setFirstIncludedStep = _useState18[1];
  var _useState19 = (0, _react.useState)(null),
    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
    lastIncludedStep = _useState20[0],
    setLastIncludedStep = _useState20[1];
  var previousState = (0, _hooks.usePreviousValue)({
    currentStep: currentStep,
    open: open
  });
  var contentRef = (0, _react.useRef)();
  (0, _react.useEffect)(function () {
    var firstItem = stepData.findIndex(function (item) {
      return item === null || item === void 0 ? void 0 : item.shouldIncludeStep;
    }) + 1;
    var lastItem = (0, _lastIndexInArray.lastIndexInArray)(stepData, 'shouldIncludeStep', true);
    if (firstItem !== firstIncludedStep) {
      setFirstIncludedStep(firstItem);
    }
    if (lastItem !== lastIncludedStep) {
      setLastIncludedStep(lastItem);
    }
    if (open && initialStep) {
      var numberOfHiddenSteps = (0, _getNumberOfHiddenSteps.getNumberOfHiddenSteps)(stepData, initialStep);
      setCurrentStep(Number(initialStep + numberOfHiddenSteps));
    }
  }, [stepData, firstIncludedStep, lastIncludedStep, initialStep, open]);
  (0, _hooks.useCreateComponentFocus)({
    previousState: previousState,
    currentStep: currentStep,
    blockClass: blockClass,
    onMount: onMount,
    firstFocusElement: firstFocusElement
  });
  (0, _hooks.useValidCreateStepCount)(stepData.length, componentName);
  (0, _hooks.useResetCreateComponent)({
    firstIncludedStep: firstIncludedStep,
    previousState: previousState,
    open: open,
    setCurrentStep: setCurrentStep,
    stepData: stepData,
    initialStep: initialStep,
    totalSteps: stepData === null || stepData === void 0 ? void 0 : stepData.length,
    componentName: componentName
  });
  (0, _hooks.useCreateComponentStepChange)({
    firstIncludedStep: firstIncludedStep,
    lastIncludedStep: lastIncludedStep,
    stepData: stepData,
    onNext: onNext,
    isSubmitDisabled: isDisabled,
    setCurrentStep: setCurrentStep,
    setIsSubmitting: setIsSubmitting,
    setShouldViewAll: setShouldViewAll,
    onClose: onClose,
    onRequestSubmit: onRequestSubmit,
    componentName: componentName,
    currentStep: currentStep,
    shouldViewAll: shouldViewAll,
    backButtonText: backButtonText,
    cancelButtonText: cancelButtonText,
    submitButtonText: submitButtonText,
    nextButtonText: nextButtonText,
    isSubmitting: isSubmitting,
    componentBlockClass: blockClass,
    setCreateComponentActions: setCreateTearsheetActions
  });

  // adds focus trap functionality
  /* istanbul ignore next */
  var handleBlur = function handleBlur(_ref2) {
    var oldActiveNode = _ref2.target,
      currentActiveNode = _ref2.relatedTarget;
    var visibleStepInnerContent = document.querySelector(".".concat(_settings.pkg.prefix, "--tearsheet__body"));
    if (open && visibleStepInnerContent) {
      (0, _wrapFocus.default)({
        bodyNode: visibleStepInnerContent,
        currentActiveNode: currentActiveNode,
        oldActiveNode: oldActiveNode
      });
    }
  };
  return /*#__PURE__*/_react.default.createElement(_TearsheetShell.TearsheetShell, (0, _extends2.default)({}, rest, (0, _devtools.getDevtoolsProps)(componentName), {
    actions: createTearsheetActions,
    className: (0, _classnames.default)(blockClass, className),
    description: description,
    hasCloseIcon: false,
    influencer: /*#__PURE__*/_react.default.createElement(_CreateInfluencer.CreateInfluencer, {
      currentStep: currentStep,
      stepData: stepData
    }),
    influencerPosition: "left",
    influencerWidth: influencerWidth,
    label: label,
    onClose: onClose,
    open: open,
    size: "wide",
    title: title,
    verticalPosition: verticalPosition,
    ref: ref
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__content"),
    onBlur: handleBlur,
    ref: contentRef
  }, /*#__PURE__*/_react.default.createElement(_react2.Form, null, /*#__PURE__*/_react.default.createElement(StepsContext.Provider, {
    value: {
      currentStep: currentStep,
      setIsDisabled: setIsDisabled,
      setOnNext: function setOnNext(fn) {
        return _setOnNext(function () {
          return fn;
        });
      },
      setOnMount: function setOnMount(fn) {
        return _setOnMount(function () {
          return fn;
        });
      },
      setStepData: setStepData,
      stepData: stepData
    }
  }, _react.default.Children.map(children, function (child, index) {
    return /*#__PURE__*/_react.default.createElement(StepNumberContext.Provider, {
      value: index + 1
    }, child);
  })))));
});

// Return a placeholder if not released and not enabled by feature flag
exports.CreateTearsheet = CreateTearsheet;
exports.CreateTearsheet = CreateTearsheet = _settings.pkg.checkComponentEnabled(CreateTearsheet, componentName);

// The display name of the component, used by React. Note that displayName
// is used in preference to relying on function.name.
CreateTearsheet.displayName = componentName;

// Note that the descriptions here should be kept in sync with those for the
// corresponding props for TearsheetNarrow and TearsheetShell components.
CreateTearsheet.propTypes = {
  /**
   * The back button text
   */
  backButtonText: _propTypes.default.string.isRequired,
  /**
   * The cancel button text
   */
  cancelButtonText: _propTypes.default.string.isRequired,
  /**
   * The main content of the tearsheet
   */
  children: _propTypes.default.node,
  /**
   * An optional class or classes to be added to the outermost element.
   */
  className: _propTypes.default.string,
  /**
   * A description of the flow, displayed in the header area of the tearsheet.
   */
  description: _propTypes.default.node,
  /**
   * Specifies elements to focus on first on render.
   */
  firstFocusElement: _propTypes.default.string,
  /**
   * Used to set the size of the influencer
   */
  influencerWidth: _propTypes.default.oneOf(['narrow', 'wide']),
  /**
   * This can be used to open the component to a step other than the first step.
   * For example, a create flow was previously in progress, data was saved, and
   * is now being completed.
   */
  initialStep: _propTypes.default.number,
  /**
   * A label for the tearsheet, displayed in the header area of the tearsheet
   * to maintain context for the tearsheet (e.g. as the title changes from page
   * to page of a multi-page task).
   */
  label: _propTypes.default.node,
  /**
   * The next button text
   */
  nextButtonText: _propTypes.default.string.isRequired,
  /**
   * An optional handler that is called when the user closes the tearsheet (by
   * clicking the close button, if enabled, or clicking outside, if enabled).
   * Returning `false` here prevents the modal from closing.
   */
  onClose: _propTypes.default.func,
  /**
   * Specify a handler for submitting the multi step tearsheet (final step).
   * This function can _optionally_ return a promise that is either resolved or rejected and the CreateTearsheet will handle the submitting state of the create button.
   */
  onRequestSubmit: _propTypes.default.func.isRequired,
  /**
   * Specifies whether the tearsheet is currently open.
   */
  open: _propTypes.default.bool,
  /**
   * The submit button text
   */
  submitButtonText: _propTypes.default.string.isRequired,
  /**
   * The main title of the tearsheet, displayed in the header area.
   */
  title: _propTypes.default.node,
  /**
   * The position of the top of tearsheet in the viewport. The 'normal'
   * position (the default) is a short distance down from the top of the
   * viewport, leaving room at the top for a global header bar to show through
   * from below. The 'lower' position provides a little extra room at the top
   * to allow an action bar navigation or breadcrumbs to also show through.
   */
  verticalPosition: _propTypes.default.oneOf(['normal', 'lower'])
};