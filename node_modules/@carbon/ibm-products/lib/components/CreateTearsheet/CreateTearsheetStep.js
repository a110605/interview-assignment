"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CreateTearsheetStep = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _react2 = require("@carbon/react");
var _CreateTearsheet = require("./CreateTearsheet");
var _settings = require("../../settings");
var _pconsole = _interopRequireDefault(require("../../global/js/utils/pconsole"));
var _hooks = require("../../global/js/hooks");
var _excluded = ["children", "className", "description", "disableSubmit", "fieldsetLegendText", "hasFieldset", "includeStep", "introStep", "onNext", "onMount", "secondaryLabel", "subtitle", "title"];
/**
 * Copyright IBM Corp. 2021, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var componentName = 'CreateTearsheetStep';
var blockClass = "".concat(_settings.pkg.prefix, "--tearsheet-create__step");

// Default values for props
var defaults = {
  hasFieldset: true,
  includeStep: true
};
var CreateTearsheetStep = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var _cx;
  var children = _ref.children,
    className = _ref.className,
    description = _ref.description,
    disableSubmit = _ref.disableSubmit,
    fieldsetLegendText = _ref.fieldsetLegendText,
    _ref$hasFieldset = _ref.hasFieldset,
    hasFieldset = _ref$hasFieldset === void 0 ? defaults.hasFieldset : _ref$hasFieldset,
    _ref$includeStep = _ref.includeStep,
    includeStep = _ref$includeStep === void 0 ? defaults.includeStep : _ref$includeStep,
    introStep = _ref.introStep,
    onNext = _ref.onNext,
    onMount = _ref.onMount,
    secondaryLabel = _ref.secondaryLabel,
    subtitle = _ref.subtitle,
    title = _ref.title,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var stepsContext = (0, _react.useContext)(_CreateTearsheet.StepsContext);
  var stepNumber = (0, _react.useContext)(_CreateTearsheet.StepNumberContext);
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    shouldIncludeStep = _useState2[0],
    setShouldIncludeStep = _useState2[1];
  var previousState = (0, _hooks.usePreviousValue)({
    currentStep: stepsContext === null || stepsContext === void 0 ? void 0 : stepsContext.currentStep
  });
  (0, _hooks.useRetrieveStepData)({
    stepsContext: stepsContext,
    stepNumber: stepNumber,
    introStep: introStep,
    shouldIncludeStep: shouldIncludeStep,
    secondaryLabel: secondaryLabel,
    title: title
  });

  // This useEffect reports back the onMount value so that they can be used
  // in the appropriate custom hooks.
  (0, _react.useEffect)(function () {
    if (stepNumber === (stepsContext === null || stepsContext === void 0 ? void 0 : stepsContext.currentStep) && (previousState === null || previousState === void 0 ? void 0 : previousState.currentStep) !== (stepsContext === null || stepsContext === void 0 ? void 0 : stepsContext.currentStep)) {
      stepsContext === null || stepsContext === void 0 ? void 0 : stepsContext.setOnMount(onMount);
    }
  }, [onMount, stepsContext, stepNumber, previousState === null || previousState === void 0 ? void 0 : previousState.currentStep]);

  // Used to take the `includeStep` prop and use it as a local state value
  (0, _react.useEffect)(function () {
    setShouldIncludeStep(includeStep);
  }, [includeStep, stepsContext, title]);

  // Whenever we are the current step, supply our disableSubmit and onNext values to the
  // steps container context so that it can manage the 'Next' button appropriately.
  (0, _react.useEffect)(function () {
    if (stepNumber === (stepsContext === null || stepsContext === void 0 ? void 0 : stepsContext.currentStep)) {
      stepsContext.setIsDisabled(disableSubmit);
      stepsContext === null || stepsContext === void 0 ? void 0 : stepsContext.setOnNext(onNext); // needs to be updated here otherwise there could be stale state values from only initially setting onNext
    }
  }, [stepsContext, stepNumber, disableSubmit, onNext]);
  return stepsContext ? /*#__PURE__*/_react.default.createElement(_react2.Grid, (0, _extends2.default)({}, rest, {
    className: (0, _classnames.default)(blockClass, className, (_cx = {}, (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__step--hidden-step"), stepNumber !== (stepsContext === null || stepsContext === void 0 ? void 0 : stepsContext.currentStep)), (0, _defineProperty2.default)(_cx, "".concat(blockClass, "__step--visible-step"), stepNumber === (stepsContext === null || stepsContext === void 0 ? void 0 : stepsContext.currentStep)), _cx)),
    ref: ref
  }), /*#__PURE__*/_react.default.createElement(_react2.Column, {
    xlg: 12,
    lg: 12,
    md: 8,
    sm: 4
  }, /*#__PURE__*/_react.default.createElement("h4", {
    className: "".concat(blockClass, "--title")
  }, title), subtitle && /*#__PURE__*/_react.default.createElement("h6", {
    className: "".concat(blockClass, "--subtitle")
  }, subtitle), description && /*#__PURE__*/_react.default.createElement("p", {
    className: "".concat(blockClass, "--description")
  }, description)), /*#__PURE__*/_react.default.createElement(_react2.Column, {
    span: 100
  }, hasFieldset ? /*#__PURE__*/_react.default.createElement(_react2.FormGroup, {
    legendText: fieldsetLegendText,
    className: "".concat(blockClass, "--fieldset")
  }, children) : children)) : _pconsole.default.warn("You have tried using a ".concat(componentName, " component outside of a CreateTearsheet. This is not allowed. ").concat(componentName, "s should always be children of the CreateTearsheet"));
});

// Return a placeholder if not released and not enabled by feature flag
exports.CreateTearsheetStep = CreateTearsheetStep;
exports.CreateTearsheetStep = CreateTearsheetStep = _settings.pkg.checkComponentEnabled(CreateTearsheetStep, componentName);
CreateTearsheetStep.propTypes = {
  /**
   * Content that shows in the tearsheet step
   */
  children: _propTypes.default.node,
  /**
   * Sets an optional className to be added to the tearsheet step
   */
  className: _propTypes.default.string,
  /**
   * Sets an optional description on the step component
   */
  description: _propTypes.default.string,
  /**
   * This will conditionally disable the submit button in the multi step Tearsheet
   */
  disableSubmit: _propTypes.default.bool,
  /**
   * This is the required legend text that appears above a fieldset html element for accessibility purposes.
   * You can set the `hasFieldset` prop to false if you have multiple fieldset elements or want to control the children of your Full Page's step content.
   * Otherwise, use CSS to hide/remove this label text.
   */
  fieldsetLegendText: _propTypes.default.string.isRequired.if(function (_ref2) {
    var hasFieldset = _ref2.hasFieldset;
    return !!hasFieldset;
  }),
  /**
   * This optional prop will render your form content inside of a fieldset html element
   * and is defaulted to true.
   * You can set this prop to `false` if you have multiple fieldset elements or want to control the children of your Full Page's step content.
   */
  hasFieldset: _propTypes.default.bool,
  /**
   * This prop is used to help track dynamic steps. If this value is `false` then the step is not included in the visible steps or the ProgressIndicator
   * steps. If this value is `true` then the step will be included in the list of visible steps, as well as being included in the ProgressIndicator step list
   */
  includeStep: _propTypes.default.bool,
  /**
   * This prop can be used on the first step to mark it as an intro step, which will not render the progress indicator steps
   */
  introStep: _propTypes.default.bool,
  /**
   * Optional function to be called on initial mount of a step.
   * For example, this can be used to fetch data that is required on a particular step.
   */
  onMount: _propTypes.default.func,
  /**
   * Optional function to be called on a step change.
   * For example, this can be used to validate input fields before proceeding to the next step.
   * This function can _optionally_ return a promise that is either resolved or rejected and the CreateTearsheet will handle the submitting state of the next button.
   */
  onNext: _propTypes.default.func,
  /**
   * Sets the optional secondary label on the progress step component
   */
  secondaryLabel: _propTypes.default.string,
  /**
   * Sets an optional subtitle on the step component
   */
  subtitle: _propTypes.default.string,
  /**
   * Sets the title text for a tearsheet step
   */
  title: _propTypes.default.node.isRequired
};