"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EmptyStateContent = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _settings = require("../../settings");
var _classnames = _interopRequireDefault(require("classnames"));
var _react2 = require("@carbon/react");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } /**
opyright IBM Corp. 2020, 2021

his source code is licensed under the Apache-2.0 license found in the
file in the root directory of this source tree.
mport portions of React that are needed.
// Other standard imports.
// Carbon and package components we use.
// The block part of our conventional BEM class names (blockClass__E--M).
var blockClass = "".concat(_settings.pkg.prefix, "--empty-state");
var componentName = 'EmptyStateContent';
var EmptyStateContent = function EmptyStateContent(_ref) {
  var action = _ref.action,
    link = _ref.link,
    size = _ref.size,
    subtitle = _ref.subtitle,
    title = _ref.title;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__content")
  }, /*#__PURE__*/_react.default.createElement("h3", {
    className: (0, _classnames.default)("".concat(blockClass, "__header"), (0, _defineProperty2.default)({}, "".concat(blockClass, "__header--small"), size === 'sm'))
  }, title), subtitle && /*#__PURE__*/_react.default.createElement("p", {
    className: (0, _classnames.default)("".concat(blockClass, "__subtitle"), (0, _defineProperty2.default)({}, "".concat(blockClass, "__subtitle--small"), size === 'sm'))
  }, subtitle), (action === null || action === void 0 ? void 0 : action.text) && (action === null || action === void 0 ? void 0 : action.onClick) && /*#__PURE__*/_react.default.createElement(_react2.Button, (0, _extends2.default)({}, action, {
    className: "".concat(blockClass, "__action-button"),
    kind: action.kind || 'tertiary',
    onClick: action.onClick,
    renderIcon: action.renderIcon || null,
    size: 'sm'
  }), action.text), (link === null || link === void 0 ? void 0 : link.text) && (link === null || link === void 0 ? void 0 : link.href) && /*#__PURE__*/_react.default.createElement(_react2.Link, (0, _extends2.default)({}, link, {
    className: "".concat(blockClass, "__link"),
    href: link.href
  }), link.text));
};

// The display name of the component, used by React. Note that displayName
// is used in preference to relying on function.name.
exports.EmptyStateContent = EmptyStateContent;
EmptyStateContent.displayName = componentName;

// The types and DocGen commentary for the component props,
// in alphabetical order (for consistency).
// See https://www.npmjs.com/package/prop-types#usage.
EmptyStateContent.propTypes = {
  /**
   * Empty state action button
   */
  action: _propTypes.default.shape(_objectSpread(_objectSpread({}, _react2.Button.propTypes), {}, {
    iconDescription: _propTypes.default.string,
    kind: _propTypes.default.oneOf(['primary', 'secondary', 'tertiary']),
    renderIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    onClick: _react2.Button.propTypes.onClick,
    text: _propTypes.default.string
  })),
  /**
   * Empty state link object
   */
  link: _propTypes.default.shape(_objectSpread(_objectSpread({}, _react2.Link.propTypes), {}, {
    text: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
    href: _propTypes.default.string
  })),
  /**
   * Empty state size
   */
  size: _propTypes.default.oneOf(['lg', 'sm']),
  /**
   * Empty state subtitle
   */
  subtitle: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  /**
   * Empty state title
   */
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]).isRequired
};