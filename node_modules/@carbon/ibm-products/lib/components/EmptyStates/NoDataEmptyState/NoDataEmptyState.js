"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoDataEmptyState = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _react2 = require("@carbon/react");
var _devtools = require("../../../global/js/utils/devtools");
var _settings = require("../../../settings");
var _EmptyStateContent = require("../EmptyStateContent");
var _NoDataIllustration = require("../assets/NoDataIllustration");
var _EmptyState = require("../EmptyState");
var _excluded = ["action", "className", "illustrationPosition", "illustrationTheme", "link", "size", "subtitle", "title"];
/**
 * Copyright IBM Corp. 2020, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
// Import portions of React that are needed.
// Other standard imports.
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
// The block part of our conventional BEM class names (blockClass__E--M).
var blockClass = "".concat(_settings.pkg.prefix, "--empty-state");
var componentName = 'NoDataEmptyState';

/**
 * The `EmptyState` component follows the Carbon guidelines for empty states with some added specifications around illustration usage. For additional usage guidelines and documentation please refer to the links above.
 */
var NoDataEmptyState = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var action = _ref.action,
    className = _ref.className,
    _ref$illustrationPosi = _ref.illustrationPosition,
    illustrationPosition = _ref$illustrationPosi === void 0 ? _EmptyState.defaults.position : _ref$illustrationPosi,
    illustrationTheme = _ref.illustrationTheme,
    link = _ref.link,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? _EmptyState.defaults.size : _ref$size,
    subtitle = _ref.subtitle,
    title = _ref.title,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, rest, {
    className: (0, _classnames.default)(blockClass, className, "".concat(blockClass, "-position--").concat(illustrationPosition)),
    ref: ref
  }, (0, _devtools.getDevtoolsProps)(componentName)), /*#__PURE__*/_react.default.createElement(_NoDataIllustration.NoDataIllustration, {
    theme: illustrationTheme,
    size: size
  }), /*#__PURE__*/_react.default.createElement(_EmptyStateContent.EmptyStateContent, {
    action: action,
    link: link,
    size: size,
    subtitle: subtitle,
    title: title
  }));
});

// Return a placeholder if not released and not enabled by feature flag
exports.NoDataEmptyState = NoDataEmptyState;
exports.NoDataEmptyState = NoDataEmptyState = _settings.pkg.checkComponentEnabled(NoDataEmptyState, componentName);

// The display name of the component, used by React. Note that displayName
// is used in preference to relying on function.name.
NoDataEmptyState.displayName = componentName;

// The types and DocGen commentary for the component props,
// in alphabetical order (for consistency).
// See https://www.npmjs.com/package/prop-types#usage.
NoDataEmptyState.propTypes = {
  /**
   * Empty state action button
   */
  action: _propTypes.default.shape(_objectSpread(_objectSpread({}, _react2.Button.propTypes), {}, {
    kind: _propTypes.default.oneOf(['primary', 'secondary', 'tertiary']),
    renderIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    onClick: _react2.Button.propTypes.onClick,
    text: _propTypes.default.string
  })),
  /**
   * Provide an optional class to be applied to the containing node.
   */
  className: _propTypes.default.string,
  /**
   * Designates the position of the illustration relative to the content
   */
  illustrationPosition: _propTypes.default.oneOf(['top', 'right', 'bottom', 'left']),
  /**
   * Empty state illustration theme variations.
   * To ensure you use the correct themed illustrations, you can conditionally specify light or dark
   * based on your app's current theme value. Example:
   * `illustrationTheme={appTheme === ('carbon--g100' || 'carbon--g90') ? 'dark' : 'light'}`
   */
  illustrationTheme: _propTypes.default.oneOf(['light', 'dark']),
  /**
   * Empty state link object
   */
  link: _propTypes.default.shape(_objectSpread(_objectSpread({}, _react2.Link.propTypes), {}, {
    text: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
    href: _propTypes.default.string
  })),
  /**
   * Empty state size
   */
  size: _propTypes.default.oneOf(['lg', 'sm']),
  /**
   * Empty state subtitle
   */
  subtitle: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  /**
   * Empty state title
   */
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]).isRequired
};