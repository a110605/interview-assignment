"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaults = exports.EmptyState = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _react2 = require("@carbon/react");
var _devtools = require("../../global/js/utils/devtools");
require("../../global/js/utils/props-helper");
var _settings = require("../../settings");
var _EmptyStateContent = require("./EmptyStateContent");
var _excluded = ["action", "className", "illustration", "illustrationDescription", "illustrationPosition", "link", "size", "subtitle", "title"];
/**
 * Copyright IBM Corp. 2020, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
// Import portions of React that are needed.
// Other standard imports.
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
// The block part of our conventional BEM class names (blockClass__E--M).
var blockClass = "".concat(_settings.pkg.prefix, "--empty-state");
var componentName = 'EmptyState';

// Default values for props
var defaults = {
  position: 'top',
  size: 'lg'
};

/**
 * The `EmptyState` component follows the Carbon guidelines for empty states with some added specifications around illustration usage. For additional usage guidelines and documentation please refer to the links above.
 */
exports.defaults = defaults;
var EmptyState = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var action = _ref.action,
    className = _ref.className,
    illustration = _ref.illustration,
    illustrationDescription = _ref.illustrationDescription,
    _ref$illustrationPosi = _ref.illustrationPosition,
    illustrationPosition = _ref$illustrationPosi === void 0 ? defaults.position : _ref$illustrationPosi,
    link = _ref.link,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? defaults.size : _ref$size,
    subtitle = _ref.subtitle,
    title = _ref.title,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, rest, {
    className: (0, _classnames.default)(blockClass, className, (0, _defineProperty2.default)({}, "".concat(blockClass, "-position--").concat(illustrationPosition), !!illustration)),
    ref: ref
  }, (0, _devtools.getDevtoolsProps)(componentName)), illustration && /*#__PURE__*/_react.default.createElement("img", {
    src: illustration,
    alt: illustrationDescription,
    className: (0, _classnames.default)(["".concat(blockClass, "__illustration"), "".concat(blockClass, "__illustration--").concat(size)])
  }), /*#__PURE__*/_react.default.createElement(_EmptyStateContent.EmptyStateContent, {
    action: action,
    link: link,
    size: size,
    subtitle: subtitle,
    title: title
  }));
});

// Return a placeholder if not released and not enabled by feature flag
exports.EmptyState = EmptyState;
exports.EmptyState = EmptyState = _settings.pkg.checkComponentEnabled(EmptyState, componentName);
EmptyState.propTypes = {
  /**
   * Empty state action button
   */
  action: _propTypes.default.shape(_objectSpread(_objectSpread({}, _react2.Button.propTypes), {}, {
    kind: _propTypes.default.oneOf(['primary', 'secondary', 'tertiary']),
    renderIcon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    onClick: _react2.Button.propTypes.onClick,
    text: _propTypes.default.string
  })),
  /**
   * Provide an optional class to be applied to the containing node.
   */
  className: _propTypes.default.string,
  /**
   * Empty state illustration, specify the `src` for a provided illustration to be displayed. In the case of requiring a light and dark illustration of your own, simply pass the corresponding illustration based on the current theme of your application.
   * For example: `illustration={appTheme === 'dark' ? darkIllustration : lightIllustration}`
   */
  illustration: _propTypes.default.string,
  /**
   * The alt text for custom provided illustrations
   */
  illustrationDescription: _propTypes.default.string.isRequired.if(function (_ref2) {
    var illustration = _ref2.illustration;
    return illustration;
  }),
  /**
   * Designates the position of the illustration relative to the content
   */
  illustrationPosition: _propTypes.default.oneOf(['top', 'right', 'bottom', 'left']),
  /**
   * Empty state link object
   */
  link: _propTypes.default.shape(_objectSpread(_objectSpread({}, _react2.Link.propTypes), {}, {
    text: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
    href: _propTypes.default.string
  })),
  /**
   * Empty state size
   */
  size: _propTypes.default.oneOf(['lg', 'sm']),
  /**
   * Empty state subtext
   */
  subtitle: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  /**
   * Empty state heading
   */
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]).isRequired
};
EmptyState.displayName = componentName;