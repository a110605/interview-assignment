"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SingleAddSelect = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _AddSelect = require("../AddSelect");
var _devtools = require("../../global/js/utils/devtools");
var _settings = require("../../settings");
var _propsHelper = require("../../global/js/utils/props-helper");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
//
// Copyright IBM Corp. 2022
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//

var componentName = 'SingleAddSelect';

/**
 * Used to add or select one or more items from larger lists or hierarchies.
 */
var SingleAddSelect = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  // remove multi add select specific props
  var validProps = (0, _propsHelper.prepareProps)(props, ['columnInputPlaceholder', 'globalFilters', 'globalFiltersIconDescription', 'globalFiltersPlaceholderText', 'globalFiltersPrimaryButtonText', 'globalFiltersSecondaryButtonText', 'influencerTitle', 'multi', 'noSelectionDescription', 'noSelectionTitle', 'removeIconDescription']);
  return /*#__PURE__*/_react.default.createElement(_AddSelect.AddSelect, (0, _extends2.default)({}, validProps, {
    ref: ref
  }, (0, _devtools.getDevtoolsProps)(componentName)));
});
exports.SingleAddSelect = SingleAddSelect;
exports.SingleAddSelect = SingleAddSelect = _settings.pkg.checkComponentEnabled(SingleAddSelect, componentName);
SingleAddSelect.propTypes = {
  /**
   * optional class name
   */
  className: _propTypes.default.string,
  /**
   * text description that appears under the title
   */
  description: _propTypes.default.string,
  /**
   * label for global search input
   */
  globalSearchLabel: _propTypes.default.string,
  /**
   * placeholder for global search input
   */
  globalSearchPlaceholder: _propTypes.default.string,
  /**
   * object that contains the item data. for more information reference the
   * "Structuring items" section in the docs tab
   */
  items: _propTypes.default.shape({
    entries: _propTypes.default.arrayOf(_propTypes.default.shape({
      children: _propTypes.default.object,
      id: _propTypes.default.string.isRequired,
      title: _propTypes.default.string.isRequired,
      value: _propTypes.default.string.isRequired
    }))
  }),
  /**
   * label that display above the list of items
   */
  itemsLabel: _propTypes.default.string,
  /**
   * text to display when no results are found from the global search
   */
  noResultsDescription: _propTypes.default.string,
  /**
   * title to display when no results are found from the global search
   */
  noResultsTitle: _propTypes.default.string,
  /**
   * function to call when the close button clicked
   */
  onClose: _propTypes.default.func,
  /**
   * text for close button
   */
  onCloseButtonText: _propTypes.default.string,
  /**
   * function to call when the submit button is clicked. returns a selection
   */
  onSubmit: _propTypes.default.func,
  /**
   * text for the submit button
   */
  onSubmitButtonText: _propTypes.default.string,
  /**
   * specifies if the component is open or not
   */
  open: _propTypes.default.bool,
  /**
   * text that displays when displaying filtered items
   */
  searchResultsLabel: _propTypes.default.string,
  /**
   * header text
   */
  title: _propTypes.default.string
};
SingleAddSelect.displayName = componentName;