"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TagSetOverflow = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _react2 = require("@carbon/react");
var _hooks = require("../../global/js/hooks");
var _settings = require("../../settings");
var _excluded = ["allTagsModalSearchThreshold", "className", "onShowAllClick", "overflowAlign", "overflowTags", "showAllTagsLabel"]; //
// Copyright IBM Corp. 2021, 2022
//
// This source code is licensed under the Apache-2.0 license found in the
// LICENSE file in the root directory of this source tree.
//
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var componentName = 'TagSetOverflow';
var blockClass = "".concat(_settings.pkg.prefix, "--tag-set-overflow");

// Default values for props
var defaults = {
  allTagsModalSearchThreshold: 10,
  overflowAlign: 'bottom'
};
var TagSetOverflow = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var _ref$allTagsModalSear = _ref.allTagsModalSearchThreshold,
    allTagsModalSearchThreshold = _ref$allTagsModalSear === void 0 ? defaults.allTagsModalSearchThreshold : _ref$allTagsModalSear,
    className = _ref.className,
    onShowAllClick = _ref.onShowAllClick,
    _ref$overflowAlign = _ref.overflowAlign,
    overflowAlign = _ref$overflowAlign === void 0 ? defaults.overflowAlign : _ref$overflowAlign,
    overflowTags = _ref.overflowTags,
    showAllTagsLabel = _ref.showAllTagsLabel,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    popoverOpen = _useState2[0],
    setPopoverOpen = _useState2[1];
  var localRef = (0, _react.useRef)();
  var overflowTagContent = (0, _react.useRef)(null);
  (0, _hooks.useClickOutside)(ref || localRef, function () {
    if (popoverOpen) {
      setPopoverOpen(false);
    }
  });
  var handleShowAllTagsClick = function handleShowAllTagsClick(ev) {
    ev.stopPropagation();
    ev.preventDefault();
    setPopoverOpen(false);
    onShowAllClick();
  };
  var handleEscKeyPress = function handleEscKeyPress(event) {
    var key = event.key;
    if (key === 'Escape') {
      setPopoverOpen(false);
    }
  };
  return /*#__PURE__*/_react.default.createElement("span", (0, _extends2.default)({}, rest, {
    "aria-hidden": overflowTags.length === 0,
    className: (0, _classnames.default)("".concat(blockClass), (0, _defineProperty2.default)({}, "".concat(blockClass, "--hidden"), overflowTags.length === 0)),
    ref: ref || localRef
  }), /*#__PURE__*/_react.default.createElement(_react2.Popover, {
    align: overflowAlign,
    className: (0, _classnames.default)(className, "".concat(blockClass, "__tagset-popover")),
    dropShadow: true,
    highContrast: true,
    onKeyDown: handleEscKeyPress,
    open: popoverOpen
  }, /*#__PURE__*/_react.default.createElement(_react2.Tag, {
    onClick: function onClick() {
      return setPopoverOpen(!popoverOpen);
    },
    className: (0, _classnames.default)("".concat(blockClass, "__popover-trigger"))
  }, "+", overflowTags.length), /*#__PURE__*/_react.default.createElement(_react2.PopoverContent, null, /*#__PURE__*/_react.default.createElement("div", {
    ref: overflowTagContent,
    className: "".concat(blockClass, "__content")
  }, /*#__PURE__*/_react.default.createElement("ul", {
    className: "".concat(blockClass, "__tag-list")
  }, overflowTags.filter(function (_, index) {
    return overflowTags.length > allTagsModalSearchThreshold ? index < allTagsModalSearchThreshold : index <= allTagsModalSearchThreshold;
  }).map(function (tag, index) {
    return /*#__PURE__*/_react.default.createElement("li", {
      className: "".concat(blockClass, "__tag-item"),
      key: index
    }, /*#__PURE__*/_react.default.cloneElement(tag, {
      filter: false
    }));
  })), overflowTags.length > allTagsModalSearchThreshold && /*#__PURE__*/_react.default.createElement(_react2.Link, {
    className: "".concat(blockClass, "__show-all-tags-link"),
    href: "",
    onClick: handleShowAllTagsClick,
    role: "button"
  }, showAllTagsLabel)))));
});
exports.TagSetOverflow = TagSetOverflow;
TagSetOverflow.displayName = componentName;
TagSetOverflow.propTypes = {
  /**
   * count of overflowTags over which a modal is offered
   */
  allTagsModalSearchThreshold: _propTypes.default.number,
  /**
   * className
   */
  className: _propTypes.default.string,
  /**
   * function to execute on clicking show all
   */
  onShowAllClick: _propTypes.default.func.isRequired,
  /**
   * overflowAlign from the standard tooltip
   */
  overflowAlign: _propTypes.default.oneOf(['top', 'top-left', 'top-right', 'bottom', 'bottom-left', 'bottom-right', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top']),
  /**
   * tags shown in overflow
   */
  overflowTags: _propTypes.default.arrayOf(_propTypes.default.object).isRequired,
  /**
   * label for the overflow show all tags link
   */
  showAllTagsLabel: _propTypes.default.string
};