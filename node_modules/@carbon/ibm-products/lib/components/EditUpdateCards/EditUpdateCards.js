"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditUpdateCards = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _devtools = require("../../global/js/utils/devtools");
var _settings = require("../../settings");
var _ProductiveCard = require("../ProductiveCard");
var _excluded = ["actionIcons", "actionsPlacement", "className", "description", "editChildren", "editMode", "label", "previewChildren", "title", "titleSize"];
/**
 * Copyright IBM Corp. 2022, 2022
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
// Import portions of React that are needed.
// Other standard imports.
// import { children } from 'cheerio/lib/api/traversing';

// Carbon and package components we use.
/* TODO: @import(s) of carbon components and other package components. */ // The block part of our conventional BEM class names (blockClass__E--M).
var blockClass = "".concat(_settings.pkg.prefix, "--edit-update-cards");
var componentName = 'EditUpdateCards';

// NOTE: the component SCSS is not imported here: it is rolled up separately.

// Default values can be included here and then assigned to the prop params,
// e.g. prop = defaults.prop,
// This gathers default values together neatly and ensures non-primitive
// values are initialized early to avoid react making unnecessary re-renders.
// Note that default values are not required for props that are 'required',
// nor for props where the component can apply undefined values reasonably.
// Default values should be provided when the component needs to make a choice
// or assumption when a prop is not supplied.

// Default values for props
// const defaults = {
//   /* TODO: add defaults for relevant props if needed */
// };

/**
 Editable cards allow a user to view, modify, and save the content contained within the card.
 These cards are generally used in instances where a user needs to make changes to a resource instances
 (ex. configuration details), account plan, etc. Editable cards allow a user to edit something within context.
 */
var EditUpdateCards = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var actionIcons = _ref.actionIcons,
    actionsPlacement = _ref.actionsPlacement,
    className = _ref.className,
    description = _ref.description,
    editChildren = _ref.editChildren,
    editMode = _ref.editMode,
    label = _ref.label,
    previewChildren = _ref.previewChildren,
    title = _ref.title,
    titleSize = _ref.titleSize,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  // const [editMode, setEditMode] = useState(false);

  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, rest, {
    className: (0, _classnames.default)(blockClass,
    // Apply the block class to the main HTML element
    className, // Apply any supplied class names to the main HTML element.
    // example: `${blockClass}__template-string-class-${kind}-n-${size}`,
    (0, _defineProperty2.default)({}, "".concat(blockClass, "__actions-bottom"), actionsPlacement === 'bottom')),
    ref: ref,
    role: "main"
  }, (0, _devtools.getDevtoolsProps)(componentName)), /*#__PURE__*/_react.default.createElement(_ProductiveCard.ProductiveCard, {
    actionIcons: actionIcons,
    actionsPlacement: actionsPlacement,
    className: className,
    description: description,
    label: label,
    title: title,
    titleSize: titleSize
  }, editMode === false && /*#__PURE__*/_react.default.createElement("div", null, previewChildren), editMode && /*#__PURE__*/_react.default.createElement("div", null, editChildren)));
});

// Return a placeholder if not released and not enabled by feature flag
exports.EditUpdateCards = EditUpdateCards;
exports.EditUpdateCards = EditUpdateCards = _settings.pkg.checkComponentEnabled(EditUpdateCards, componentName);

// The display name of the component, used by React. Note that displayName
// is used in preference to relying on function.name.
EditUpdateCards.displayName = componentName;

// The types and DocGen commentary for the component props,
// in alphabetical order (for consistency).
// See https://www.npmjs.com/package/prop-types#usage.
EditUpdateCards.propTypes = {
  /**
   * Icons that are displayed on card. Refer to design documentation for implementation guidelines
   */
  actionIcons: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string,
    icon: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),
    onKeyDown: _propTypes.default.func,
    onClick: _propTypes.default.func,
    iconDescription: _propTypes.default.string,
    href: _propTypes.default.string
  })),
  /**
   * Determines if the action icons are on the top or bottom of the card
   */
  actionsPlacement: _propTypes.default.oneOf(['top', 'bottom']),
  /**
   * Optional label for the top of the card.
   */
  className: _propTypes.default.string,
  /**
   * Optional header description
   */
  description: _propTypes.default.string,
  /**
   * Edit mode children
   */
  editChildren: _propTypes.default.node,
  /**
   * Edit mode
   */
  editMode: _propTypes.default.bool,
  /**
   * Optional label for the top of the card
   */
  label: _propTypes.default.string,
  /**
   * Preview mode children
   */
  previewChildren: _propTypes.default.node,
  /**
   * Title that's displayed at the top of the card
   */
  title: _propTypes.default.string,
  /**
   * Determines title size
   */
  titleSize: _propTypes.default.oneOf(['default', 'large'])
  /* TODO: add types and DocGen for all props. */
};