"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditSidePanel = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _devtools = require("../../global/js/utils/devtools");
var _settings = require("../../settings");
var _react2 = require("@carbon/react");
var _SidePanel = require("../SidePanel");
require("../../global/js/utils/props-helper");
var _excluded = ["children", "className", "disableSubmit", "formTitle", "formDescription", "onRequestClose", "onRequestSubmit", "open", "placement", "primaryButtonText", "secondaryButtonText", "selectorPrimaryFocus", "selectorPageContent", "size", "slideIn", "subtitle", "title"];
/**
 * Copyright IBM Corp. 2021, 2021
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
// Import portions of React that are needed.
// Other standard imports.
// Carbon and package components we use.
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
// The block part of our conventional BEM class names (blockClass__E--M).
var blockClass = "".concat(_settings.pkg.prefix, "--edit-side-panel");
var componentName = 'EditSidePanel';

// NOTE: the component SCSS is not imported here: it is rolled up separately.

// Default values for props
var defaults = {
  placement: 'right',
  size: 'md'
};

/**
 * Use with medium complexity edits if the user needs page context.
 */
var EditSidePanel = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var children = _ref.children,
    className = _ref.className,
    disableSubmit = _ref.disableSubmit,
    formTitle = _ref.formTitle,
    formDescription = _ref.formDescription,
    onRequestClose = _ref.onRequestClose,
    onRequestSubmit = _ref.onRequestSubmit,
    open = _ref.open,
    _ref$placement = _ref.placement,
    placement = _ref$placement === void 0 ? defaults.placement : _ref$placement,
    primaryButtonText = _ref.primaryButtonText,
    secondaryButtonText = _ref.secondaryButtonText,
    selectorPrimaryFocus = _ref.selectorPrimaryFocus,
    selectorPageContent = _ref.selectorPageContent,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? defaults.size : _ref$size,
    slideIn = _ref.slideIn,
    subtitle = _ref.subtitle,
    title = _ref.title,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var actions = [{
    label: primaryButtonText,
    onClick: function onClick(event) {
      event.preventDefault();
      onRequestSubmit();
    },
    kind: 'primary',
    disabled: disableSubmit,
    type: 'submit'
  }, {
    label: secondaryButtonText,
    onClick: onRequestClose,
    kind: 'secondary'
  }];
  return /*#__PURE__*/_react.default.createElement(_SidePanel.SidePanel, (0, _extends2.default)({}, rest, _objectSpread({
    open: open,
    ref: ref,
    selectorPageContent: selectorPageContent,
    onRequestClose: onRequestClose,
    title: title,
    subtitle: subtitle,
    selectorPrimaryFocus: selectorPrimaryFocus
  }, (0, _devtools.getDevtoolsProps)(componentName)), {
    placement: placement,
    slideIn: slideIn,
    animateTitle: false,
    className: (0, _classnames.default)(blockClass, className),
    size: size,
    preventCloseOnClickOutside: true,
    actions: actions
  }), formTitle && /*#__PURE__*/_react.default.createElement("h3", {
    className: "".concat(blockClass, "__form-title-text ").concat(blockClass, "__content-text")
  }, formTitle), formDescription && /*#__PURE__*/_react.default.createElement("p", {
    className: "".concat(blockClass, "__form-description-text ").concat(blockClass, "__content-text")
  }, formDescription), /*#__PURE__*/_react.default.createElement(_react2.Form, {
    className: "".concat(blockClass, "__form")
  }, children));
});

// Return a placeholder if not released and not enabled by feature flag
exports.EditSidePanel = EditSidePanel;
exports.EditSidePanel = EditSidePanel = _settings.pkg.checkComponentEnabled(EditSidePanel, componentName);

// The display name of the component, used by React. Note that displayName
// is used in preference to relying on function.name.
EditSidePanel.displayName = componentName;

// The types and DocGen commentary for the component props,
// in alphabetical order (for consistency).
// See https://www.npmjs.com/package/prop-types#usage.
EditSidePanel.propTypes = {
  /**
   * Sets the body content of the create side panel
   */
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]).isRequired,
  /**
   * Provide an optional class to be applied to the containing node.
   */
  className: _propTypes.default.string,
  /**
   * Specifies a boolean for disabling or enabling the primary button. This is important for form validation
   * Returning `true` prevents the primary button from being clicked until required fields are completed.
   */
  disableSubmit: _propTypes.default.bool,
  /**
   * Specifies an optional field that provides a additional context for a form
   */
  formDescription: _propTypes.default.node,
  /**
   * Specifies a required field that provides a title for a form
   */
  formTitle: _propTypes.default.node,
  /**
   * Specifies an optional handler which is called when the CreateSidePanel
   * is closed.
   */
  onRequestClose: _propTypes.default.func,
  /**
   * Specifies an optional handler which is called when the CreateSidePanel
   * primary button is pressed.
   */
  onRequestSubmit: _propTypes.default.func,
  /**
   * Specifies whether the CreateSidePanel is open or not.
   */
  open: _propTypes.default.bool,
  /**
   * Determines if the side panel is on the right or left
   */
  placement: _propTypes.default.oneOf(['left', 'right']),
  /**
   * Specifies the primary button's text in the modal.
   */
  primaryButtonText: _propTypes.default.string.isRequired,
  /**
   * Specifies the secondary button's text in the modal.
   */
  secondaryButtonText: _propTypes.default.string.isRequired,
  /**
   * This is the selector to the element that contains all of the page content that will shrink if the panel is a slide in.
   * This prop is required when using the `slideIn` variant of the side panel.
   */
  selectorPageContent: _propTypes.default.string.isRequired.if(function (_ref2) {
    var slideIn = _ref2.slideIn;
    return slideIn;
  }),
  /**
   * Specifies which DOM element in the form should be focused.
   */
  selectorPrimaryFocus: _propTypes.default.node.isRequired,
  /**
   * Sets the size of the side panel
   */
  size: _propTypes.default.oneOf(['xs', 'sm', 'md', 'lg', '2xl']),
  /**
   * Specifies which DOM element in the form should be focused.
   */
  slideIn: _propTypes.default.bool,
  /**
   * The subtitle of the CreateSidePanel is optional and serves to provide more information about the modal.
   */
  subtitle: _propTypes.default.node,
  /**
   * The title of the CreateSidePanel is usually the product or service name.
   */
  title: _propTypes.default.node.isRequired
};