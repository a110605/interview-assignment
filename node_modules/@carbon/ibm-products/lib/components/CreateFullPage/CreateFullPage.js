"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StepsContext = exports.StepNumberContext = exports.CreateFullPage = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _devtools = require("../../global/js/utils/devtools");
var _settings = require("../../settings");
var _react2 = require("@carbon/react");
var _CreateInfluencer = require("../CreateInfluencer");
var _ActionSet = require("../ActionSet");
var _hooks = require("../../global/js/hooks");
var _lastIndexInArray = require("../../global/js/utils/lastIndexInArray");
var _excluded = ["backButtonText", "cancelButtonText", "children", "className", "modalDangerButtonText", "modalDescription", "modalSecondaryButtonText", "modalTitle", "nextButtonText", "onClose", "onRequestSubmit", "firstFocusElement", "submitButtonText"];
/**
 * Copyright IBM Corp. 2021, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
// Import portions of React that are needed.
// Other standard imports.
// Carbon and package components we use.
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var blockClass = "".concat(_settings.pkg.prefix, "--create-full-page");
var componentName = 'CreateFullPage';

// This is a general context for the steps container
// containing information about the state of the container
// and providing some callback methods for steps to use
var StepsContext = /*#__PURE__*/(0, _react.createContext)(null);

// This is a context supplied separately to each step in the container
// to let it know what number it is in the sequence of steps
exports.StepsContext = StepsContext;
var StepNumberContext = /*#__PURE__*/(0, _react.createContext)(-1);

/**
 * Use with creations that must be completed in order for a service to be usable.
 *
 * ### Grid
 *
 * The `CreateFullPage` component utilizes Carbons' grid system in the inner
content of the main section inside of the component. You can read more guidance
on the Carbon's grid system
[here](https://www.carbondesignsystem.com/guidelines/2x-grid/overview). You can
include `<Row>` and `<Column>` components inside of each `CreateFullPageStep`
component to get the desired affect.
 */
exports.StepNumberContext = StepNumberContext;
var CreateFullPage = /*#__PURE__*/_react.default.forwardRef(function (_ref, ref) {
  var backButtonText = _ref.backButtonText,
    cancelButtonText = _ref.cancelButtonText,
    children = _ref.children,
    className = _ref.className,
    modalDangerButtonText = _ref.modalDangerButtonText,
    modalDescription = _ref.modalDescription,
    modalSecondaryButtonText = _ref.modalSecondaryButtonText,
    modalTitle = _ref.modalTitle,
    nextButtonText = _ref.nextButtonText,
    onClose = _ref.onClose,
    onRequestSubmit = _ref.onRequestSubmit,
    firstFocusElement = _ref.firstFocusElement,
    submitButtonText = _ref.submitButtonText,
    rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _useState = (0, _react.useState)([]),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    createFullPageActions = _useState2[0],
    setCreateFullPageActions = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    shouldViewAll = _useState4[0],
    setShouldViewAll = _useState4[1];
  var _useState5 = (0, _react.useState)(1),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    currentStep = _useState6[0],
    setCurrentStep = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    isSubmitting = _useState8[0],
    setIsSubmitting = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    modalIsOpen = _useState10[0],
    setModalIsOpen = _useState10[1];
  var previousState = (0, _hooks.usePreviousValue)({
    currentStep: currentStep,
    open: open
  });
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    isDisabled = _useState12[0],
    setIsDisabled = _useState12[1];
  var _useState13 = (0, _react.useState)(),
    _useState14 = (0, _slicedToArray2.default)(_useState13, 2),
    onNext = _useState14[0],
    _setOnNext = _useState14[1];
  var _useState15 = (0, _react.useState)(),
    _useState16 = (0, _slicedToArray2.default)(_useState15, 2),
    onMount = _useState16[0],
    _setOnMount = _useState16[1];
  var _useState17 = (0, _react.useState)([]),
    _useState18 = (0, _slicedToArray2.default)(_useState17, 2),
    stepData = _useState18[0],
    setStepData = _useState18[1];
  var _useState19 = (0, _react.useState)(1),
    _useState20 = (0, _slicedToArray2.default)(_useState19, 2),
    firstIncludedStep = _useState20[0],
    setFirstIncludedStep = _useState20[1];
  var _useState21 = (0, _react.useState)(null),
    _useState22 = (0, _slicedToArray2.default)(_useState21, 2),
    lastIncludedStep = _useState22[0],
    setLastIncludedStep = _useState22[1];
  (0, _react.useEffect)(function () {
    var firstItem = stepData.findIndex(function (item) {
      return item === null || item === void 0 ? void 0 : item.shouldIncludeStep;
    }) + 1;
    var lastItem = (0, _lastIndexInArray.lastIndexInArray)(stepData, 'shouldIncludeStep', true);
    if (firstItem !== firstIncludedStep) {
      setFirstIncludedStep(firstItem);
    }
    if (lastItem !== lastIncludedStep) {
      setLastIncludedStep(lastItem);
    }
  }, [stepData, firstIncludedStep, lastIncludedStep]);
  (0, _hooks.useCreateComponentFocus)({
    previousState: previousState,
    currentStep: currentStep,
    blockClass: blockClass,
    onMount: onMount,
    firstFocusElement: firstFocusElement
  });
  (0, _hooks.useValidCreateStepCount)(stepData.length, componentName);
  (0, _hooks.useCreateComponentStepChange)({
    firstIncludedStep: firstIncludedStep,
    lastIncludedStep: lastIncludedStep,
    stepData: stepData,
    onNext: onNext,
    isSubmitDisabled: isDisabled,
    setCurrentStep: setCurrentStep,
    setIsSubmitting: setIsSubmitting,
    setShouldViewAll: setShouldViewAll,
    onClose: onClose,
    onRequestSubmit: onRequestSubmit,
    componentName: componentName,
    currentStep: currentStep,
    shouldViewAll: shouldViewAll,
    backButtonText: backButtonText,
    cancelButtonText: cancelButtonText,
    submitButtonText: submitButtonText,
    nextButtonText: nextButtonText,
    isSubmitting: isSubmitting,
    componentBlockClass: blockClass,
    setCreateComponentActions: setCreateFullPageActions,
    setModalIsOpen: setModalIsOpen
  });

  // currently, we are not supporting the use of 'view all' toggle state
  /* istanbul ignore next */
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, rest, {
    ref: ref,
    className: (0, _classnames.default)(blockClass, className)
  }, (0, _devtools.getDevtoolsProps)(componentName)), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__influencer")
  }, /*#__PURE__*/_react.default.createElement(_CreateInfluencer.CreateInfluencer, {
    stepData: stepData,
    currentStep: currentStep
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__body")
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__main")
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: "".concat(blockClass, "__content")
  }, /*#__PURE__*/_react.default.createElement(_react2.Form, {
    className: "".concat(blockClass, "__form")
  }, /*#__PURE__*/_react.default.createElement(StepsContext.Provider, {
    value: {
      currentStep: currentStep,
      setIsDisabled: setIsDisabled,
      setOnNext: function setOnNext(fn) {
        return _setOnNext(function () {
          return fn;
        });
      },
      setOnMount: function setOnMount(fn) {
        return _setOnMount(function () {
          return fn;
        });
      },
      setStepData: setStepData,
      stepData: stepData
    }
  }, _react.default.Children.map(children, function (child, index) {
    return /*#__PURE__*/_react.default.createElement(StepNumberContext.Provider, {
      value: index + 1
    }, child);
  })))), /*#__PURE__*/_react.default.createElement(_ActionSet.ActionSet, {
    className: "".concat(blockClass, "__buttons"),
    actions: createFullPageActions,
    buttonSize: "2xl",
    size: "2xl"
  }))), /*#__PURE__*/_react.default.createElement(_react2.ComposedModal, {
    className: "".concat(blockClass, "__modal"),
    size: "sm",
    open: modalIsOpen,
    "aria-label": modalTitle,
    onClose: function onClose() {
      setModalIsOpen(false);
    }
  }, /*#__PURE__*/_react.default.createElement(_react2.ModalHeader, {
    title: modalTitle
  }), /*#__PURE__*/_react.default.createElement(_react2.ModalBody, null, /*#__PURE__*/_react.default.createElement("p", null, modalDescription)), /*#__PURE__*/_react.default.createElement(_react2.ModalFooter, null, /*#__PURE__*/_react.default.createElement(_react2.Button, {
    type: "button",
    kind: "secondary",
    onClick: function onClick() {
      setModalIsOpen(!modalIsOpen);
    },
    "data-modal-primary-focus": true
  }, modalSecondaryButtonText), /*#__PURE__*/_react.default.createElement(_react2.Button, {
    type: "button",
    kind: "danger",
    onClick: onClose
  }, modalDangerButtonText))));
});

// Return a placeholder if not released and not enabled by feature flag.
exports.CreateFullPage = CreateFullPage;
exports.CreateFullPage = CreateFullPage = _settings.pkg.checkComponentEnabled(CreateFullPage, componentName);

// The display name of the component, used by React. Note that displayName
// is used in preference to relying on function.name.
CreateFullPage.displayName = componentName;

// The types and DocGen commentary for the component props,
// in alphabetical order (for consistency).
// See https://www.npmjs.com/package/prop-types#usage.
CreateFullPage.propTypes = {
  /**
   * The back button text
   */
  backButtonText: _propTypes.default.string.isRequired,
  /**
   * The cancel button text
   */
  cancelButtonText: _propTypes.default.string.isRequired,
  /**
   * The main content of the full page
   */
  children: _propTypes.default.node,
  /**
   * Provide an optional class to be applied to the containing node.
   */
  className: _propTypes.default.string,
  /**
   * Specifies elements to focus on first on render.
   */
  firstFocusElement: _propTypes.default.string,
  /**
   * The primary 'danger' button text in the modal
   */
  modalDangerButtonText: _propTypes.default.string.isRequired,
  /**
   * The description located below the title in the modal
   */
  modalDescription: _propTypes.default.string,
  /**
   * The secondary button text in the modal
   */
  modalSecondaryButtonText: _propTypes.default.string.isRequired,
  /**
   * The title located in the header of the modal
   */
  modalTitle: _propTypes.default.string.isRequired,
  /**
   * The next button text
   */
  nextButtonText: _propTypes.default.string.isRequired,
  /**
   * An optional handler that is called when the user closes the full page (by
   * clicking the secondary button, located in the modal, which triggers after
   * clicking the ghost button in the modal
   */
  onClose: _propTypes.default.func,
  /**
   * Specify a handler for submitting the multi step full page (final step).
   * This function can _optionally_ return a promise that is either resolved or rejected and the CreateFullPage will handle the submitting state of the create button.
   */
  onRequestSubmit: _propTypes.default.func.isRequired,
  /**
   * @ignore
   * The aria label to be used for the UI Shell SideNav Carbon component
   */
  sideNavAriaLabel: _propTypes.default.string,
  /**
   * The submit button text
   */
  submitButtonText: _propTypes.default.string.isRequired,
  /**
   * The main title of the full page, displayed in the header area.
   */
  title: _propTypes.default.node
};